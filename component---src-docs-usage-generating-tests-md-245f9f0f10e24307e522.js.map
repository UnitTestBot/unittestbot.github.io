{"version":3,"file":"component---src-docs-usage-generating-tests-md-245f9f0f10e24307e522.js","mappings":"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","sources":["webpack://unittestbot-web/./src/docs/usage/generating-tests.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/unittestbot.github.io/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"generating-tests\"\n    }}>{`Generating Tests`}</h1>\n    <p>{`In this section we describe various tests generation scenarios that UTBot supports.`}</p>\n    <h2 {...{\n      \"id\": \"generating-tests-for-project\"\n    }}>{`Generating Tests for Project`}</h2>\n    <p>{`You can generate tests for the entire project.`}</p>\n    <p><strong parentName=\"p\">{`How-to steps`}</strong>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Right mouse click on VS Code Explorer;`}</li>\n      <li parentName=\"ol\">{`Select `}<inlineCode parentName=\"li\">{`UTBot: Generate Tests for Project`}</inlineCode>{`.`}</li>\n    </ol>\n    <p><img alt=\"projectGif\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/gifs/project.gif\" /></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`üìù`}<strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`It can take some time to analyze a big project. If you see a pop-up message at the right bottom corner of the IDE window, it means analysis is still in progress.\nOnce code analysis is completed, a test folder will be created.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"generating-tests-for-folder\"\n    }}>{`Generating Tests for Folder`}</h2>\n    <p>{`You can generate tests for the folder.`}</p>\n    <p><strong parentName=\"p\">{`How-to steps`}</strong>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Right mouse click on VS Code Explorer;`}</li>\n      <li parentName=\"ol\">{`Select `}<inlineCode parentName=\"li\">{`UTBot: Generate Tests for Folder`}</inlineCode>{`;`}</li>\n      <li parentName=\"ol\">{`Specify the path to the folder you want to generate tests for.`}</li>\n    </ol>\n    <p><img alt=\"folderGif\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/gifs/folder.gif\" /></p>\n    <h2 {...{\n      \"id\": \"generating-tests-for-file\"\n    }}>{`Generating Tests for File`}</h2>\n    <p>{`You can generate tests for a `}<inlineCode parentName=\"p\">{`'*.c'`}</inlineCode>{` file.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`üìù`}<strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`It's worth to note only public functions (declared in a corresponding header file) are considered as targets for tests.`}</p>\n    </blockquote>\n    <p><strong parentName=\"p\">{`How-to steps`}</strong>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Right mouse click to a target source file;`}</li>\n      <li parentName=\"ol\">{`Select `}<inlineCode parentName=\"li\">{`UTBot: Generate Tests... for Current File`}</inlineCode>{`.`}</li>\n    </ol>\n    <p><img alt=\"file.Gif\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/gifs/file.gif\" /></p>\n    <p>{`Once code analysis is completed, a test folder with test named according convention `}<inlineCode parentName=\"p\">{`test_%filename%.cpp`}</inlineCode>{` will be\ncreated. Now you can sync local and remote environments, recompile the project and run tests.`}</p>\n    <h2 {...{\n      \"id\": \"generating-tests-for-function\"\n    }}>{`Generating Tests for Function`}</h2>\n    <p>{`Generate tests for a particular function is also possible.`}</p>\n    <p><strong parentName=\"p\">{`How-to steps`}</strong>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Move the caret inside function body;`}</li>\n      <li parentName=\"ol\">{`Right mouse click to a text editor;`}</li>\n      <li parentName=\"ol\">{`Select `}<inlineCode parentName=\"li\">{`UTBot: Generate Tests... > for Current Function`}</inlineCode>{`.`}</li>\n    </ol>\n    <p><img alt=\"functionGif\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/gifs/function.gif\" /></p>\n    <p>{`Once code analysis is completed, a test folder with test named according convention `}<inlineCode parentName=\"p\">{`test_%filename%.cpp`}</inlineCode>{` will be\ncreated. Now you can sync local and remote environments, recompile the project and run tests.`}</p>\n    <h2 {...{\n      \"id\": \"generating-tests-for-line\"\n    }}>{`Generating Tests for Line`}</h2>\n    <p>{`It's even possible to cover a particular branch instead of entire function.`}</p>\n    <p><strong parentName=\"p\">{`How-to steps`}</strong>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Move the caret to a line you're going to cover by a test;`}</li>\n      <li parentName=\"ol\">{`Right mouse click to a text editor;`}</li>\n      <li parentName=\"ol\">{`Select `}<inlineCode parentName=\"li\">{`UTBot: Generate Tests... > for Current Line`}</inlineCode>{`.`}</li>\n    </ol>\n    <p><img alt=\"lineGif\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/gifs/line.gif\" /></p>\n    <p>{`Once code analysis is completed, a test folder with a test file named according convention `}<inlineCode parentName=\"p\">{`test_%filename%.cpp`}</inlineCode>{` will be\ncreated. Now you can sync local and remote environments, recompile the project and the run test.`}</p>\n    <h2 {...{\n      \"id\": \"generating-tests-with-prompted-result\"\n    }}>{`Generating Tests with Prompted Result`}</h2>\n    <p>{`If you need to find parameters for which a function returns a specific output, you may find this UTBot feature extremely\nuseful.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`üìù`}<strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`In general, UTBot `}<strong parentName=\"p\">{`is not able to solve NP-hard problems`}</strong>{`, that's why it is meaningless to use this feature on, for example, hash functions.`}</p>\n    </blockquote>\n    <p><strong parentName=\"p\">{`How-to steps`}</strong>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Move the caret inside a function body;`}</li>\n      <li parentName=\"ol\">{`Right mouse click to a text editor;`}</li>\n      <li parentName=\"ol\">{`Select `}<inlineCode parentName=\"li\">{`UTBot: Generate Tests... > with a Prompted Result`}</inlineCode>{`.`}</li>\n    </ol>\n    <p><img alt=\"resultGif\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/gifs/result.gif\" /></p>\n    <p>{`Set up a condition (as an inequation or as an equation) the target output satisfies:\nan operator (in C syntax), a value (constants supported only).`}</p>\n    <h2 {...{\n      \"id\": \"generating-tests-that-fail-assertion\"\n    }}>{`Generating Tests that Fail Assertion`}</h2>\n    <p>{`If some code blocks in your project are guarded by asserts (means, classic C-language asserts provided by \"assert.h\")\nyou probably want to know which parameters break them. With UnitTestBot you can generate tests to find such parameters.`}</p>\n    <p><strong parentName=\"p\">{`How-to steps`}</strong>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Move the caret to a line with `}<inlineCode parentName=\"li\">{`assert(...)`}</inlineCode>{` statement you're going to break;`}</li>\n      <li parentName=\"ol\">{`Right mouse click to a text editor;`}</li>\n      <li parentName=\"ol\">{`Select `}<inlineCode parentName=\"li\">{`UTBot: Generate Tests... > that Fail an Assertion`}</inlineCode>{`.`}</li>\n    </ol>\n    <p><img alt=\"assertGif\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/gifs/assert.gif\" /></p>\n    <p>{`Once code analysis is completed, a test folder with a test file named according convention `}<inlineCode parentName=\"p\">{`test_%filename%.cpp`}</inlineCode>{` will be\ncreated.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`‚ö†Ô∏è`}<strong parentName=\"p\">{`Be advised`}</strong></p>\n      <p parentName=\"blockquote\">{`It's not recommended to include assert-failures tests to a common test suite with regular checks as a failure triggers the engine to terminate tests execution.`}</p>\n    </blockquote>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","isMDXComponent"],"sourceRoot":""}