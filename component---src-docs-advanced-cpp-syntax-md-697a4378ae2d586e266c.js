"use strict";(self.webpackChunkunittestbot_web=self.webpackChunkunittestbot_web||[]).push([[7605],{84782:function(n,e,t){t.r(e),t.d(e,{_frontmatter:function(){return i},default:function(){return l}});var a=t(87462),s=t(63366),r=(t(15007),t(64983)),o=t(23017),c=(t(8156),["components"]),i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!Object.prototype.hasOwnProperty.call(i,"__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/advanced/cpp-syntax.md"}});var p={_frontmatter:i},u=o.Z;function l(n){var e=n.components,t=(0,s.Z)(n,c);return(0,r.kt)(u,(0,a.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"supported-c-syntax"},"Supported C++ Syntax"),(0,r.kt)("p",null,"Support of C++ language features is very limited. Here you can find test cases examples.\nAll code snippets below were taken from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/cpp-example/"},"this directory"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#reference-parameters"},"Reference parameters")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#class-as-parameters"},"Class as parameters")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#class-as-return-values"},"Class as return values")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#class-methods"},"Class methods")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#operators"},"Operators")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#private"},"Private"))),(0,r.kt)("h2",{id:"reference-parameters"},"Reference parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int double_abs_lvalue_reference(int& a) {\n    if (a < 0) {\n        a *= -2;\n    }\n    return a;\n}\n\nint double_abs_const_lvalue_reference(const int& a) {\n    if (a < 0) {\n        return -2 * a;\n    }\n    return a;\n}\n")),(0,r.kt)("h6",{id:"tests-code"},"Tests code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"TEST(regression, double_abs_lvalue_reference_test_1)\n{\n    // Construct input\n    int a = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = double_abs_lvalue_reference(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n\n    // Check function parameters\n    int expected_a = 0;\n    EXPECT_EQ(expected_a, a);\n}\n\nTEST(regression, double_abs_lvalue_reference_test_2)\n{\n    // Construct input\n    int a = -1;\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = double_abs_lvalue_reference(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n\n    // Check function parameters\n    int expected_a = 2;\n    EXPECT_EQ(expected_a, a);\n}\n\nTEST(regression, double_abs_const_lvalue_reference_test_1)\n{\n    // Construct input\n    int a = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = double_abs_const_lvalue_reference(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, double_abs_const_lvalue_reference_test_2)\n{\n    // Construct input\n    int a = -1;\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = double_abs_const_lvalue_reference(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n")),(0,r.kt)("h2",{id:"class-as-parameters"},"Class as parameters"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For class as parameter class should be construct from initializer list of class members and has default constructor")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Point_2d {\npublic:\n  int x;\n  int y;\n\n  Point_2d();\n  Point_2d(const int& x, const int& y);\n}\n\n\nvoid set_abs_by_ref(Point_2d& point) {\n   if (point.x < 0) {\n       point.x = -1 * point.x;\n   }\n   if (point.y < 0) {\n       point.y *= -1;\n   }\n}\n")),(0,r.kt)("h6",{id:"tests-code-1"},"Tests code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"TEST(regression, set_abs_by_ref_test_1)\n{\n    // Construct input\n    class Point_2d point = {-1, -1};\n\n    // Expected output\n    // No output variable for void function\n\n    // Trigger the function\n    set_abs_by_ref(point);\n\n    // Check results\n    // No check results for void function\n\n    // Check function parameters\n    class Point_2d expected_point = {1, 1};\n    EXPECT_EQ(expected_point.x, point.x);\n    EXPECT_EQ(expected_point.y, point.y);\n}\n\nTEST(regression, set_abs_by_ref_test_2)\n{\n    // Construct input\n    class Point_2d point = {0, -1};\n\n    // Expected output\n    // No output variable for void function\n\n    // Trigger the function\n    set_abs_by_ref(point);\n\n    // Check results\n    // No check results for void function\n\n    // Check function parameters\n    class Point_2d expected_point = {0, 1};\n    EXPECT_EQ(expected_point.x, point.x);\n    EXPECT_EQ(expected_point.y, point.y);\n}\n\nTEST(regression, set_abs_by_ref_test_3)\n{\n    // Construct input\n    class Point_2d point = {-1, 0};\n\n    // Expected output\n    // No output variable for void function\n\n    // Trigger the function\n    set_abs_by_ref(point);\n\n    // Check results\n    // No check results for void function\n\n    // Check function parameters\n    class Point_2d expected_point = {1, 0};\n    EXPECT_EQ(expected_point.x, point.x);\n    EXPECT_EQ(expected_point.y, point.y);\n}\n\nTEST(regression, set_abs_by_ref_test_4)\n{\n    // Construct input\n    class Point_2d point = {0, 0};\n\n    // Expected output\n    // No output variable for void function\n\n    // Trigger the function\n    set_abs_by_ref(point);\n\n    // Check results\n    // No check results for void function\n\n    // Check function parameters\n    class Point_2d expected_point = {0, 0};\n    EXPECT_EQ(expected_point.x, point.x);\n    EXPECT_EQ(expected_point.y, point.y);\n}\n")),(0,r.kt)("h2",{id:"class-as-return-values"},"Class as return values"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void set_abs_by_ref(Point_2d& point) {\n   if (point.x < 0) {\n       point.x = -1 * point.x;\n   }\n   if (point.y < 0) {\n       point.y *= -1;\n   }\n}\n\nPoint_2d abs_point(Point_2d point) {\n    set_abs_by_ref(point);\n    return point;\n}\n")),(0,r.kt)("h6",{id:"tests-code-2"},"Tests code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"TEST(regression, abs_point_test_1)\n{\n    // Construct input\n    class Point_2d point = {-1, 0};\n\n    // Expected output\n    class Point_2d expected = {1, 0};\n\n    // Trigger the function\n    class Point_2d actual = abs_point(point);\n\n    // Check results\n    EXPECT_EQ(expected.x, actual.x);\n    EXPECT_EQ(expected.y, actual.y);\n}\n\nTEST(regression, abs_point_test_2)\n{\n    // Construct input\n    class Point_2d point = {-1, -1};\n\n    // Expected output\n    class Point_2d expected = {1, 1};\n\n    // Trigger the function\n    class Point_2d actual = abs_point(point);\n\n    // Check results\n    EXPECT_EQ(expected.x, actual.x);\n    EXPECT_EQ(expected.y, actual.y);\n}\n\nTEST(regression, abs_point_test_3)\n{\n    // Construct input\n    class Point_2d point = {0, -1};\n\n    // Expected output\n    class Point_2d expected = {0, 1};\n\n    // Trigger the function\n    class Point_2d actual = abs_point(point);\n\n    // Check results\n    EXPECT_EQ(expected.x, actual.x);\n    EXPECT_EQ(expected.y, actual.y);\n}\n")),(0,r.kt)("h2",{id:"class-methods"},"Class methods"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For genetating method tests UTBot need default constructor of class  ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Point_2d {\npublic:\n  int x;\n  int y;\n\n  Point_2d();\n  Point_2d(const int& x, const int& y);\n}\n\nint Point_2d::get_x() const {\n    return x;\n}\n")),(0,r.kt)("h6",{id:"tests-code-3"},"Tests code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"TEST(regression, Point_2d_get_x_test_1)\n{\n    Point_2d Point_2d_obj;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = Point_2d_obj.get_x();\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n")),(0,r.kt)("h2",{id:"operators"},"Operators"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Point_2d {\npublic:\n  int x;\n  int y;\n\n  Point_2d();\n  Point_2d(const int& x, const int& y);\n  Point_2d operator-=(const Point_2d& rhs);\n  friend Point_2d operator-(Point_2d lhs, const Point_2d& rhs);\n}\n\nPoint_2d Point_2d::operator-=(const Point_2d& rhs) {\n   this->x -= rhs.x;\n   this->y -= rhs.y;\n   return *this;\n}\n\nPoint_2d operator-(Point_2d lhs, const Point_2d& rhs) {\n    lhs -= rhs;\n    return lhs;\n}\n")),(0,r.kt)("h6",{id:"tests-code-4"},"Tests code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"TEST(regression, Point_2d_operator_minus_equal_test_1)\n{\n    // Construct input\n    Point_2d Point_2d_obj;\n    class Point_2d rhs = {0, 0};\n\n    // Expected output\n    class Point_2d expected = {0, 0};\n\n    // Trigger the function\n    class Point_2d actual = Point_2d_obj.operator-=(rhs);\n\n    // Check results\n    EXPECT_EQ(expected.x, actual.x);\n    EXPECT_EQ(expected.y, actual.y);\n}\n\nTEST(regression, operator_minus_test_1)\n{\n    // Construct input\n    class Point_2d lhs = {0, 0};\n    class Point_2d rhs = {0, 0};\n\n    // Expected output\n    class Point_2d expected = {0, 0};\n\n    // Trigger the function\n    class Point_2d actual = operator-(lhs, rhs);\n\n    // Check results\n    EXPECT_EQ(expected.x, actual.x);\n    EXPECT_EQ(expected.y, actual.y);\n}\n")),(0,r.kt)("h2",{id:"private"},"Private"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For test private UTBot use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/martong/access_private.git"},"martong/access_private.git"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Private {\nprivate:\n    int x;\npublic:\n    Private();\n    Private(int x);\n    friend Private get_abs_value(Private p);\n};\n\nPrivate get_abs_value(Private p) {\n    if (p.x < 0) {\n        return -1 * p.x;\n    }\n    return p;\n}\n")),(0,r.kt)("h6",{id:"tests-code-5"},"Tests code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"TEST(regression, get_abs_value_test_1)\n{\n    // Construct input\n    class Private p = {-1};\n\n    // Expected output\n    class Private expected = {1};\n\n    // Trigger the function\n    class Private actual = get_abs_value(p);\n\n    // Check results\n    EXPECT_EQ(access_private::x(expected), access_private::x(actual));\n}\n\nTEST(regression, get_abs_value_test_2)\n{\n    // Construct input\n    class Private p = {0};\n\n    // Expected output\n    class Private expected = {0};\n\n    // Trigger the function\n    class Private actual = get_abs_value(p);\n\n    // Check results\n    EXPECT_EQ(access_private::x(expected), access_private::x(actual));\n}\n")))}l&&l===Object(l)&&Object.isExtensible(l)&&!Object.prototype.hasOwnProperty.call(l,"__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/advanced/cpp-syntax.md"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-advanced-cpp-syntax-md-697a4378ae2d586e266c.js.map