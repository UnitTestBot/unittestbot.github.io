{
  "examples": [
    { "id": "1", "name": "Switch Statements", "code": "import java.math.RoundingMode;\n\npublic class Switch {\n  public int lookupSwitch(int x) {\n    switch (x) {\n      case 0:\n        return 0;\n      case 10: // fall-through\n      case 20:\n        return 20;\n      case 30:\n        return 30;\n      default:\n        return -1;\n    }\n  }\n\n  public int enumSwitch(RoundingMode m) {\n    switch (m) {\n      case HALF_DOWN: // fall-through\n      case HALF_EVEN: // fall-through\n      case HALF_UP: // fall-through\n        return 1;\n      case DOWN:\n        return 2;\n      case CEILING:\n        return 3;\n    }\n    return -1;\n  }\n}\n" },
    { "id": "2", "name": "Loops", "code": "public class Loops {\n  public int whileLoop(int k) {\n    int i = 0;\n    int sum = 0;\n    while (i < k) {\n      sum += i;\n      i += 1;\n    }\n    return sum;\n  }\n\n  public int callInnerWhile(int value) {\n    return innerWhile(value, 42);\n  }\n\n  public int innerWhile(int a, int border) {\n    int res = a;\n    while (res >= border) {\n      res = res - border;\n    }\n    return res;\n  }\n\n  public int loopInsideLoop(int x) {\n    for (int i = x - 5; i < x; i++) {\n      if (i < 0) {\n        return 2;\n      } else {\n        for (int j = i; j < x + i; j++) {\n          if (j == 7) {\n            return 1;\n          }\n        }\n      }\n    }\n    return -1;\n  }\n\n}\n" },
    { "id": "3", "name": "Bit Operators", "code": "public class BitOperators {\n  public boolean complement(int x) {\n    return (~x) == 1;\n  }\n\n  public boolean xor(int x, int y) {\n    return (x ^ y) == 0;\n  }\n\n  public boolean and(int x) {\n    return (x & (x - 1)) == 0;\n  }\n\n  public int booleanNot(boolean a, boolean b) {\n    boolean d = a && b;\n    boolean e = !a || b;\n    return d && e ? 100 : 200;\n  }\n  public boolean shl(int x) {\n    return (x << 1) == 2;\n  }\n\n  public int shlWithBigLongShift(long shift) {\n    if (shift < 40) {\n      return 1;\n    }\n    return (0x77777777 << shift) == 0x77777770 ? 2 : 3;\n  }\n}\n" },
    { "id": "4", "name": "String Examples", "code": "public class StringExamples{\n\n  public boolean isNotBlank(CharSequence cs) {\n    return !isBlank(cs);\n  }\n\n  public String nullableStringBuffer(StringBuffer buffer, int i ) {\n    if (i >= 0) {\n      buffer.append(\"Positive\");\n    } else {\n      buffer.append(\"Negative\");\n    }\n    return buffer.toString();\n  }\n\n  public boolean isValidUuid(String uuid) {\n    return isNotBlank(uuid) && uuid\n        .matches(\"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\");\n  }\n\n  public boolean isValidUuidShortVersion(String uuid) {\n    return uuid != null && uuid.matches(\"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\");\n  }\n\n  public boolean isBlank(CharSequence cs) {\n    int strLen = length(cs);\n    if (strLen != 0) {\n      for (int i  = 0; i < strLen; ++i) {\n        if (!Character.isWhitespace(cs.charAt(i))) {\n          return false;\n        }\n      }\n\n    }\n    return true;\n  }\n\n  public int length(CharSequence cs) {\n    return cs == null ? 0 : cs.length();\n  }\n}\n" },
    { "id": "5", "name": "Recursion", "code": "public class Recursion {\n  public int factorial(int n) {\n    if (n < 0) {\n      throw new IllegalArgumentException();\n    }\n    if (n == 0) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  }\n\n  public int fib(int n) {\n    if (n < 0) throw new IllegalArgumentException();\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n    return fib(n - 1) + fib(n - 2);\n  }\n}\n" },
    { "id": "6", "name": "Custom Data Type : Pair", "code": "public class Pair {\n  private long first, second;\n\n  public Pair() {\n  }\n\n  public Pair(long first, long second) {\n    this.first = first;\n    this.second = second;\n  }\n\n  public long getFirst() {\n    return first;\n  }\n\n  public void setFirst(long first) {\n    this.first = first;\n  }\n\n  public long getSecond() {\n    return second;\n  }\n\n  public void setSecond(long second) {\n    this.second = second;\n  }\n}\n" },
    { "id": "7", "name": "Arrays", "code": "public class ArraysSamples {\n  public int equality(int[] a, int[] b) {\n    if (a == null || null == b) {\n      return 1;\n    }\n    if (a.length == b.length) {\n      return 2;\n    }\n    return 3;\n  }\n\n  public int setValue(int[] a, int x) {\n    if (x > 0 && a.length > 0) {\n      a[0] = x;\n      if (a[0] > 2) {\n        return 2;\n      } else {\n        return 1;\n      }\n    }\n    return 0;\n  }\n}\n" }
  ]
}