{
  "examples": [
    { "id": "1", "name": "Absolute", "code": "package absolute\n\n// Abs returns absolute value\nfunc Abs(n int) int {\n\tif n < 0 {\n\t\treturn -n\n\t}\n\treturn n\n}" },
    { "id": "2", "name": "Divide or panic", "code": "package divide\n\n// DivOrPanic divides x by y or panics if y is 0\nfunc DivOrPanic(x int, y int) int {\n\tif y == 0 {\n\t\tpanic(\"div by 0\")\n\t}\n\treturn x / y\n}" },
    { "id": "3", "name": "Bitwise", "code": "package bitwise\n\n// Bitwise computes using bitwise operator the maximum of all the integer input and returns it\nfunc Bitwise(a int, b int, base int) int {\n\tz := a - b\n\ti := (z >> base) & 1\n\treturn a - (i * z)\n}" },
    { "id": "4", "name": "Extended GCD", "code": "package gcd\n\n// Extended GCD\nfunc Extended(a, b int64) (int64, int64, int64) {\n\tif a == 0 {\n\t\treturn b, 0, 1\n\t}\n  \n\tgcd, xPrime, yPrime := Extended(b%a, a)\n\n\treturn gcd, yPrime - (b/a)*xPrime, xPrime\n}" },
    { "id": "5", "name": "Fibonacci formula", "code": "package formula\n\nimport (\n  \"math\"\n)\n\n// Formula This function calculates the n-th fibonacci number using the [formula](https://en.wikipedia.org/wiki/Fibonacci_number#Relation_to_the_golden_ratio)\n// Attention! Tests for large values fall due to rounding error of floating point numbers, works well, only on small numbers\nfunc Formula(n uint) uint {\n\tsqrt5 := math.Sqrt(5)\n\tphi := (sqrt5 + 1) / 2\n\tpowPhi := math.Pow(phi, float64(n))\n\treturn uint(powPhi/sqrt5 + 0.5)\n}" },
    { "id": "6", "name": "Parenthesis algorithm", "code": "package parenthesis\n\n// Parenthesis algorithm checks if every opened parenthesis is closed correctly\n\nfunc Parenthesis(text string) bool {\n\tparcounter := 0\n\n\tfor _, r := range text {\n\t\tswitch r {\n\t\tcase '(':\n\t\t\tparcounter++\n\t\tcase ')':\n\t\t\tparcounter--\n\t\t}\n\t\tif parcounter < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn parcounter == 0\n}" },
    { "id": "7", "name": "Clean string", "code": "package strings_utils\n\nimport (\n  \"regexp\"\n  \"strings\"\n)\n\nfunc cleanString(text string) string {\n\tclean_text := strings.ToLower(text)\n\tclean_text = strings.Join(strings.Fields(clean_text), \"\") \n  // Remove spaces\n\tregex, _ := regexp.Compile(`[^\\p{L}\\p{N} ]+`)             \n  // Regular expression for alphanumeric only characters\n\treturn regex.ReplaceAllString(clean_text, \"\")\n}" }
  ]
}