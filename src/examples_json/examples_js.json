{
  "examples": [
    { "id": "1", "name": "Simple arithmetic", "code": "function foo(a, b) {\n  if (a > 10) {\n    return a * b\n  } else {\n    return -1\n  }\n}" },
    { "id": "2", "name": "Loops: While", "code": "function whileLoop(value) {\n  let i = 0\n  let sum = 0\n  \n  while (i < value) {\n    sum += i\n    i += 1\n  }\n\n  return sum\n}" },
    { "id": "3", "name": "Loops: Loop inside Loop", "code": "function loopInsideLoop(x) {\n  for (let i = x - 5; i < x; i++) {\n    if (i < 0) {\n      return 2\n    } \n    else {\n      for (let j = i; j < x + i; j++) {\n        if (j === 7) {\n          return 1\n        }\n      }\n    }\n  }\n  return -1\n}" },
    { "id": "4", "name": "Bit Operators: xor, and, not", "code": "function xor(x, y) {\n    return (x ^ y) === 0\n}\n\nfunction and(x) {\n    return (x & (x - 1)) === 0\n}\n\nfunction Not(a, b) {\n    let d = a && b\n    let e = !a || b\n    return d && e ? 100 : 200\n}" },
    { "id": "5", "name": "Bit Operators: compliment, bitwise shift", "code": "function complement(x) {\n    return (~x) === 1\n}\n\nfunction shl(x) {\n    return (x << 1) === 2\n}\n\nfunction shlWithBigLongShift(shift) {\n    if (shift < 40) {\n        return 1\n    }\n    return (0x77777777 << shift) === 0x77777770 ? 2 : 3\n}" },
    { "id": "6", "name": "String Examples", "code": "function isNotBlank(cs) {\n    return cs.length !== 0\n}\n\nfunction nullableStringBuffer(buffer, i) {\n    if (i >= 0) {\n        buffer += \"Positive\"\n    } else {\n        buffer += \"Negative\"\n    }\n    return buffer.toString()\n}\n\nfunction length(cs) {\n    return cs == null ? 0 : cs.length\n}" },
    { "id": "7", "name": "Recursion: Factorial", "code": "function factorial(n) {\n  if (n < 0)\n    return -1\n\n  if (n === 0)\n    return 1\n      \n  return n * this.factorial(n - 1)\n}" },
    { "id": "8", "name": "Recursion: Fibonacci", "code": "function fibonacci(n) {\n  if (n < 0 || n > 25)\n    return -1\n\n  if (n === 0)\n    return 0\n\n  if (n === 1)\n    return 1\n\n  return this.fib(n - 1) + this.fib(n - 2)\n}" }
  ]
}