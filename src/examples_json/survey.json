{
  "parts": [
    {
      "part": {
        "function": "Function1:\n/**\n * Returns {@code true} if {@code n} is a <a\n * href=\"http://mathworld.wolfram.com/PrimeNumber.html \">prime number</a>: an integer <i>greater\n * than one</i> that cannot be factored into a product of <i>smaller</i> positive integers.\n * Returns {@code false} if {@code n} is zero, one, or a composite number (one which <i>can</i> be\n * factored into smaller positive integers).\n *\n * <p>To test larger numbers, use {@link BigInteger#isProbablePrime}.\n *\n * @throws IllegalArgumentException if {@code n} is negative\n * @since 20.0\n */\n@GwtIncompatible // TODO\n@Beta\npublic static boolean isPrime(long n) {\n  if (n < 2) {\n    checkNonNegative(\" n\", n);\n    return false;\n  }\n  if (n == 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13) {\n    return true;\n  }\n\n  if ((SIEVE_30 & (1 << (n % 30))) != 0) {\n    return false;\n  }\n  if (n % 7 == 0 || n % 11 == 0 || n % 13 == 0) {\n    return false;\n  }\n  if (n < 17 * 17) {\n    return true;\n  }\n\n  for (long[] baseSet : millerRabinBaseSets) {\n    if (n <= baseSet[0]) {\n      for (int i = 1; i < baseSet.length; i++) {\n        if (!MillerRabinTester.test(baseSet[i], n)) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  throw new AssertionError();\n}",
        "questions": [
          "/**\n * <pre>\n * Test executes conditions:\n *\t   {@code (n < 2): False} \n *     {@code (n == 2): True }\n * returns from:\n *     1st return statement: {@code return true; }\n * </pre>\n */\n@Test\n//@org.junit.jupiter.api.DisplayName(\"isPrime: n == 2 : False -> return true\")\npublic void testIsPrime_NEquals2() throws Throwable {\n    boolean actual = LongMath.isPrime(2L);\n\n    assertTrue(actual);\n}",
          "**\n * <pre>\n * Test executes conditions:\n *     {@code (n < 2): False}\n *     {@code (n == 2): False },\n *     {@code (n == 3): True }\n * returns from:\n *     1st return statement: {@code return true; }\n * </pre>\n */\n@Test\n//@org.junit.jupiter.api.DisplayName(\"isPrime: n == 3 : False -> return true\")\npublic void testIsPrime_NEquals3() throws Throwable {\n    boolean actual = LongMath.isPrime(3L);\n\n    assertTrue(actual);\n} ",
          "/**\n * <pre>\n * Test executes conditions:\n *     {@code (n == 2): False },\n *     {@code (n == 3): False },\n *     {@code (n == 5): False },\n *     {@code (n == 7): False },\n *     {@code (n == 11): True }\n * returns from:\n *     1st return statement: {@code return true; }\n * </pre>\n */\n@Test\n//@org.junit.jupiter.api.DisplayName(\"isPrime: n == 11 : False -> return true\")\npublic void testIsPrime_NEquals11() throws Throwable {\n    boolean actual = LongMath.isPrime(11L);\n\n    assertTrue(actual);\n}",
          "/**\n * <pre>\n * Test executes conditions:\n *     {@code (n < 2): True }\n * invokes:\n *     MathPreconditions::checkNonNegative once\n * returns from:\n *     1st return statement: {@code return false; }\n * </pre>\n */\n@Test\n//@org.junit.jupiter.api.DisplayName(\"isPrime: n < 2 : True -> return false\")\npublic void testIsPrime_NLessThan2() throws Throwable {\n    boolean actual = LongMath.isPrime(0L);\n\n    assertFalse(actual);\n} ",
          "/**\n * <pre>\n * Test executes conditions:\n *     {@code (n < 2): False },\n *     {@code (n == 2): False },\n *     {@code (n == 3): False },\n *     {@code (n == 5): False },\n *     {@code (n == 7): False },\n *     {@code (n == 11): False },\n *     {@code (n == 13): False },\n *     {@code ((SIEVE_30 & (1 << (n % 30))) != 0): False },\n *     {@code (n % 7 == 0): False },\n *     {@code (n % 11 == 0): False },\n *     {@code (n % 13 == 0): False },\n *     {@code (n < 17 * 17): True }\n * returns from:\n *     2nd return statement: {@code return true; }\n * </pre>\n */\n@Test\n//@org.junit.jupiter.api.DisplayName(\"isPrime: (SIEVE_30 & (1 << (n % 30))) != 0 : False -> return true\")\npublic void testIsPrime_NLessThan17Multiply17() throws Throwable {\n    boolean actual = LongMath.isPrime(241L);\n\n    assertTrue(actual);\n} "
        ]
      }
    },
    {
      "part": {
        "function": "public static boolean verifyAssignment(JSONObject assignObject) {\n\tif (assignObject == null) {\n\t\tlog.error(\"verifyAssignment: null\");\n\t\treturn false;\n\t}\n\n\ttry {\n\n\t\tJSONArray assignments = assignObject.getJSONArray(\"assignments\");\n\t\tif (!checkAssignContent(assignments)) {\n\t\t\treturn false;\n\t\t}\n\n\t} catch (Exception e) {\n\t\tlog.error(\"verifyAssignment: Exception {}\", e.getMessage());\n\n\t\treturn false;\n\t}\n\n\treturn true;\n\n} ",
        "questions": [
          "/**\n * <pre>\n * Test executes conditions:\n *     {@code (assignObject == null): False }\n * invokes:\n *     JSONObject::getJSONArray once,\n *     VerifyValid::checkAssignContent once\n * executes conditions:\n *     {@code (!checkAssignContent(assignments)): False }\n * returns from: {@code return true; }\n * </pre>\n */\n@Test\n//@org.junit.jupiter.api.DisplayName(\\verifyAssignment: assignObject == null : False -> return true\\)\npublic void testVerifyAssignment_CheckAssignContent() throws Throwable {\n\tJSONObject assignObjectMock = mock(JSONObject.class);\n\tJSONArray jSONArrayMock = mock(JSONArray.class);\n\twhen(jSONArrayMock.size()).thenReturn(-2147483637, 0, 0);\n\twhen(assignObjectMock.getJSONArray(anyString())).thenReturn(jSONArrayMock);\n\n\tboolean actual = VerifyValid.verifyAssignment(assignObjectMock);\n\n\tassertTrue(actual);\n}\n "
        ]
      }
    },
    {
      "part": {
        "function": "public void checkResourceStatusParam(String status) {\n\tif (status != null && !SERVICE_RESOURCE_STATUS_CONTENT.contains(status)) {\n\t\tlog.error(\\check register resource: status[{}] error!\\, status);\n\t\tthrow new IamServerException(new IamErrorMessage(PolicyServiceResourceErrorCode.INVALID_STATUS_VALUE, status));\n\t}\n} ",
        "questions": [
          "/**\n * <pre>\n * Test executes conditions:\n *     {@code (status != null): False }\n * </pre>\n */\n@Test\n//@org.junit.jupiter.api.DisplayName(\\checkResourceStatusParam: -> status != null : False\\)\npublic void testCheckResourceStatusParam_StatusEqualsNull() throws Throwable {\n\tVerifyPolicyServiceResourceService verifyPolicyServiceResourceService = ((VerifyPolicyServiceResourceService) createInstance(\\com.huawei.iam.pap.service.verify.VerifyPolicyServiceResourceService\\));\n\n\tverifyPolicyServiceResourceService.checkResourceStatusParam(null);\n} "
        ]
      }
    },
    {
      "part": {
        "function": "public PolicyServiceResource verifyResource(String serviceId, String resourceId) {\n\tOptional<PolicyServiceResource> optional = policyServiceResourceRepository.findById(resourceId);\n\tif (!optional.isPresent() || !optional.get().getServiceId().equals(serviceId)) {\n\t\tlog.error(\\resource not exist!\\);\n\t\tIamErrorMessage errorMessage = new IamErrorMessage(IamErrorCode.IAM_SERVICE_RESOURCE_NOT_EXIST);\n\t\tthrow new IamServerException(errorMessage);\n\t}\n\treturn optional.get();\n}\n ",
        "questions": [
          "/**\n * <pre>\n * Test executes conditions:\n *     {@code (!optional.isPresent()): True }\n *\n * throws ClassCastException in: !optional.isPresent() || !optional.get().getServiceId().equals(serviceId)\n * </pre>\n */\n@Test(expected = ClassCastException.class)\n//@org.junit.jupiter.api.DisplayName(\\verifyResource: !optional.isPresent() || !optional.get().getServiceId().equals(serviceId) -> ThrowClassCastException\\)\npublic void testVerifyResource_ThrowClassCastException() throws Throwable {\n\tVerifyAvailabilityService verifyAvailabilityService = ((VerifyAvailabilityService) createInstance(\\com.huawei.iam.pap.service.verify.VerifyAvailabilityService\\));\n\tPolicyServiceResourceRepository policyServiceResourceRepositoryMock = mock(PolicyServiceResourceRepository.class);\n\tOptional optional = ((Optional) createInstance(\\java.util.Optional\\));\n\tbyte[] byteArray = new byte[0];\n\tsetField(optional, \\value\\, byteArray);\n\twhen(policyServiceResourceRepositoryMock.findById(anyString())).thenReturn(optional);\n\tsetField(verifyAvailabilityService, \\policyServiceResourceRepository\\, policyServiceResourceRepositoryMock);\n\n\tverifyAvailabilityService.verifyResource(null, null);\n}\n ",
          "/**\n * <pre>\n * Test executes conditions:\n *     {@code (!optional.isPresent()): True }\n * invokes:\n *     PolicyServiceResource::getServiceId once\n *\n * throws NullPointerException in: !optional.isPresent() || !optional.get().getServiceId().equals(serviceId)\n * </pre>\n */\n@Test(expected = NullPointerException.class)\n//@org.junit.jupiter.api.DisplayName(\\verifyResource: !optional.isPresent() || !optional.get().getServiceId().equals(serviceId) -> ThrowNullPointerException\\)\npublic void testVerifyResource_PolicyServiceResourceGetServiceId() throws Throwable {\n\tVerifyAvailabilityService verifyAvailabilityService = ((VerifyAvailabilityService) createInstance(\\com.huawei.iam.pap.service.verify.VerifyAvailabilityService\\));\n\tPolicyServiceResourceRepository policyServiceResourceRepositoryMock = mock(PolicyServiceResourceRepository.class);\n\tOptional optional = ((Optional) createInstance(\\java.util.Optional\\));\n\tPolicyServiceResource policyServiceResource = ((PolicyServiceResource) createInstance(\\com.huawei.iam.pap.mybatis.model.PolicyServiceResource\\));\n\tsetField(policyServiceResource, \\serviceId\\, null);\n\tsetField(optional, \\value\\, policyServiceResource);\n\twhen(policyServiceResourceRepositoryMock.findById(anyString())).thenReturn(optional);\n\tsetField(verifyAvailabilityService, \\policyServiceResourceRepository\\, policyServiceResourceRepositoryMock);\n\n\tverifyAvailabilityService.verifyResource(null, null);\n} "
        ]
      }
    },
    {
      "part": {
        "function": "public boolean iamPdpCheck(Token ctx) {\n\tboolean pdpAuthCheck = false;\n\n\tList<Role> roles = ctx.getRoles();\n\n\tfor (Role role : roles) {\n\t\tif (role.getName().equals(IamServerConstant.IAM_OP_FINE_GRAINED)) {\n\t\t\tpdpAuthCheck = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn pdpAuthCheck;\n} ",
        "questions": [
          "/**\n * <pre>\n * Test does not iterate {@code for(Role role: roles) }, returns from: {@code return pdpAuthCheck; }\n * </pre>\n */\n@Test\n//@org.junit.jupiter.api.DisplayName(\\iamPdpCheck: -> return pdpAuthCheck\\)\npublic void testIamPdpCheck_ReturnPdpAuthCheck() throws Throwable {\n\tPdpService pdpService = ((PdpService) createInstance(\\com.huawei.iam.pap.service.pdp.PdpService\\));\n\tToken ctxMock = mock(Token.class);\n\tArrayList arrayList = new ArrayList();\n\twhen(ctxMock.getRoles()).thenReturn(arrayList);\n\n\tboolean actual = pdpService.iamPdpCheck(ctxMock);\n\n\tassertFalse(actual);\n} ",
          "/**\n * <pre>\n * Test iterates the loop {@code for(Role role: roles) } once,\n *     inside this loop, the test executes conditions:\n *     {@code (role.getName().equals(IamServerConstant.IAM_OP_FINE_GRAINED)): True }\n * Test then returns from: {@code return pdpAuthCheck; }\n * </pre>\n */\n@Test\n//@org.junit.jupiter.api.DisplayName(\\iamPdpCheck: role.getName().equals(IamServerConstant.IAM_OP_FINE_GRAINED) : True -> return pdpAuthCheck\\)\npublic void testIamPdpCheck_RolegetNameEquals() throws Throwable {\n\tPdpService pdpService = ((PdpService) createInstance(\\com.huawei.iam.pap.service.pdp.PdpService\\));\n\tToken ctxMock = mock(Token.class);\n\tArrayList arrayList = new ArrayList();\n\tRole role = ((Role) createInstance(\\com.huawei.iam.tokenlib.entity.Role\\));\n\tsetField(role, \\name\\, \\op_fine_grained\\);\n\tarrayList.add(role);\n\tarrayList.add(null);\n\tarrayList.add(null);\n\twhen(ctxMock.getRoles()).thenReturn(arrayList);\n\n\tboolean actual = pdpService.iamPdpCheck(ctxMock);\n\n\tassertTrue(actual);\n} "
        ]
      }
    },
    {
      "part": {
        "function": "public int lookupSwitch(int x) {\n\tswitch (x) {\n\t\tcase 0:\n\t\t\treturn 0;\n\t\tcase 10: // fall-through\n\t\tcase 20:\n\t\t\treturn 20;\n\t\tcase 30:\n\t\t\treturn 30;\n\t\tdefault:\n\t\t\treturn -1;\n\t}\n}\n ",
        "questions": [
          "/**\n * <pre>\n * Test activates switch case: {@code 0 }, returns from: {@code return 0; }\n * </pre>\n */\n@Test\n//@org.junit.jupiter.api.DisplayName(\\lookupSwitch: switch(x) case: 0 -> return 0\\)\npublic void testLookupSwitch_ReturnZero() throws Throwable {\n\tSwitch switch1 = new Switch();\n\n\tint actual = switch1.lookupSwitch(0);\n\n\tassertEquals(0, actual);\n}\n "
        ]
      }
    },
    {
      "part": {
        "function": "public int loopInsideLoop(int x) {\n\tfor (int i = x - 5; i < x; i++) {\n\t\tif (i < 0) {\n\t\t\treturn 2;\n\t\t} else {\n\t\t\tfor (int j = i; j < x + i; j++) {\n\t\t\t\tif (j == 7) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n} ",
        "questions": [
          "/**\n * <pre>\n * Test iterates the loop {@code for(int i = x - 5; i < x; i++) } once,\n *     inside this loop, the test executes conditions:\n *     {@code (i < 0): True }\n * returns from: {@code return 2; }</pre>\n */\n@Test\n//@org.junit.jupiter.api.DisplayName(\\loopInsideLoop: i < 0 : True -> return 2\\)\npublic void testLoopInsideLoop_ILessThanZero() throws Throwable {\n\tCycles cycles = new Cycles();\n\n\tint actual = cycles.loopInsideLoop(0);\n\n\tassertEquals(2, actual);\n} ",
          "/**\n * <pre>\n * Test iterates the loop {@code for(int i = x - 5; i < x; i++) } once,\n *     inside this loop, the test executes conditions:\n *     {@code (i < 0): False }\n * iterates the loop {@code for(int j = i; j < x + i; j++) } once,\n *         inside this loop, the test executes conditions:\n *     {@code (j == 7): True }\n * returns from: {@code return 1; }</pre>\n */\n@Test\n//@org.junit.jupiter.api.DisplayName(\\loopInsideLoop: i < 0 : False -> return 1\\)\npublic void testLoopInsideLoop_JEquals7() throws Throwable {\n\tCycles cycles = new Cycles();\n\n\tint actual = cycles.loopInsideLoop(12);\n\n\tassertEquals(1, actual);\n} "
        ]
      }
    },
    {
      "part": {
        "function": "public int fib(int n) {\n\tif (n < 0) throw new IllegalArgumentException();\n\tif (n == 0) return 0;\n\tif (n == 1) return 1;\n\treturn fib(n - 1) + fib(n - 2);\n}\n ",
        "questions": [
          "/**\n * <pre>\n * Test executes conditions:\n *     {@code (n == 0): True }\n * returns from: {@code return 0; }\n * </pre>\n */\n@Test\n//@org.junit.jupiter.api.DisplayName(\\fib: n == 0 : True -> return 0\\)\npublic void testFib_ReturnZero() throws Throwable {\n\tRecursion recursion = new Recursion();\n\n\tint actual = recursion.fib(0);\n\n\tassertEquals(0, actual);\n}\n ",
          "/**\n * <pre>\n * Test executes conditions:\n *     {@code (n == 1): False }\n * triggers the recursion of fib, where the test executes conditions:\n *     {@code (n == 1): True }\n * returns from: {@code return 1; }\n *\n * Test afterwards triggers the recursion of fib, where the test executes conditions:\n *     {@code (n == 0): True }\n * returns from: {@code return 0; }\n *\n * Test next returns from: {@code return fib(n - 1) + fib(n - 2); }\n * </pre>\n */\n@Test\n//@org.junit.jupiter.api.DisplayName(\\fib: return 1 -> return 0\\)\npublic void testFib_NNotEquals1() throws Throwable {\n\tRecursion recursion = new Recursion();\n\n\tint actual = recursion.fib(2);\n\n\tassertEquals(1, actual);\n} "
        ]
      }
    }
  ]
}