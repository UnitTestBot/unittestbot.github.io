{
  "examples": [
    { "id": "1", "name": "Arithmetic", "code": "import math\n\n\ndef calculate_function_value(x, y):\n    \"\"\"\n    Calculate value `f`\n              | sqrt(x - 2y)                 , x > 100\n    f(x, y) = | (3x^2 - 2xy + y^2) / sin(x)  , -100 < x <= 100\n              | (0.01 * x) ^ log2(y)         , x < -100\n    \"\"\"\n\n    if x > 100:\n        return math.sqrt(x - 2 * y)\n    elif -100 < x <= 100:\n        return (3*x**2 - 2*x*y + y**2) / math.sin(x)\n    else:\n        return (0.01 * x) ** math.log2(y)" },
    { "id": "2", "name": "Deque", "code": "from collections import deque\n\n\ndef generate_people_deque(people_count: int):\n    names = ['Alex', 'Bob', 'Cate', 'Daisy', 'Ed']\n    if people_count > 5:\n        people_count = 5\n    return deque(sorted(names[:people_count]))" },
    { "id": "3", "name": "List of datetime", "code": "import datetime\n\n\ndef get_data_labels(dates):\n    if len(dates) == 0:\n        return None\n    if all(x.hour == 0 and x.minute == 0 for x in dates):\n        return [x.strftime('%Y-%m-%d') for x in dates]\n    else:\n        return [x.strftime('%H:%M') for x in dates]" },
    { "id": "4", "name": "Longest subsequence", "code": "from typing import List\n\n\ndef longest_subsequence(array: List[int]) -> List[int]:\n    array_length = len(array)\n    if array_length <= 1:\n        return array\n    pivot = array[0]\n    is_found = False\n    i = 1\n    longest_subseq: List[int] = []\n    while not is_found and i < array_length:\n        if array[i] < pivot:\n            is_found = True\n            temp_array = [element for element in array[i:] if element >= array[i]]\n            temp_array = longest_subsequence(temp_array)\n            if len(temp_array) > len(longest_subseq):\n                longest_subseq = temp_array\n        else:\n            i += 1\n\n    temp_array = [element for element in array[1:] if element >= pivot]\n    temp_array = [pivot] + longest_subsequence(temp_array)\n    if len(temp_array) > len(longest_subseq):\n        return temp_array\n    else:\n        return longest_subseq" },
    { "id": "5", "name": "Primitive types", "code": "def pretty_print(x):\n    if isinstance(x, int):\n        return 'It is integer.\\n' + 'Value ' + str(x)\n    elif isinstance(x, str):\n        return 'It is string.\\n' + 'Value <<' + x + '>>'\n    elif isinstance(x, complex):\n        return 'It is complex.\\n' + 'Value (' + str(x.real) + ' + ' + str(x.real) + 'i)'\n    elif isinstance(x, list):\n        return 'It is list.\\n' + f'Value {x}'\n    else:\n        return 'I do not have any variants'" },
    { "id": "6", "name": "Quick sort", "code": "import random\nfrom typing import List\n\n\ndef quick_sort(array: List[int]):\n    def partition(A, left_index, right_index):\n        pivot = A[left_index]\n        i = left_index + 1\n        for j in range(left_index + 1, right_index):\n            if A[j] < pivot:\n                A[j], A[i] = A[i], A[j]\n                i += 1\n        A[left_index], A[i - 1] = A[i - 1], A[left_index]\n        return i - 1\n\n    def quick_sort_random(A, left, right):\n        if left < right:\n            pivot = random.randint(left, right - 1)\n            A[pivot], A[left] = (\n                A[left],\n                A[pivot],\n            )  # switches the pivot with the left most bound\n            pivot_index = partition(A, left, right)\n            quick_sort_random(\n                A, left, pivot_index\n            )  # recursive quicksort to the left of the pivot point\n            quick_sort_random(\n                A, pivot_index + 1, right\n            )  # recursive quicksort to the right of the pivot point\n    quick_sort_random(array, 0, len(array))\n    return array" },
    { "id": "7", "name": "Type inference", "code": "def type_inference(number, string, string_sep, list_of_number, dict_str_to_list):\n    new_string = '_' + string + '_' * number\n    new_string = new_string.capitalize() + string_sep + new_string[::-1]\n\n    if len(list_of_number) < len(new_string):\n        list_of_number += [0] * (len(new_string) - len(list_of_number))\n\n    dict_str_to_list[string] = []\n    for key in dict_str_to_list.keys():\n        list_of_number.append(key)\n\n    return list_of_number\n\n\nif __name__ == '__main__':\n    print(type_inference(5, 'fjsl', '|', [1, 2, 3], {'fjls': [1, 2]}))" },
    { "id": "8", "name": "Using collections", "code": "import collections\n\n\ndef generate_collections(collection):\n    collection[0] = 100\n    elements = list(collection.items())\n    return [\n        collection,\n        collections.Counter(collection),\n        elements\n    ]\n\n\nif __name__ == '__main__':\n    print(generate_collections({1: 2}))" }
  ]
}