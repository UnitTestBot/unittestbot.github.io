{
  "javaHome": {
    "imagineTitle": "Imagine you don't have to write tests.",
    "tryOnlineText": "Try UnitTestBot online demo",
    "watchHowWorksText": "Watch how it works",
    "testsGenText": "But you still have a perfect bug detector for your code.<br>And no false positives among bugs.<br>Tests are generated auto<i>magically</i> — with the highest code coverage,<br>fine-tuned mocking, and human-readable test descriptions.<br>Sounds fantastic? No more.",
    "testsGenAdvantagesTitlePart1": "Yet another test template tool?",
    "testsGenAdvantagesTitlePart2": "Quite the opposite.",
    "testsGenAdvantagesText": "While a test template tool gives you just an outline,<br>UnitTestBot generates ready-to-use test cases —<br>with valid inputs, method bodies, assertions, and comments.",
    "checkGuideText": "Check the quick guide",
    "utbotAdvantagesTitle": "Test the code all over.",
    "utbotAdvantagesText": "UnitTestBot has <span style=\"color:#F7931E;\">a dynamic symbolic execution</span> engine in its core, complemented with a smart <span style=\"color:#F7931E;\">fuzzing</span> technique. Together they can explore program execution paths, covering as many of them as possible while keeping <span style=\"color:#F7931E;\">test suite minimized.</span>",
    "learnMoreText": "Learn more about UnitTestBot coverage",
    "findBugsNooneCanTitle": "Find bugs no one can catch.",
    "eliminateFalsePositivesTitle": "Eliminate false positives.",
    "findBugsNooneCanText": "UnitTestBot can uncover bugs hidden deeply in an interprocedural control flow graph. All the found bugs are indeed real — zero false positive rate is guaranteed.",
    "howToUseResultText": "Learn how to get use of UnitTestBot results",
    "mocksTitlePart1": "Mock properly.",
    "mocksTitlePart2": "Static methods as well.",
    "mocksText": "Want to mock I/O operations, random number generator or other modules? UnitTestBot provides you with both default and fine adjustment options for your mocks.",
    "mockingSettingsText": "Get to know mocking settings in UnitTestBot",
    "humanReadableTitle": "UnitTestBot stands for \"human-readable\".",
    "humanReadableText": "UnitTestBot represents all the test descriptions in a human-readable format. The intelligible test method names and comments help you to control the whole testing process. Test failed? The description refers you to points of interest in execution paths.",
    "getBetterTestDescriptionText": "See how to get the most out of test descriptions",
    "capableForYourNeedText": "Capable for every tech you need.",
    "capableForEveryText": "UnitTestBot Java/ Kotlin supports the latest JDKs, JUnit 4, JUnit 5, TestNG, Mockito and works with all popular operational systems.<br>You can also try <a href=\"https://www.utbot.org/cpp\">UnitTestBot C/C++</a>. <a href=\"https://www.utbot.org/python\">UnitTestBot for Python</a>, <a href=\"https://www.utbot.org/go\">Go</a>, and <a href=\"https://www.utbot.org/js\">JavaScript</a> are under development. Stay tuned!",
    "supportedTechnologiesText": "Check supported technologies"
  },
  "cppHome": {
    "utbotCppTitle": "UnitTestBot C/C++.",
    "changesExperienceTitle": "Changes your experience of unit testing.",
    "utbotCppDescriptionText": "Powered by the <a href=\"https://github.com/UnitTestBot/klee\">enhanced KLEE symbolic execution engine</a>, UnitTestBot C/C++ is here to overcome the expectations for unit testing: automatically generated <i>ready-to-use</i> tests with inputs and method bodies, error and regression suites with maximum coverage, testing code containing almost any C feature, auto-generated stubs — all wrapped in a user-friendly interface.",
    "perfectTestingTitle": "Make testing fast, reliable and effortless",
    "whyUtbotIsCapableText": "Get the most out of UnitTestBot C/C++ with the detailed <a href=\"https://www.utbot.org/docs/cpp/\">user guide</a>.<br><a href=\"https://www.utbot.org/research\">Read</a> why UnitTestBot C/C++ is capable of supporting the most advanced testing features.",
    "checkForBugsTitle": "Check for bugs, commit successful tests",
    "fixateCurrentBehaviorText": "UnitTestBot C/C++ provides you both with the error and the regression suite.<br>Find invalid code fragments, fixate current behavior, detect the regressions or update tests if needed.",
    "specifyTestingAreaTitle": "Create tests for a specific line, a file, a function or a project",
    "testsForAssertionsText": "It's even possible to generate a test for the assertion — the test that fails the selected assertion.<br>Ask for a test with a prompted result: generate a test that forces the selected function to return a specific value (if possible).",
    "easilyConfigureTitle": "Easily configure",
    "easilyConfigureText": "UnitTestBot C/C++ makes generating tests straightforward and intuitive. It can automatically configure your project and get all the necessary information — you just need a CMakeLists.txt file or a build script.",
    "findUtbotForCppTitle": "Find your UnitTestBot C/C++",
    "findUtbotForCppText": "UnitTestBot C/C++ is based on client-server architecture. Run server on Ubuntu and connect to it using <a href=\"https://www.utbot.org/docs/cpp/vscode-plugin\">VS Code extension</a> or <a href=\"https://www.utbot.org/docs/cpp/clion-plugin\">CLion plugin</a> for Windows/Linux, or try <a href=\"https://www.utbot.org/docs/cpp/cli\">command-line interface</a> (available for Ubuntu only).",
    "stubsTitle": "Get use of auto-generated stubs",
    "stubsText": "UnitTestBot C/C++ detects whether the function is called from the other module and can automatically <a href=\"https://www.utbot.org/docs/cpp/stubs\">stub</a> it. These stubs are customizable, and you can turn them off if needed.",
    "supportedSyntaxTitle": "Test the code with the language feature you need",
    "supportedSyntaxText": "Check <a href=\"https://github.com/UnitTestBot/UTBotCpp/wiki/c-syntax\">supported C</a> and <a href=\"https://github.com/UnitTestBot/UTBotCpp/wiki/cpp-syntax\">C++ syntax</a> with generated test examples.",
    "useBuildSystemTitle": "Use CMake or Make",
    "useBuildSystemText": "Choose the build system suitable for your project.",
    "googleTestFormatTitle": "Get tests in Google Test format",
    "googleTestFormatText": "One of the most popular test formats fits to both C and C++ code."
  },
  "pythonHome": {
    "utbotPythonTitle": "UnitTestBot Python.",
    "almostReady": "Almost ready.",
    "utbotPythonText": "UnitTestBot for Python code is in development.<br>Wait a while for the next release.",
    "libraryYouMissedTitle": "It's like a Python library you always missed.",
    "libraryYouMissedText": "Unit testing has never been easier.<br>With UnitTestBot Python you automate the whole testing process.<br>The comprehensive tests are synthesized without your assistance — from finding units to writing out method bodies to choosing proper inputs and asserting.",
    "fuzzingTitle": "Smarter fuzzing for richer testing.",
    "fuzzingText": "UnitTestBot Python is based on a smart fuzzing technique, that goes beyond generating random values. It involves heuristics to find more valid inputs faster. And you get more than just a bunch of inputs or templates. UnitTestBot Python provides you with ready-to-use tests — carefully selected to be the necessary and sufficient ones.",
    "fitsWorkflowTitle": "Fits in with your workflow.",
    "fitsWorkflowText": "UnitTestBot Python is available both as the plugin for IntelliJ IDEA or the command-line interface.<br>Choose the interface you need and integrate the tool into your working process.<br>Take advantage of the graphical UI and the related IDE features or get the most out of the minimalist textual mode perfect for scripting and automation.",
    "noTypeAnnotationsTitle": "No type annotations? No problem.",
    "noTypeAnnotationsText": "Dynamic type checking in Python is a challenge for automated test generation tools.<br>UnitTestBot Python met it with a custom type inference technique.<br>If there are no explicit type hints in the user code, UnitTestBot Python analyzes code usage, infers possible types with the help of <a href=\"https://github.com/python/typeshed\">Typeshed</a> and verifies them with <a href=\"https://github.com/python/mypy\">mypy</a>.<br>You won't get a test with <i>TypeError</i> unless you want to.",
    "twoFrameworksSupportedTitle": "Two most popular frameworks supported.",
    "twoFrameworksSupportedText": "UnitTestBot Python is able to generate test cases in a <i>unittest</i> or <i>pytest</i> format.<br>Continue using <i>pytest</i> as your favorite framework — combine the generated cases with the existing test suite and run them altogether. And if you stuck to built-in <i>unittest</i>, UnitTestBot Python is here to generate the corresponding output.",
    "failureNotOptionTitle": "Failure is not an option.",
    "failureNotOptionText": "Sometimes in Python one does not simply compare complex objects, and generating assertions becomes a non-trivial task. In this case, UnitTestBot Python won't leave you with always-failing assertions or no tests at all.<br>If something went wrong and you cannot compare the objects by value, UnitTestBot Python adds an assertion on the type of the object."
  },
  "jsHome": {
    "utbotJsTitle": "UnitTestBot JavaScript.",
    "almostReady": "Almost ready.",
    "utbotJsText": "UnitTestBot for JavaScript code is in development.<br>Wait a while for the next release."
  },
  "goHome": {
    "utbotGoTitle": "UnitTestBot Go.",
    "almostReady": "Almost ready.",
    "utbotGoText": "UnitTestBot for Go code is in development.<br>Wait a while for the next release."
  },
  "docs": {
    "cdocsTitle": "UnitTestBot C/C++",
    "javadocsTitle": "UnitTestBot Java",
    "cdocsText": "Documentation for UnitTestBot C/C++ can be accessed via link below.",
    "cdocsLink": "Documentation for UnitTestBot C/C++",
    "javadocsText": " Documentation for UnitTestBot Java can be accessed via link below.",
    "javadocsLink": "Documentation for UnitTestBot Java",
    "javadocsMainTitle": "UnitTestBot Java Documentation",
    "progress": "In progress",
    "goHome": "Go to the home page"
  },
  "research": {
    "conferencesAndCompetitionsTitle": "Conferences and competitions",

    "satSolvingTechnologiesTitle": "SAT-solving technologies",
    "preprint2022": "<b>Paper</b> | Preprint | 2022 | <b>En</b>",
    "satEncodingsHardnessArticleTitle": "Estimating the hardness of SAT encodings for Logical Equivalence Checking of Boolean circuits",
    "satEncodingsHardnessAuthors": "Semenov, A., Chukharev, K., Tarasov, E., Chivilikhin, D., & Kondratiev, V.",
    "polynomialFormulationsArticleTitle": "Polynomial formulations as a barrier for reduction-based hardness proofs",
    "polynomialFormulationsAuthors": "Kulikov, A. S., & Mihajlin, I.",
    "eccc2022": "<b>Paper</b> | <a href=\"https://eccc.weizmann.ac.il/\">Electronic Colloquium on Computational Complexity (ECCC)</a> | 2022 | <b>En</b>",
    "lowerBoundForKDnfResolutionArticleTitle": "<a href=\"https://eccc.weizmann.ac.il/report/2022/054/\">A Lower Bound for 𝑘-DNF Resolution on Random CNF Formulas via Expansion</a>",
    "lowerBoundForKDnfResolutionAuthors": "Sofronova, A., & Sokolov, D.",

    "symbolicExecutionTitle": "Symbolic execution",
    "pldi2021": "<b>Paper</b> | <a href=\"https://dl.acm.org/doi/proceedings/10.1145/3453483\">ACM SIGPLAN International Conference on Programming Language Design and Implementation (PLDI-2021)</a> | 2021 | <b>En</b>",
    "programInvariantsArticleTitle": "Beyond the elementary representations of program invariants over algebraic data types",
    "programInvariantsAuthors": "Kostyukov, Y., Mordvinov, D., & Fedyukovich, G.",
    "ecoop2019": "<b>Paper</b> | <a href=\"https://2019.ecoop.org/\">33rd European Conference on Object-Oriented Programming (ECOOP 2019)</a> | 2019 | <b>En</b>",
    "nominalSubtypingArticleTitle": "On Satisfiability of Nominal Subtyping with Variance",
    "nominalSubtypingAuthors": "Misonizhnik, A., & Mordvinov, D.",
    "fmcad2019": "<b>Paper</b> | <a href=\"https://fmcad.forsyte.at/FMCAD19/\">2019 Formal Methods in Computer Aided Design (FMCAD-2019)</a> | 2019 | <b>En</b>",
    "relationalInvariantsArticleTitle": "Property directed inference of relational invariants",
    "relationalInvariantsAuthors": "Mordvinov, D., & Fedyukovich, G.",
    "logicForProgrammingConference": "<b>Paper</b> | <a href=\"https://easychair.org/smart-program/LPAR-21/LPAR-index.html\">International Conference on Logic for Programming, Artificial Intelligence and Reasoning</a> | 2017 | <b>En</b>",
    "hornClausesArticleTitle": "Synchronizing Constrained Horn Clauses",
    "hornClausesArticle": "Mordvinov, D., & Fedyukovich, G.",

    "utbotJavaTitle": "UnitTestBot Java",
    "sbst2022Title": "<b>Competition</b> | <a href=\"https://sbst22.github.io/\">IEEE/ACM International Workshop on Search-Based Software Testing (SBST)</a> | 2022 | <b>En</b>",
    "sbst2022ArticleTitle": "<a href=\"https://ieeexplore.ieee.org/document/9810769/\">UTBot Java at the SBST2022 Tool Competition</a>",
    "sbst2022ArticlesAuthors": "Dmitry Ivanov, Alexey Menshutin, Denis Fokin, Yury Kamenev, Sergey Pospelov, Egor Kulikov, Nikita Stroganov",
    "sbst2022ToolCompetitionTitle": "<a href=\"https://ieeexplore.ieee.org/document/9810771\">SBST Tool Competition 2022</a>",
    "generalOverview": "General overview",
    "iccq2022Title": "<b>Paper</b> | <a href=\"https://www.iccq.ru/2022.html\">International Conference on Code Quality (ICCQ)</a> | 2022 | <b>En</b>",
    "iccq2022ArticleTitle": "<a href=\"https://ieeexplore.ieee.org/document/9763112\">Method Name Prediction for Automatically Generated Unit Tests</a>",
    "iccq2022ArticleAuthors": "Maxim Petukhov, Evelina Gudauskayte, Arman Kaliyev, Mikhail Oskin, Dmitry Ivanov, Qianxiang Wang",
    "sbst2021Title": "<b>Competition</b> | <a href=\"https://sbst21.github.io/\">IEEE/ACM International Workshop on Search-Based Software Testing (SBST)</a> | 2021 | <b>En</b>",
    "sbst2021ArticleTitle": "<a href=\"https://ieeexplore.ieee.org/document/9476232\">UtBot at the SBST2021 Tool Competition</a>",
    "sbst2021ArticleAuthors": "Dmitry Ivanov, Nikolay Bukharev, Alexey Menshutin, Arsen Nagdalian, Gleb Stromov, Artem Ustinov",
    "sbst2021ToolCompetitionTitle": "<a href=\"https://ieeexplore.ieee.org/document/9476243\">SBST Tool Competition 2021</a>",

    "utbotCppTitle": "UnitTestBot C/C++",
    "kleeWorkshop2022Title": "<b>Poster</b> | <a href=\"https://srg.doc.ic.ac.uk/klee22/\">3rd International KLEE Workshop on Symbolic Execution</a> | 2022 | <b>En</b>",
    "kleeWorkshop2022ArticleTitle": "<a href=\"https://srg.doc.ic.ac.uk/klee22/accepted_contributions.html\">UTBot Simplifies Auto Test Generation</a>",
    "kleeWorkshop2022ArticleAuthors": "Vladislav Kalugin, Pavel Iatchenii, Samat Gaynutdinov, Saveliy Grigoryev, Svetlana Shmidt, Alexey Utkin, Dmitry Ivanov, Aleksei Pleshakov, Vadim Volodin, Elena Ilina, Pavel Ponomarev and Konstantin Rybkin",
    "kleeWorkshopPoster": "KLEE Workshop poster",

    "programSynthesisTitle": "Program synthesis",
    "singplan2022": "<b>Paper</b> | <a href=\"https://icfp22.sigplan.org/\">ACM SIGPLAN International Conference on Functional Programming</a> | 2022 | <b>En</b>",
    "layoutSynthesisArticleTitle": "On a Declarative Guideline-Directed UI Layout Synthesis",
    "layoutSynthesisArticleAuthors": "Dmitrii Kosarev, Petr Lozov, Denis Fokin, Dmitri Boulytchev"
  },
  "search": {
    "title": "Search",
    "placeholder": "Type to search..."
  },
  "install": {
    "mainPart1": "<b>UnitTestBot</b> project provides users with 2 engines generating tests:<ul><li>UnitTestBot C/C++ <i>(requires Ubuntu 18.04 or higher)</i></li><li>UnitTestBot Java <i>(tested on Win64, Linux 64)</i></li><ul>",
    "mainPart2": "UTBot offers convenient ways to interact with its functionality. Users can install and use corresponding plugins:<br><ul><b><li>Visual Studio Code</b> plugin for <b>C/C++</b> languages (see <a href=\"https://github.com/UnitTestBot/UTBotCpp/wiki/install-vscode-plugin\">installation guide</a>)</li><li><b>IntelliJ IDEA</b> plugin for <b>Java</b> language (see <a href=\"https://github.com/UnitTestBot/UTBotJava/wiki/intellij-idea-plugin\">installation guide</a>)</li></ul>",
    "alert": "<b>UnitTestBot C/C++</b> supports only <b>small subset</b> of <b>C++</b> for now",
    "utbotCpp": "UnitTestBot C/C++",
    "utbotJava": "UnitTestBot Java",
    "latestStable": "Latest stable",
    "cpp": "UnitTestBot C/C++",
    "java": "UnitTestBot Java",
    "get": "Get",
    "getIdeaPlugin": "Get IntelliJ IDEA Plugin",
    "javaGuide": "Installation Guide"
  },
  "utbot": {
    "alertCpp": "<small>Only small subset of C++ is supported</small>",
    "alertNew": "<small>Experimental feature</small>"
  },
  "aboutUs": {
    "whoWeAreText": "We are a team of researchers and engineers from Saint Petersburg.<br><br>We are crazy about mathematics and programming. We love taking part in software testing competitions. We describe our achievements in <a href=\"https://www.utbot.org/research\">research articles</a>. We develop our flagship product — UnitTestBot for Java/Kotlin, C/C++, Python, JavaScript, and Go.<br><br>To be in touch with the high-end science we collaborate with the universities:",
    "spbu": "Saint Petersburg State University",
    "hse": "HSE University",
    "itmo": "ITMO University",
    "spbpu": "Peter the Great St. Petersburg Polytechnic University",
    "whatWeDevelopCategoriesText": "As a part of this intercollegiate team we develop root technologies to empower UnitTestBot as well as the whole lineup of other software products. Here are some of them:",
    "satSolvingTitle": "SAT solving technology",
    "satSolvingText": "SAT solver is a computer program which asks whether the variables of a given Boolean formula can be consistently replaced by <i>True</i> or <i>False</i> in such a way that the formula evaluates to <i>True</i>. SAT solvers are frequently used as the “engine” for the program verification applications.",
    "kosat": "<a href=\"https://github.com/UnitTestBot/kosat\">KoSAT</a> is a pure Kotlin CDCL SAT solver based on MiniSat core. It solves Boolean satisfiability problems given in DIMACS format and supports incremental solving.",
    "moreSat": "We also investigate <a href=\"https://www.utbot.org/research\">broader theoretical questions</a> related to SAT solving, e.g. evaluating the computational hardness of a given SAT problem.",
    "smtlSolvingTitle": "SMT solving technology",
    "smt": "Satisfiability modulo theories (SMT) field of research relates to determining whether a mathematical formula is satisfiable.",
    "ksmt": "<a href=\"https://github.com/UnitTestBot/ksmt\">KSMT</a> is the Kotlin API for various SMT solvers. For now it supports Z3 and Bitwuzla SAT solvers.",
    "symbolicExecutionTitle": "Symbolic execution",
    "symbolicExecutionArea": "We develop symbolic execution technology to provide our automated test generation tools with the effective engines. We have three main solutions in this research area.",
    "utbotJavaSymbolicEngine": "<a href=\"https://github.com/UnitTestBot/UTBotJava\">UnitTestBot Java</a> has its own dynamic symbolic execution engine that has already shown extremely good results at <a href=\"https://ieeexplore.ieee.org/document/9810769\">SBST competitions</a>.",
    "symbolicEngineKlee": "Our custom patch for KLEE is the core of UnitTestBot C/C++. KLEE is a symbolic virtual machine built on top of the LLVM compiler infrastructure.<br><a href=\"https://github.com/UnitTestBot/klee\">We contribute to KLEE</a> by implementing patches, which enhance the engine’s code coverage and speed. We offered <i>lazy initialization improvements</i> and committed the <i>undefined behavior detection patch</i> and the <i>patch for inline assembly support</i> to the main KLEE branch.<br>We converted KLEE into the <i>bidirectional property-directed symbolic execution</i> engine. Moreover, the patched KLEE engine is able to <i>automatically deduce method summaries</i>.<br>Symbolic execution is the main focus of our interest, so we conducted a series of research related to both applied and fundamental problems in this field.",
    "vSharp": "We also plan to support .NET infrastructure via <a href=\"https://github.com/VSharp-team/VSharp\">V#</a> — the symbolic execution engine performing completely automated test generation for .NET assemblies.",
    "fuzzingTitle": "Fuzzing",
    "fuzzingWhatWeDo": "When working on a UnitTestBot product lineup, we are developing <a href=\"https://github.com/UnitTestBot/UTBotJava/tree/pelevin/UnitTestBot_Family_Fuzzer_Platform/utbot-fuzzers\">fuzzing and dynamic program analysis techniques</a> suitable for all supported languages: Java/Kotlin, C/C++, Python. JavaScript, and Go.",
    "programAnalysisTitle": "Program analysis",
    "jcdb": "UnitTestBot with its symbolic execution engine and fuzzing techniques is the <a href=\"https://github.com/UnitTestBot/UTBotJava/wiki/Static-code-analysis-with-UTBotJava-action\">ready-to-use</a> tool for <a href=\"https://github.com/UnitTestBot/UTBotCpp/wiki/CodeAnalyzer\">code analysis</a>.  In addition to this end-to-end solution we implement a basic framework for developing custom static code analyzers.<br>Java Compilation Database <a href=\"https://github.com/UnitTestBot/jcdb\">(JCDB)</a> was inspired by the <a href=\"https://github.com/soot-oss/soot\">Soot</a> framework for analyzing and transforming Java code.<br>JCDB is a pure Java database which stores information about the compiled Java bytecode — classes, hierarchies, annotations, methods, fields, and their usages. With JCDB it is possible to analyze bytecode located outside the JVM process. It allows UnitTestBot to support the newest JDKs and to reuse data between restarts.",
    "programSynthesisTitle": "Program synthesis",
    "programSynthesisDescription": "We investigate approaches to synthesizing code for solving practical problems.<br>For example, UnitTestBot is capable of <a href=\"https://github.com/UnitTestBot/UTBotJava/pull/1030\">generating human-readable test method bodies</a> based on public API rather than Reflection.<br>We also develop the <a href=\"https://github.com/UnitTestBot/genui\">genui</a> project — a tool for automatic UI generation. In our research we <a href=\"https://icfp22.sigplan.org/details/minikanren-2022-papers/3/On-a-Declarative-Guideline-Directed-UI-Layout-Synthesis\">elaborate</a> ways to automatically arrange the elements of a user interface in accordance with the specified design guidelines. The next step is to synthesize the code which is capable to implement this layout.",
    "whatWeDevelopText": "Though all these things may sound nerdy, we believe we develop a useful tool for real-life programmers. We try to make UnitTestBot effective and user-friendly — so that we are happy with it when we use it ourselves. And we welcome you to join us in developing UnitTestBot!<br><br><a href = 'mailto: support@utbot.org'>Contact us</a> directly to ask a question, share your ideas or give us feedback — we will be glad to hear from you!",
    "visitGitHubText": "Visit our <a href=\"https://github.com/UnitTestBot/\">GitHub</a> page and feel free to contribute!",
    "email": "<a href = 'mailto: support@utbot.org'>Send email</a>"
  },
  "header": {
    "javaArea": "Java/Kotlin",
    "cppArea": "C/C++",
    "pythonArea": "Python",
    "goArea": "Go",
    "javaScriptArea": "JavaScript",
    "demo": "Demo",
    "research": "Research",
    "aboutUs": "About us",
    "download": "Download",
    "searchPlaceholder": "Search...",
    "fromGitHub": "From GitHub",
    "fromJetBrainsMarkerplace": "From JetBrains Marketplace",
    "userGuide": "User guide"
  },
  "footer": {
    "utbotCopyright": "UnitTestBot © 2022"
  },
  "demo": {
    "generateAndRunTests": "Generate & Run Tests",
    "genAndRunTests": "Gen. & Run Tests",
    "generatingAndRunningTests": "Generating & Running ",
    "genAndRunningTests": "Gen. & Run Tests "
  }
}
