{"version":3,"file":"component---src-docs-advanced-symbolic-stdin-md-37e2102590b7027f58b5.js","mappings":"6RAQaA,EAAe,Q,qNAC5B,IAAMC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,cACE,GAAM,kBADR,mBAGA,uFAAyE,kBAAQC,WAAW,KAAnB,SAAzE,MAAwH,kBAAQA,WAAW,KAAnB,mBAAxH,QAAmL,kBAAQA,WAAW,KAAnB,gBAAnL,sHAAyV,kBAAQA,WAAW,KAAnB,SAAzV,sDACA,oFACA,kBAAG,aAAGA,WAAW,IACb,KAAQ,qHADT,yBAGH,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,iOAaL,cACE,GAAM,sBACL,aAAGA,WAAW,KACb,KAAQ,wIADT,uBAGH,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,qQAcL,cACE,GAAM,uBACL,aAAGA,WAAW,KACb,KAAQ,wIADT,wBAGH,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,itI,4MAsMTJ,EAAWK,gBAAiB","sources":["webpack://unittestbot-web/./src/docs/advanced/symbolic-stdin.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/user/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"symbolic-stdin\"\n    }}>{`Symbolic stdin`}</h1>\n    <p>{`UTBot is able to generate tests for C code that reads values from `}<strong parentName=\"p\">{`stdin`}</strong>{`, `}<strong parentName=\"p\">{`file descriptor`}</strong>{` or `}<strong parentName=\"p\">{`STDIN_FILENO`}</strong>{`. UTBot marks read values as symbolic, generates tests, puts the needed data into a C-string buffer and redirects `}<strong parentName=\"p\">{`stdin`}</strong>{` to the buffer so tests can be executed properly.`}</p>\n    <p>{`Here is an example of a function that reads values from stdin:`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/lib/symbolic_stdin.c#L3\"\n      }}>{`Source code example`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`int check_password(int fd) {\n  char buf[5];\n  if (read(fd, buf, 5) != -1) {\n    if (buf[0] == 'h' && buf[1] == 'e' &&\n    buf[2] == 'l' && buf[3] == 'l' &&\n    buf[4] == 'o')\n      return 1;\n  }\n  return 0;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"redirecting-stdin\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/tests-utbot/lib/symbolic_stdin_test.h#L266\"\n      }}>{`Redirecting stdin`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`void utbot_redirect_stdin(const char* buf, int &res) {\n    int fds[2];\n    if (pipe(fds) == -1) {\n        res = -1;\n        return;\n    }\n    close(STDIN_FILENO);\n    dup2(fds[0], STDIN_FILENO);\n    write(fds[1], buf, 64);\n    close(fds[1]);\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-example\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/tests-utbot/lib/symbolic_stdin_test.cpp#L9\"\n      }}>{`Tests code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, check_password_test_1)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"hello\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_2)\n{\n    // Construct input\n    int fd = 1;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_3)\n{\n    // Construct input\n    int fd = 3;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_4)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"\\\\x97\"\"\\\\x97\"\"\\\\x97\"\"\\\\x97\"\"\\\\x97\"\"\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_5)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"he\\\\0\"\"hh\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_6)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"hell\\\\0\"\"\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_7)\n{\n    // Construct input\n    int fd = 1024;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_8)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"h\\\\0\"\"hhh\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_9)\n{\n    // Construct input\n    int fd = -1;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_10)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"hel\\\\0\"\"h\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}