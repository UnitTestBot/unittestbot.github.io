{"version":3,"file":"component---src-pages-index-jsx-e8f550d8516cc50c9dcb.js","mappings":"0UAAA,EAAe,IAA0B,qDCAzC,EAAe,IAA0B,yDCAzC,EAAe,IAA0B,uDCAzC,EAAe,IAA0B,oDCAzC,EAAe,IAA0B,6D,qBCoIvC,GAEaA,EAAAA,EAAAA,IA9GE,SAAH,GAAsB,IAAhBC,EAAQ,EAARA,SAClB,GAAoBC,EAAAA,EAAAA,KAAZC,EAAC,EAADA,EAAO,EAAJC,KAEX,OACE,QAAC,IAAM,CAACC,YAAU,EAACJ,SAAUA,IAC3B,eAAKK,UAAWC,EAAAA,MAChB,QAACC,EAAA,EAAS,CAACF,UAAWC,EAAAA,KACpB,QAAC,IAAO,KAAEJ,EAAE,2BAEZ,QAAC,IAAI,CACHG,UAAWG,IAAG,cAAeF,EAAAA,IAC7BG,wBAAyB,CAAEC,OAAQR,EAAE,6BAGvC,eAAKG,UAAWC,EAAAA,KACd,QAAC,EAAAK,KAAI,CAACC,GAAG,WACP,QAAC,IAAM,KAAEV,EAAE,6BAGb,QAAC,EAAAS,KAAI,CACHC,GAAG,+BACHP,UAAWC,EAAAA,KAEX,eAAKO,IAAKC,EAAAA,EAAeC,MAAM,KAAKC,OAAO,KAAKC,IAAI,eACnDf,EAAE,gCAGL,QAAC,EAAAS,KAAI,CAACC,GAAG,6CACP,eAAKC,IAAKK,EAAAA,EAAYH,MAAM,KAAKC,OAAO,KAAKC,IAAI,oBAKvD,QAACV,EAAA,EAAS,CAACF,UAAWC,EAAAA,KACpB,QAACa,EAAA,EAAW,CACVC,SACE,gCACGlB,EAAE,yCAAwC,KAAE,mBAC5CA,EAAE,0CAGPmB,KAAMnB,EAAE,mCACRoB,OAAO,oDACPC,SAAUrB,EAAE,2BACZsB,OAAQC,EACRC,OAAO,iBACPC,aAAa,WAGf,QAACR,EAAA,EAAW,CACVC,QAASlB,EAAE,iCACXmB,KAAMnB,EAAE,mCACRoB,OAAO,6DACPC,SAAUrB,EAAE,0BACZsB,OAAQI,EACRF,OAAO,qBACPC,aAAa,UAGf,QAACR,EAAA,EAAW,CACVC,SACE,gCACGlB,EAAE,kCAAiC,KAAE,mBACrCA,EAAE,0CAGPmB,KAAMnB,EAAE,iCACRoB,OAAO,iCACPC,SAAUrB,EAAE,+BACZsB,OAAQK,EACRH,OAAO,qBACPC,aAAa,WAGf,QAACR,EAAA,EAAW,CACVC,SACE,gCACGlB,EAAE,4BAA2B,KAAE,mBAC/BA,EAAE,6BAGPmB,KAAMnB,EAAE,sBACRoB,OAAO,0DACPC,SAAUrB,EAAE,gCACZsB,OAAQM,EACRJ,OAAO,gBACPC,aAAa,UAGf,QAACR,EAAA,EAAW,CACVC,QAASlB,EAAE,+BACXmB,KAAMnB,EAAE,8BACRoB,OAAO,+DACPC,SAAUrB,EAAE,yCACZsB,OAAQO,EACRL,OAAO,+BACPC,aAAa,WAEf,QAACK,EAAA,EAAW,CACVZ,QAASlB,EAAE,mCACXmB,KAAMnB,EAAE,gCACRoB,OAAO,gCACPC,SAAUrB,EAAE,sCACZ+B,mBAAmB,cAK7B,IAEmC,SAWnC,yO","sources":["webpack://unittestbot-web/./src/gifs/java/Simple.gif","webpack://unittestbot-web/./src/gifs/java/Full-Class.gif","webpack://unittestbot-web/./src/gifs/java/Comments.png","webpack://unittestbot-web/./src/gifs/java/Mocks.gif","webpack://unittestbot-web/./src/gifs/java/False-Positive.gif","webpack://unittestbot-web/./src/pages/index.jsx"],"sourcesContent":["export default __webpack_public_path__ + \"static/Simple-620e8469e1f9e6ea659e837e5eecb279.gif\";","export default __webpack_public_path__ + \"static/Full-Class-db831eb712fa35b72c3e0deff8f21ea2.gif\";","export default __webpack_public_path__ + \"static/Comments-ad0b7edc28cb996b83e13cc242e6d864.png\";","export default __webpack_public_path__ + \"static/Mocks-f2bfbb3850248484db01ebd828c8bc1e.gif\";","export default __webpack_public_path__ + \"static/False-Positive-38a7c600808555bec4d5ecb32bdaed5d.gif\";","import React from \"react\";\nimport cn from \"classnames\";\nimport { Container } from \"react-bootstrap\";\nimport { Link } from \"gatsby\";\nimport { useTranslation } from \"react-i18next\";\nimport Layout from \"../components/layout\";\nimport withTrans from \"../i18n/withTrans\";\nimport * as styles from \"./styles/index.module.css\";\n\nimport Button from \"../components/button\";\nimport Heading from \"../components/heading\";\nimport Text from \"../components/text\";\nimport ExampleCard from \"../components/exampleCard/ExampleCard\";\n\nimport watchDemoIcon from \"../images/watch-demo-icon.png\";\nimport githubIcon from \"../images/github-transparent.png\";\n\nimport simpleGif from \"../gifs/java/Simple.gif\";\nimport fullClassGif from \"../gifs/java/Full-Class.gif\";\nimport commentsGif from \"../gifs/java/Comments.png\";\nimport mocksGif from \"../gifs/java/Mocks.gif\";\nimport falsePositiveGif from \"../gifs/java/False-Positive.gif\";\nimport TextContent from \"../components/exampleCard/textContent/TextContent\";\n\nconst MainPage = ({ location }) => {\n  const { t, i18n } = useTranslation();\n\n  return (\n    <Layout isMainPage location={location}>\n      <div className={styles.gradient} />\n      <Container className={styles.topContainer}>\n        <Heading>{t(\"javaHome.imagineTitle\")}</Heading>\n\n        <Text\n          className={cn(\"text-center\", styles.topText)}\n          dangerouslySetInnerHTML={{ __html: t(\"javaHome.testsGenText\") }}\n        />\n\n        <div className={styles.actions}>\n          <Link to=\"/utbot\">\n            <Button>{t(\"javaHome.tryOnlineText\")}</Button>\n          </Link>\n\n          <Link\n            to=\"https://youtu.be/p6GtTqc599Q\"\n            className={styles.howWorksLink}\n          >\n            <img src={watchDemoIcon} width=\"32\" height=\"30\" alt=\"Video icon\" />\n            {t(\"javaHome.watchHowWorksText\")}\n          </Link>\n\n          <Link to=\"https://github.com/UnitTestBot/UTBotJava\">\n            <img src={githubIcon} width=\"50\" height=\"50\" alt=\"Github Logo\" />\n          </Link>\n        </div>\n      </Container>\n\n      <Container className={styles.examples}>\n        <ExampleCard\n          heading={\n            <>\n              {t(\"javaHome.testsGenAdvantagesTitlePart1\")} <br />\n              {t(\"javaHome.testsGenAdvantagesTitlePart2\")}\n            </>\n          }\n          text={t(\"javaHome.testsGenAdvantagesText\")}\n          linkTo=\"/docs/java/test-with-default-configuration-plugin\"\n          linkText={t(\"javaHome.checkGuideText\")}\n          gifSrc={simpleGif}\n          gifAlt=\"Simple example\"\n          gifPlacement=\"right\"\n        />\n\n        <ExampleCard\n          heading={t(\"javaHome.utbotAdvantagesTitle\")}\n          text={t(\"javaHome.testsGenAdvantagesText\")}\n          linkTo=\"/docs/java/test-results-plugin#run-tests-and-view-coverage\"\n          linkText={t(\"javaHome.learnMoreText\")}\n          gifSrc={fullClassGif}\n          gifAlt=\"Full class example\"\n          gifPlacement=\"left\"\n        />\n\n        <ExampleCard\n          heading={\n            <>\n              {t(\"javaHome.findBugsNooneCanTitle\")} <br />\n              {t(\"javaHome.eliminateFalsePositivesTitle\")}\n            </>\n          }\n          text={t(\"javaHome.findBugsNooneCanText\")}\n          linkTo=\"/docs/java/test-results-plugin\"\n          linkText={t(\"javaHome.howToUseResultText\")}\n          gifSrc={falsePositiveGif}\n          gifAlt=\"No false positives\"\n          gifPlacement=\"right\"\n        />\n\n        <ExampleCard\n          heading={\n            <>\n              {t(\"javaHome.mocksTitlePart1\")} <br />\n              {t(\"javaHome.mocksTitlePart2\")}\n            </>\n          }\n          text={t(\"javaHome.mocksText\")}\n          linkTo=\"/docs/java/tune-test-generation-plugin#mocking-settings\"\n          linkText={t(\"javaHome.mockingSettingsText\")}\n          gifSrc={mocksGif}\n          gifAlt=\"Mocks example\"\n          gifPlacement=\"left\"\n        />\n\n        <ExampleCard\n          heading={t(\"javaHome.humanReadableTitle\")}\n          text={t(\"javaHome.humanReadableText\")}\n          linkTo=\"/docs/java/tune-test-generation-plugin#read-test-description\"\n          linkText={t(\"javaHome.getBetterTestDescriptionText\")}\n          gifSrc={commentsGif}\n          gifAlt=\"Human readable tests example\"\n          gifPlacement=\"right\"\n        />\n        <TextContent\n          heading={t(\"javaHome.capableForYourNeedText\")}\n          text={t(\"javaHome.capableForEveryText\")}\n          linkTo=\"/docs/java/check-requirements\"\n          linkText={t(\"javaHome.supportedTechnologiesText\")}\n          containerClassName=\"onlyText\"\n        />\n      </Container>\n    </Layout>\n  );\n};\n\nexport default withTrans(MainPage);\n\n// const isActive = className => ({ isPartiallyCurrent }) => ({\n//   className: className + (isPartiallyCurrent ? \" active\" : \"\"),\n// });\n\n// const CustomLink = ({ className, children, ...propsCustomLink }) => (\n//   /* eslint-disable-next-line react/jsx-props-no-spreading */\n//   <Link getProps={isActive(className)} {...propsCustomLink}>\n//     {children}\n//   </Link>\n// );\n"],"names":["withTrans","location","useTranslation","t","i18n","isMainPage","className","styles","Container","cn","dangerouslySetInnerHTML","__html","Link","to","src","watchDemoIcon","width","height","alt","githubIcon","ExampleCard","heading","text","linkTo","linkText","gifSrc","simpleGif","gifAlt","gifPlacement","fullClassGif","falsePositiveGif","mocksGif","commentsGif","TextContent","containerClassName"],"sourceRoot":""}