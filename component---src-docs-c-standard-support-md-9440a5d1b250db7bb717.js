"use strict";(self.webpackChunkunittestbot_web=self.webpackChunkunittestbot_web||[]).push([[8399],{79529:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return c},default:function(){return u}});var a=n(87462),r=n(63366),l=(n(15007),n(64983)),p=n(23017),i=(n(8156),["components"]),c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!Object.prototype.hasOwnProperty.call(c,"__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/C-standard-support.md"}});var o={_frontmatter:c},s=p.Z;function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)(s,(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"c-features"},"C features"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Types",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/type"},"Basic types"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"char ✔️ ",(0,l.kt)("a",{parentName:"li",href:"#char"},"[examples]")),(0,l.kt)("li",{parentName:"ul"},"integral types ✔️  ",(0,l.kt)("a",{parentName:"li",href:"#integral-types"},"[examples]")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"[extended]")," ",(0,l.kt)("strong",{parentName:"li"},"int128 / "),"uint128 "),(0,l.kt)("li",{parentName:"ul"},"_Bool ✔️ ",(0,l.kt)("a",{parentName:"li",href:"#_bool-type"},"[examples]")),(0,l.kt)("li",{parentName:"ul"},"floating-point types ✔️ ",(0,l.kt)("a",{parentName:"li",href:"#floating-point-types"},"[examples]")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/enum"},"Enums")," ✔️ ",(0,l.kt)("a",{parentName:"li",href:"#enums"},"[examples]")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/array"},"Arrays"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"arrays of constant known size"),(0,l.kt)("li",{parentName:"ul"},"variable-length array"),(0,l.kt)("li",{parentName:"ul"},"arrays of unknown size"),(0,l.kt)("li",{parentName:"ul"},"multidimensional arrays"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/struct"},"Structs"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"anonymous structs"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/bit_field"},"bit fields")," ❌ ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/UnitTestBot/UTBotCpp/issues/237"},"[discussion]")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/union"},"Unions"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"anonymous union"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/pointer"},"Pointers"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"pointers to functions"),(0,l.kt)("li",{parentName:"ul"},"pointers to void ❌ ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/UnitTestBot/UTBotCpp/pull/221#discussion_r861876337"},"[discussion]")),(0,l.kt)("li",{parentName:"ul"},"multidimensional pointers"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/atomic"},"Atomic types")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/functions"},"Functions"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/variadic"},"variadic arguments")),(0,l.kt)("li",{parentName:"ul"},"static functions"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/inline"},"inline functions")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/statements"},"Statements and loops"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/if"},"if")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/switch"},"switch")," "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/for"},"for")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/while"},"while")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/do"},"do-while")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/continue"},"continue")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/break"},"break")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/goto"},"goto")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/operator_other#Conditional_operator"},"conditional (ternary) operator")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/typedef"},"Typedefs")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/storage_duration"},"Storage-class specifiers"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"static variables"),(0,l.kt)("li",{parentName:"ul"},"extern variables"))),(0,l.kt)("li",{parentName:"ul"},"Qualifiers",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/const"},"const")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/volatile"},"volatile")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/restrict"},"restrict")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/compound_literal"},"Compound literals")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/program"},"Program support utilities")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/error"},"Error handling"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"errno"),(0,l.kt)("li",{parentName:"ul"},"assert"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/memory"},"Dynamic memory management")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/io"},"Input/Output")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/algorithm"},"Algorithms")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/numeric/random"},"Pseudo random number generation")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/numeric/complex"},"Complex number arithmetic")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/thread"},"Concurrency")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://en.cppreference.com/w/c/language/generic"},"Generic selection"))),(0,l.kt)("hr",null),(0,l.kt)("h1",{id:"utbot-examples"},"UTBot examples"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Note"),": all of the following examples can be found ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib"},"here"),"."),(0,l.kt)("h2",{parentName:"blockquote",id:"basic-types"},"Basic types"),(0,l.kt)("h3",{parentName:"blockquote",id:"char"},"Char"),(0,l.kt)("pre",{parentName:"blockquote"},(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"char a_or_b(char a, char b) {\n    if (a == 'a') {\n        return a;\n    }\n    if (b == 'b') {\n        return b;\n    }\n"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"if (a > b) {\n    return a;\n}\nreturn b;\n")),(0,l.kt)("p",null,"}"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\n###### Generated tests\n\n```cpp\nTEST(regression, a_or_b_test_1)\n{\n    char actual = a_or_b('b', 'b');\n    EXPECT_EQ('b', actual);\n}\n\nTEST(regression, a_or_b_test_2)\n{\n    char actual = a_or_b('p', 'j');\n    EXPECT_EQ('p', actual);\n}\n\nTEST(regression, a_or_b_test_3)\n{\n    char actual = a_or_b('i', 'n');\n    EXPECT_EQ('n', actual);\n}\n\nTEST(regression, a_or_b_test_4)\n{\n    char actual = a_or_b('a', 'c');\n    EXPECT_EQ('a', actual);\n}\n")),(0,l.kt)("h3",{id:"integral-types"},"Integral types"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("inlineCode",{parentName:"p"},"short, unsigned short, int, unsigned int, long, unsigned long, long long, unsigned long long, signed char, unsigned char"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"signed long long int max_long(long long a, signed long long b) {\n    if (a > b) {\n        return a;\n    }\n    return b;\n}\n")),(0,l.kt)("h6",{id:"generated-tests"},"Generated tests"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"TEST(regression, max_long_test_1)\n{\n    long long actual = max_long(0LL, -1LL);\n    EXPECT_EQ(0LL, actual);\n}\n\nTEST(regression, max_long_test_2)\n{\n    long long actual = max_long(0LL, 0LL);\n    EXPECT_EQ(0LL, actual);\n}\n")),(0,l.kt)("h3",{id:"_bool-type"},"_Bool type"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"There is also a type alias bool for _Bool, defined in ",(0,l.kt)("inlineCode",{parentName:"p"},"<stdbool.h>"),".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"int fun_that_accept_bools(_Bool a, bool b) {\n    if (a && b) return 1;\n    if (a) return 2;\n    if (b) return 3;\n    return 4;\n}\n")),(0,l.kt)("h6",{id:"generated-tests-1"},"Generated tests"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"TEST(regression, fun_that_accept_bools_test_1)\n{\n    int actual = fun_that_accept_bools(true, false);\n    EXPECT_EQ(2, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_2)\n{\n    int actual = fun_that_accept_bools(false, true);\n    EXPECT_EQ(3, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_3)\n{\n    int actual = fun_that_accept_bools(false, false);\n    EXPECT_EQ(4, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_4)\n{\n    int actual = fun_that_accept_bools(true, true);\n    EXPECT_EQ(1, actual);\n}\n")),(0,l.kt)("h3",{id:"floating-point-types"},"Floating-point types"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("inlineCode",{parentName:"p"},"double, float, long double"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"float long_double_arith(long double x) {\n    x *= 2;\n    x -= 3.21;\n    x *= fabsl(x);\n    if (x == 1.0) {\n        return 1.0;\n    } else {\n        return 3.5;\n    }\n}\n")),(0,l.kt)("h6",{id:"generated-tests-2"},"Generated tests"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"TEST(regression, long_double_arith_test_1)\n{\n    float actual = long_double_arith(2.105000e+00);\n    EXPECT_NEAR(1.000000e+00, actual, utbot_abs_error);\n}\n\nTEST(regression, long_double_arith_test_2)\n{\n    float actual = long_double_arith(0.000000e+00);\n    EXPECT_NEAR(3.500000e+00, actual, utbot_abs_error);\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"int plain_isnan(float x) {\n    if (x != x) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n")),(0,l.kt)("h6",{id:"generated-tests-3"},"Generated tests"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"TEST(regression, plain_isnan_test_1)\n{\n    int actual = plain_isnan(NAN);\n    EXPECT_EQ(1, actual);\n}\n\nTEST(regression, plain_isnan_test_2)\n{\n    int actual = plain_isnan(0.000000e+00);\n    EXPECT_EQ(0, actual);\n}\n")),(0,l.kt)("h2",{id:"enums"},"Enums"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"enum Sign {\n    NEGATIVE,\n    ZERO,\n    POSITIVE\n};\n\nint getSignValue(enum Sign s) {\n    switch (s) {\n        case NEGATIVE:\n            return 0;\n        case ZERO:\n            return 1;\n        case POSITIVE:\n            return 2;\n        default:\n            return -1;\n    }\n}\n")),(0,l.kt)("h6",{id:"generated-tests-4"},"Generated tests"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"TEST(regression, getSignValue_test_1)\n{\n    int actual = getSignValue(NEGATIVE);\n    EXPECT_EQ(0, actual);\n}\n\nTEST(regression, getSignValue_test_2)\n{\n    int actual = getSignValue(ZERO);\n    EXPECT_EQ(1, actual);\n}\n\nTEST(regression, getSignValue_test_3)\n{\n    int actual = getSignValue(POSITIVE);\n    EXPECT_EQ(2, actual);\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"example-template"},"Example template"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// Enter the source code\n")),(0,l.kt)("h6",{id:"generated-tests-5"},"Generated tests"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"// Enter generated tests\n")))}u&&u===Object(u)&&Object.isExtensible(u)&&!Object.prototype.hasOwnProperty.call(u,"__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/C-standard-support.md"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-c-standard-support-md-9440a5d1b250db7bb717.js.map