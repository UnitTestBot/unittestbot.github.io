{"version":3,"file":"component---src-docs-advanced-syntax-md-17269d430b92c7f8fac4.js","mappings":"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","sources":["webpack://unittestbot-web/./src/docs/advanced/syntax.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/user/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"supported-syntax\"\n    }}>{`Supported Syntax`}</h1>\n    <p>{`UnitTestBot supports the majority of C language features. Here you can find test cases examples on main syntax constructions.\nAll code snippets below were taken from `}<a parentName=\"p\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/tree/master/cpp/c-example\"\n      }}>{`this repo`}</a>{`.`}</p>\n    {\n      /* toc */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#integral-types\"\n        }}>{`Integral types`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#character-types\"\n        }}>{`Character types`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#floating-point-types\"\n        }}>{`Floating-point types`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#_bool-type\"\n        }}>{`_Bool type`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#structs-as-parameters\"\n        }}>{`Structs as parameters`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#structs-as-return-values\"\n        }}>{`Structs as return values`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#unions\"\n        }}>{`Unions`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#pointers-as-parameters-and-return-types\"\n        }}>{`Pointers as parameters and return types`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#pointers-as-struct-fields-members\"\n        }}>{`Pointers as struct fields members`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#pointers-to-functions\"\n        }}>{`Pointers to functions`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#arrays\"\n        }}>{`Arrays`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#multidimensional-arrays-and-pointers\"\n        }}>{`Multidimensional arrays and pointers`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#enums\"\n        }}>{`Enums`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#typedef\"\n        }}>{`Typedef`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#static-functions\"\n        }}>{`Static functions`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#qualifiers-const-volatile-restrict-etc\"\n        }}>{`Qualifiers: const, volatile, restrict etc.`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#global-variables\"\n        }}>{`Global variables`}</a></li>\n    </ul>\n    {\n      /* tocstop */\n    }\n    <h2 {...{\n      \"id\": \"integral-types\"\n    }}>{`Integral types`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`short, unsigned short, int, unsigned int, long, unsigned long, long long, unsigned long long, unsigned char`}</inlineCode></p>\n    </blockquote>\n    <h6 {...{\n      \"id\": \"source-code-example\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/lib/basic_functions.c#L11\"\n      }}>{`Source code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`signed long long int max_long(long long a, signed long long b) {\n    if (a > b) {\n        return a;\n    }\n    return b;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-example\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/tests-utbot/lib/types/types_test.cpp#L76\"\n      }}>{`Tests code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, max_long_test_1)\n{\n    // Construct input\n    long long a = 0LL;\n    long long b = -1LL;\n\n    // Expected output\n    long long expected = 0LL;\n\n    // Trigger the function\n    long long actual = max_long(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, max_long_test_2)\n{\n    // Construct input\n    long long a = 0LL;\n    long long b = 0LL;\n\n    // Expected output\n    long long expected = 0LL;\n\n    // Trigger the function\n    long long actual = max_long(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"character-types\"\n    }}>{`Character types`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`char, signed char`}</inlineCode></p>\n    </blockquote>\n    <h6 {...{\n      \"id\": \"source-code-example-1\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/lib/types/types.c#L38\"\n      }}>{`Source code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`signed char some_func(char a, unsigned char b) {\n    if (b == 'z' && a > b) return a;\n    if (b != 'z') return b;\n    return '0';\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-example-1\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/tests-utbot/lib/types/types_test.cpp#L175\"\n      }}>{`Tests code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, some_func_test_1)\n{\n    // Construct input\n    char a = 'a';\n    unsigned char b = 122;\n\n    // Expected output\n    signed char expected = '0';\n\n    // Trigger the function\n    signed char actual = some_func(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, some_func_test_2)\n{\n    // Construct input\n    char a = 'a';\n    unsigned char b = 120;\n\n    // Expected output\n    signed char expected = 'x';\n\n    // Trigger the function\n    signed char actual = some_func(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, some_func_test_3)\n{\n    // Construct input\n    char a = '{';\n    unsigned char b = 122;\n\n    // Expected output\n    signed char expected = '{';\n\n    // Trigger the function\n    signed char actual = some_func(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(error, some_func_test_4)\n{\n    // Construct input\n    char a = 'a';\n    unsigned char b = 128;\n\n    // Trigger the function\n    some_func(a, b);\n\n    FAIL() << \"Unreachable point. Function was supposed to fail, but actually completed successfully.\";\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"floating-point-types\"\n    }}>{`Floating-point types`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`double, float, long double`}</inlineCode></p>\n    </blockquote>\n    <h6 {...{\n      \"id\": \"source-code-example-2\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/lib/floats/floating_point.c#L26\"\n      }}>{`Source code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`float long_double_arith(long double x) {\n    x *= 2;\n    x -= 3.21;\n    x *= fabsl(x);\n    if (x == 1.0) {\n        return 1.0;\n    } else {\n        return 3.5;\n    }\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-example-2\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/tests-utbot/lib/floats/floating_point_test.cpp#L106\"\n      }}>{`Tests code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, long_double_arith_test_1)\n{\n    // Construct input\n    long double x = 2.105000e+00;\n\n    // Expected output\n    float expected = 1.000000e+00;\n\n    // Trigger the function\n    float actual = long_double_arith(x);\n\n    // Check results\n    EXPECT_NEAR(expected, actual, utbot_abs_error);\n}\n\nTEST(regression, long_double_arith_test_2)\n{\n    // Construct input\n    long double x = 0.000000e+00;\n\n    // Expected output\n    float expected = 3.500000e+00;\n\n    // Trigger the function\n    float actual = long_double_arith(x);\n\n    // Check results\n    EXPECT_NEAR(expected, actual, utbot_abs_error);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"_bool-type\"\n    }}>{`_Bool type`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`There is also a type alias bool for _Bool, defined in `}<inlineCode parentName=\"p\">{`<stdbool.h>`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <h6 {...{\n      \"id\": \"source-code-example-3\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/lib/types/types.c#L44\"\n      }}>{`Source code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`int fun_that_accept_bools(_Bool a, bool b) {\n    if (a && b) return 1;\n    if (a) return 2;\n    if (b) return 3;\n    return 4;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-example-3\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/tests-utbot/lib/types/types_test.cpp#L236\"\n      }}>{`Tests code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, fun_that_accept_bools_test_1)\n{\n    // Construct input\n    bool a = true;\n    bool b = false;\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = fun_that_accept_bools(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_2)\n{\n    // Construct input\n    bool a = false;\n    bool b = false;\n\n    // Expected output\n    int expected = 4;\n\n    // Trigger the function\n    int actual = fun_that_accept_bools(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_3)\n{\n    // Construct input\n    bool a = false;\n    bool b = true;\n\n    // Expected output\n    int expected = 3;\n\n    // Trigger the function\n    int actual = fun_that_accept_bools(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_4)\n{\n    // Construct input\n    bool a = true;\n    bool b = true;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = fun_that_accept_bools(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"structs-as-parameters\"\n    }}>{`Structs as parameters`}</h2>\n    <h6 {...{\n      \"id\": \"source-code-example-4\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/lib/types/types.c#L118\"\n      }}>{`Source code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`struct SupportedStruct5 {\n    short b;\n    const int a;\n    char c;\n};\n\nint structWithConstFields(struct SupportedStruct5 st) {\n    if (st.a == 0) {\n        return 1;\n    }\n    return 2;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-example-4\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/tests-utbot/lib/types/types_test.cpp#L512\"\n      }}>{`Tests code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, structWithConstFields_test_1)\n{\n    // Construct input\n    struct SupportedStruct5 st = {0, 0, 'c'};\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = structWithConstFields(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, structWithConstFields_test_2)\n{\n    // Construct input\n    struct SupportedStruct5 st = {0, -1, 'c'};\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = structWithConstFields(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"structs-as-return-values\"\n    }}>{`Structs as return values`}</h2>\n    <h6 {...{\n      \"id\": \"source-code-example-5\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/lib/types/types.c#L80\"\n      }}>{`Source code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`struct SupportedStruct4 {\n    char* c;\n};\n\nconst struct SupportedStruct4 structWithConstPointerReturn(int a) {\n    if (a % 2 == 0) {\n        struct SupportedStruct4 res = {.c = \"abcd\"};\n        return res;\n    }\n    struct SupportedStruct4 res = {.c = \"ABCD\"};\n    return res;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-example-5\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/tests-utbot/lib/types/types_test.cpp#L437\"\n      }}>{`Tests code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, structWithConstPointerReturn_test_1)\n{\n    // Construct input\n    int a = 1;\n\n    // Expected output\n    struct SupportedStruct4 expected = {NULL};\n\n    // Trigger the function\n    const struct SupportedStruct4 actual = structWithConstPointerReturn(a);\n\n    // Check results\n}\n\nTEST(regression, structWithConstPointerReturn_test_2)\n{\n    // Construct input\n    int a = 0;\n\n    // Expected output\n    struct SupportedStruct4 expected = {NULL};\n\n    // Trigger the function\n    const struct SupportedStruct4 actual = structWithConstPointerReturn(a);\n\n    // Check results\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"unions\"\n    }}>{`Unions`}</h2>\n    <h6 {...{\n      \"id\": \"source-code-example-6\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/lib/structures/simple_unions.c#L52\"\n      }}>{`Source code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`union MainUnion {\n    union InnerUnion {\n        union InInnerUnion {\n            unsigned int u;\n            long long l;\n        };\n        char c;\n        union InInnerUnion ininner;\n        short s;\n    } inner;\n\n    int x;\n    long long y;\n};\n\nsigned char operate_with_inner_unions(union MainUnion st) {\n    if (st.x == 5 || st.y == 5 || st.inner.c == '5' ||\n        st.inner.s == 5 || st.inner.ininner.l == 5 || st.inner.ininner.u == 5) {\n        return '5';\n    }\n\n\n    if (st.x == 5 || st.y == 102 || st.inner.s == 15) {\n        return st.inner.c;\n    }\n\n    if ((long long) st.inner.ininner.u == st.inner.ininner.l) {\n        return 'e';\n    }\n    if ((long long) st.inner.ininner.u > st.inner.ininner.l) {\n        return 'g';\n    }\n\n    return 'o';\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-example-6\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/tests-utbot/lib/structures/simple_unions_test.cpp#L257\"\n      }}>{`Tests code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`template<typename T, size_t N>\nT from_bytes(const char (&bytes)[N]) {\n    T result;\n    std::memcpy(&result, bytes, sizeof(result));\n    return result;\n}\n\n\nTEST(regression, operate_with_inner_unions_test_1)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({102, 0, 0, 0, 0, 0, 0, 0});\n\n\n    // Expected output\n    signed char expected = 'f';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_2)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({53, 0, 0, 0, 0, 0, 0, 0});\n\n    // Expected output\n    signed char expected = '5';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_3)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({15, 0, 0, 0, 0, 0, 0, 0});\n\n    // Expected output\n    signed char expected = '\\\\x0f';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_4)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({98, 0, 0, 0, 2, 0, 0, 0});\n\n    // Expected output\n    signed char expected = 'o';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_5)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({5, 0, -1, 0, 0, 0, 0, 0});\n\n    // Expected output\n    signed char expected = '5';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_6)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({104, 0, 0, 0, 0, 0, 0, 0});\n\n    // Expected output\n    signed char expected = 'e';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_7)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({5, 0, 0, 0, 0, 0, 0, 0});\n\n    // Expected output\n    signed char expected = '5';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_8)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({99, 0, 0, 0, 0, 0, 0, -128});\n\n    // Expected output\n    signed char expected = 'g';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pointers-as-parameters-and-return-types\"\n    }}>{`Pointers as parameters and return types`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If a pointer is used as a return value, UTBot is not yet capable of determining if it is used as an array, so only value under the pointer itself will be checked in generated tests.`}</p>\n    </blockquote>\n    <h6 {...{\n      \"id\": \"source-code-example-7\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/lib/pointers/pointer_parameters.c#L3\"\n      }}>{`Source code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`int c_strcmp(const char* a, const char *b) {\n    for (int i = 0; ; i++) {\n        if (a[i] != b[i]) {\n            return 0;\n        } else {\n            if (a[i] == '\\\\0' || b[i] == '\\\\0') {\n                return a[i] == '\\\\0' && b[i] == '\\\\0';\n            }\n        }\n    }\n}\n\nint void_pointer_char_usage(void *x) {\n    char *a = x;\n    return c_strcmp(a, \"hello\");\n}\n\nint* five_square_numbers(int from) {\n    static int sq[5];\n\n    for (int i = 0; i < 5; i++) {\n        sq[i] = from * from;\n        from++;\n    }\n\n    return sq;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-example-7\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/tests-utbot/lib/pointers/pointer_parameters_test.cpp#L9\"\n      }}>{`Tests code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, c_strcmp_test_1)\n{\n    // Construct input\n    char a_buffer[] = \"\";\n    const char * a = a_buffer;\n    char b_buffer[] = \"\";\n    const char * b = b_buffer;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = c_strcmp(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, c_strcmp_test_2)\n{\n    // Construct input\n    char a_buffer[] = \"cbccccbccc\";\n    const char * a = a_buffer;\n    char b_buffer[] = \"cjcccccccc\";\n    const char * b = b_buffer;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = c_strcmp(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, c_strcmp_test_3)\n{\n    // Construct input\n    char a_buffer[] = \"abccccbcca\";\n    const char * a = a_buffer;\n    char b_buffer[] = \"icccccccci\";\n    const char * b = b_buffer;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = c_strcmp(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(error, void_pointer_char_usage_test_1)\n{\n    // Construct input\n    __attribute__ ((aligned(128))) unsigned char x = 104;\n\n    // Trigger the function\n    void_pointer_char_usage(&x);\n\n    FAIL() << \"Unreachable point. Function was supposed to fail, but actually completed successfully.\";\n}\n\nTEST(regression, void_pointer_char_usage_test_2)\n{\n    // Construct input\n    __attribute__ ((aligned(128))) unsigned char x = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = void_pointer_char_usage(&x);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, five_square_numbers_test_1)\n{\n    // Construct input\n    int from = 0;\n\n    // Expected output\n    int expected[1] = {0};\n\n    // Trigger the function\n    int * actual = five_square_numbers(from);\n\n    // Check results\n    for (int it_0_0 = 0; it_0_0 < 1; it_0_0 ++) {\n        EXPECT_EQ(expected[it_0_0], actual[it_0_0]);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pointers-as-struct-fields-members\"\n    }}>{`Pointers as struct fields members`}</h2>\n    <h6 {...{\n      \"id\": \"source-code-example-8\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/lib/structures/structs/structs_with_pointers.c#L24\"\n      }}>{`Source code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`struct List {\n    struct List * next;\n    int val;\n};\n\nint list_sum_sign(struct List *head) {\n    int sum = list_sum(head);\n    if (sum > 0) {\n        return 1;\n    } else if (sum < 0) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-example-8\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/tests-utbot/lib/structures/structs/structs_with_pointers_test.cpp#L71\"\n      }}>{`Tests code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, list_sum_sign_test_1)\n{\n    // Construct input\n    struct List head = {NULL, 0};\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = list_sum_sign(&head);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, list_sum_sign_test_2)\n{\n    // Construct input\n    struct List head = {NULL, -10};\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = list_sum_sign(&head);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, list_sum_sign_test_3)\n{\n    // Construct input\n    struct List head = {NULL, 1};\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = list_sum_sign(&head);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pointers-to-functions\"\n    }}>{`Pointers to functions`}</h2>\n    <blockquote>\n      <ul parentName=\"blockquote\">\n        <li parentName=\"ul\">{`If return type is a pointer to function, UTBot doesn't checking expected value - comparing pointers doesn't make any sense.`}</li>\n        <li parentName=\"ul\">{`We support arrays of pointers to functions also, but 1-dimensional only.`}</li>\n        <li parentName=\"ul\">{`If a function takes pointer to another function as parameter, UTBot generates stub for this parameter.`}</li>\n      </ul>\n    </blockquote>\n    <h6 {...{\n      \"id\": \"source-code-example-9\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/lib/pointers/function_pointers.c#L62\"\n      }}>{`Source code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`typedef int (*op_func)(int, int);\n\nint f_add(int a, int b) {\n    return a + b;\n}\nint f_sub(int a, int b) {\n    return a - b;\n}\nint f_mul(int a, int b) {\n    return a * b;\n}\n\nop_func return_op(char op) {\n    switch(op) {\n        case '+': return f_add;\n        case '-': return f_sub;\n        case '*': return f_mul;\n    }\n    return NULL;\n}\n\nchar* pointerParam(char* (*f)(int*), int* x) {\n    if (*x == 1) {\n        return f(x);\n    } else{\n        return f(x + 5);\n    }\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-example-9\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/tests-utbot/lib/pointers/function_pointers_test.cpp#L337\"\n      }}>{`Tests code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`\nTEST(regression, return_op_test_1)\n{\n    // Construct input\n    char op = '*';\n\n    // Expected output\n    // No output variable check for function returning pointer to function\n\n    // Trigger the function\n    return_op(op);\n\n    // Check results\n    // No check results for function returning pointer to function\n}\n\nTEST(regression, return_op_test_2)\n{\n    // Construct input\n    char op = 'c';\n\n    // Expected output\n    // No output variable check for function returning pointer to function\n\n    // Trigger the function\n    return_op(op);\n\n    // Check results\n    // No check results for function returning pointer to function\n}\n\nTEST(regression, return_op_test_3)\n{\n    // Construct input\n    char op = '-';\n\n    // Expected output\n    // No output variable check for function returning pointer to function\n\n    // Trigger the function\n    return_op(op);\n\n    // Check results\n    // No check results for function returning pointer to function\n}\n\nTEST(regression, return_op_test_4)\n{\n    // Construct input\n    char op = '+';\n\n    // Expected output\n    // No output variable check for function returning pointer to function\n\n    // Trigger the function\n    return_op(op);\n\n    // Check results\n    // No check results for function returning pointer to function\n}\n\n\ntypedef char * (*pointerParam_f_arg)(int *);\nchar * _pointerParam_f_stub(int * param1) {\n    return \"\";\n}\n\nTEST(regression, pointerParam_test_1)\n{\n    // Construct input\n    pointerParam_f_arg f = *_pointerParam_f_stub;\n    int x = 0;\n\n    // Expected output\n    char expected = '\\\\0';\n\n    // Trigger the function\n    char actual = *pointerParam(f, &x);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, pointerParam_test_2)\n{\n    // Construct input\n    pointerParam_f_arg f = *_pointerParam_f_stub;\n    int x = 1;\n\n    // Expected output\n    char expected = '\\\\0';\n\n    // Trigger the function\n    char actual = *pointerParam(f, &x);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arrays\"\n    }}>{`Arrays`}</h2>\n    <h6 {...{\n      \"id\": \"source-code-example-10\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/lib/structures/structs/structs_with_pointers.c#L24\"\n      }}>{`Source code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`struct Trio {\n    int a;\n    long long b;\n    short c;\n};\n\nint index_of_struct_with_equal_fields(struct Trio arr []) {\n    for (int i = 0; i < 10; i++) {\n        if (arr[i].a == arr[i].b) {\n            if (arr[i].b == arr[i].c) {\n                return i; \n            }\n        }\n    }\n\n    return -1;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-example-10\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/tests-utbot/lib/structures/struct_arrays_test.cpp#L100\"\n      }}>{`Tests code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, index_of_struct_with_equal_fields_test_1)\n{\n    // Construct input\n    struct Trio arr[10] = {{0, 1LL, 0}, {0, 4LL, 0}, {0, 1LL, 0}, {0, 2LL, 0}, {0, 8LL, 0}, {0, 8LL, 0}, {0, 4LL, 0}, {0, 4LL, 0}, {0, 1LL, 0}, {0, 1LL, 0}};\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, index_of_struct_with_equal_fields_test_2)\n{\n    // Construct input\n    struct Trio arr[10] = {{0, 1LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}};\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, index_of_struct_with_equal_fields_test_3)\n{\n    // Construct input\n    struct Trio arr[10] = {{0, 1LL, 0}, {8, 8LL, 0}, {2, 2LL, 0}, {0, 2LL, 0}, {1, 1LL, 0}, {1, 1LL, 0}, {0, 4LL, 0}, {1, 1LL, 0}, {0, 1LL, 0}, {2, 2LL, 0}};\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, index_of_struct_with_equal_fields_test_4)\n{\n    // Construct input\n    struct Trio arr[10] = {{2, 2LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}};\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, index_of_struct_with_equal_fields_test_5)\n{\n    // Construct input\n    struct Trio arr[10] = {{0, 1LL, 0}, {0, 4LL, 0}, {0, 1LL, 0}, {2, 2LL, 0}, {0, 8LL, 0}, {0, 8LL, 0}, {0, 4LL, 0}, {0, 4LL, 0}, {2, 2LL, 0}, {2, 2LL, 0}};\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, index_of_struct_with_equal_fields_test_6)\n{\n    // Construct input\n    struct Trio arr[10] = {{0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}};\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"multidimensional-arrays-and-pointers\"\n    }}>{`Multidimensional arrays and pointers`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Arrays of any dimensions are supported, but as for pointers, only 1-d and 2-d are supported.`}</p>\n    </blockquote>\n    <h6 {...{\n      \"id\": \"source-code-example-11\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/lib/multi_arrays.c#L63\"\n      }}>{`Source code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`int some_method(int ** pointer2d) {\n    int x = 2;\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            if (pointer2d[i][j] > 0) {\n                return i * 2 + j;\n            }\n        }\n    }\n    return -1;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-example-11\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/tests-utbot/lib/multi_arrays_test.cpp#L195\"\n      }}>{`Tests code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, some_method_test_1)\n{\n    // Construct input\n    int _pointer2d[2][2] = {{0, 0}, {0, 0}};\n    int ** pointer2d = (int **) calloc(3, sizeof(int *));\n    for (int it_9_0 = 0; it_9_0 < 2; it_9_0 ++) {\n        pointer2d[it_9_0] = _pointer2d[it_9_0];\n    }\n    pointer2d[2] = NULL;\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = some_method(pointer2d);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, some_method_test_2)\n{\n    // Construct input\n    int _pointer2d[2][2] = {{0, 1}, {0, 0}};\n    int ** pointer2d = (int **) calloc(3, sizeof(int *));\n    for (int it_9_0 = 0; it_9_0 < 2; it_9_0 ++) {\n        pointer2d[it_9_0] = _pointer2d[it_9_0];\n    }\n    pointer2d[2] = NULL;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = some_method(pointer2d);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, some_method_test_3)\n{\n    // Construct input\n    int _pointer2d[2][2] = {{0, 0}, {1, 0}};\n    int ** pointer2d = (int **) calloc(3, sizeof(int *));\n    for (int it_9_0 = 0; it_9_0 < 2; it_9_0 ++) {\n        pointer2d[it_9_0] = _pointer2d[it_9_0];\n    }\n    pointer2d[2] = NULL;\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = some_method(pointer2d);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, some_method_test_4)\n{\n    // Construct input\n    int _pointer2d[2][2] = {{1, 0}, {0, 0}};\n    int ** pointer2d = (int **) calloc(3, sizeof(int *));\n    for (int it_9_0 = 0; it_9_0 < 2; it_9_0 ++) {\n        pointer2d[it_9_0] = _pointer2d[it_9_0];\n    }\n    pointer2d[2] = NULL;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = some_method(pointer2d);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enums\"\n    }}>{`Enums`}</h2>\n    <h6 {...{\n      \"id\": \"source-code-example-12\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/lib/structures/enums.c#L5\"\n      }}>{`Source code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`enum Sign {\n    NEGATIVE,\n    ZERO,\n    POSITIVE\n};\n\n\nint enumSignToInt(enum Sign s) {\n    if (s == ZERO) {\n      return 0;\n    }\n    if (s == NEGATIVE) {\n        return -1;\n    } else {\n        return 1;\n    } \n}\n\nint enumSignPointerToInt(enum Sign *s) {\n    return enumSignToInt(*s);\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-example-12\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/tests-utbot/lib/structures/enums_test.cpp#L9\"\n      }}>{`Tests code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, enumSignToInt_test_1)\n{\n    // Construct input\n    enum Sign s = POSITIVE;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = enumSignToInt(s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, enumSignToInt_test_2)\n{\n    // Construct input\n    enum Sign s = NEGATIVE;\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = enumSignToInt(s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, enumSignToInt_test_3)\n{\n    // Construct input\n    enum Sign s = ZERO;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = enumSignToInt(s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\n\nTEST(regression, enumSignPointerToInt_test_1)\n{\n    // Construct input\n    enum Sign s = NEGATIVE;\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = enumSignPointerToInt(&s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, enumSignPointerToInt_test_2)\n{\n    // Construct input\n    enum Sign s = POSITIVE;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = enumSignPointerToInt(&s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, enumSignPointerToInt_test_3)\n{\n    // Construct input\n    enum Sign s = ZERO;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = enumSignPointerToInt(&s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"typedef\"\n    }}>{`Typedef`}</h2>\n    <h6 {...{\n      \"id\": \"source-code-example-13\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/lib/types/typedefs_1.c#L20\"\n      }}>{`Source code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`typedef struct __typeDefStruct {\n    int a;\n} TypeDefStruct2;\n\nint sign_of_typedef_struct2(TypeDefStruct2 x) {\n    if (x.a > 0) {\n        return 1;\n    }\n\n    if (x.a < 0) {\n        return -1;\n    }\n\n    return 0;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-example-13\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/tests-utbot/lib/types/typedefs_1_test.cpp#L86\"\n      }}>{`Tests code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, sign_of_typedef_struct2_test_1)\n{\n    // Construct input\n    TypeDefStruct2 x = {0};\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = sign_of_typedef_struct2(x);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, sign_of_typedef_struct2_test_2)\n{\n    // Construct input\n    TypeDefStruct2 x = {-10};\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = sign_of_typedef_struct2(x);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, sign_of_typedef_struct2_test_3)\n{\n    // Construct input\n    TypeDefStruct2 x = {1};\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = sign_of_typedef_struct2(x);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"static-functions\"\n    }}>{`Static functions`}</h2>\n    <h6 {...{\n      \"id\": \"source-code-example-14\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/lib/static.c#L4\"\n      }}>{`Source code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`static int static_simple(int dx)\n{\n    if (x > 0)\n    {\n        return x + dx;\n    }\n    if (x < 0)\n    {\n        return -x + dx;\n    }\n    return 0;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-example-14\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/tests-utbot/lib/static_test.cpp#L11\"\n      }}>{`Tests code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, static_simple_test_1)\n{\n    // Initialize global variables\n    x = 0;\n\n    // Construct input\n    int dx = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = static_simple(dx);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    int expected_x = 0;\n    EXPECT_EQ(expected_x, x);\n}\n\nTEST(regression, static_simple_test_2)\n{\n    // Initialize global variables\n    x = -10;\n\n    // Construct input\n    int dx = -10;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = static_simple(dx);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    int expected_x = -10;\n    EXPECT_EQ(expected_x, x);\n}\n\nTEST(regression, static_simple_test_3)\n{\n    // Initialize global variables\n    x = 1;\n\n    // Construct input\n    int dx = -1;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = static_simple(dx);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    int expected_x = 1;\n    EXPECT_EQ(expected_x, x);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"qualifiers-const-volatile-restrict-etc\"\n    }}>{`Qualifiers: const, volatile, restrict etc.`}</h2>\n    <h6 {...{\n      \"id\": \"source-code-example-15\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/lib/keywords/qualifiers.c#L45\"\n      }}>{`Source code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`const char * const foo_bar(volatile int a) {\n    if (a < 0) {\n        return \"-1\";\n    } else if (a == 0) {\n        return \"0\";\n    } else {\n        return \"1\";\n    }\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-example-15\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/tests-utbot/lib/keywords/qualifiers_test.cpp#L192\"\n      }}>{`Tests code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, foo_bar_test_1)\n{\n    // Construct input\n    int a = 2;\n\n    // Expected output\n    char expected = '1';\n\n    // Trigger the function\n    const char actual = *foo_bar(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, foo_bar_test_2)\n{\n    // Construct input\n    int a = 0;\n\n    // Expected output\n    char expected = '0';\n\n    // Trigger the function\n    const char actual = *foo_bar(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, foo_bar_test_3)\n{\n    // Construct input\n    int a = -1;\n\n    // Expected output\n    char expected = '-';\n\n    // Trigger the function\n    const char actual = *foo_bar(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"global-variables\"\n    }}>{`Global variables`}</h2>\n    <h6 {...{\n      \"id\": \"source-code-example-16\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/lib/globals.c#L60\"\n      }}>{`Source code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`static char* global_mutable_string;\nstatic const char* global_const_string;\n\n\nchar use_global_strings() {\n    if (!global_mutable_string) {\n        return 'M';\n    }\n    if (!global_const_string) {\n        return 'C';\n    }\n    char c = global_const_string[0];\n    char res;\n    if (c >= 'a' && c <= 'z') {\n        res = 'A' + c - 'a';\n    } else {\n        res = c;\n    }\n    global_mutable_string[0] = res;\n    return res;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-example-16\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://rnd-gitlab-msc.huawei.com/unittestbot/SampleSolutions/-/blob/master/cpp/c-example/tests-utbot/lib/globals_test.cpp#L177\"\n      }}>{`Tests code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, use_global_strings_test_1)\n{\n    // Initialize global variables\n    char global_mutable_string_buffer[] = \"ccacccbbbc\";\n    global_mutable_string = global_mutable_string_buffer;\n    char global_const_string_buffer[] = \"{ccaccccc{\";\n    global_const_string = global_const_string_buffer;\n\n\n    // Expected output\n    char expected = '{';\n\n    // Trigger the function\n    char actual = use_global_strings();\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    char expected_global_mutable_string = '{';\n    EXPECT_EQ(expected_global_mutable_string, (*global_mutable_string));\n    char expected_global_const_string = '{';\n    EXPECT_EQ(expected_global_const_string, (*global_const_string));\n}\n\nTEST(regression, use_global_strings_test_2)\n{\n    // Initialize global variables\n    char global_mutable_string_buffer[] = \"ccacccbbbc\";\n    global_mutable_string = global_mutable_string_buffer;\n    char global_const_string_buffer[] = \"cccacccccc\";\n    global_const_string = global_const_string_buffer;\n\n\n    // Expected output\n    char expected = 'C';\n\n    // Trigger the function\n    char actual = use_global_strings();\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    char expected_global_mutable_string = 'C';\n    EXPECT_EQ(expected_global_mutable_string, (*global_mutable_string));\n    char expected_global_const_string = 'c';\n    EXPECT_EQ(expected_global_const_string, (*global_const_string));\n}\n\nTEST(regression, use_global_strings_test_3)\n{\n    // Initialize global variables\n    char global_mutable_string_buffer[] = \"ccacccbbbc\";\n    global_mutable_string = global_mutable_string_buffer;\n    char global_const_string_buffer[] = \"\";\n    global_const_string = global_const_string_buffer;\n\n\n    // Expected output\n    char expected = '\\\\0';\n\n    // Trigger the function\n    char actual = use_global_strings();\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    char expected_global_mutable_string = '\\\\0';\n    EXPECT_EQ(expected_global_mutable_string, (*global_mutable_string));\n    char expected_global_const_string = '\\\\0';\n    EXPECT_EQ(expected_global_const_string, (*global_const_string));\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}