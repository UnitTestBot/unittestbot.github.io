{"expireTime":9007200911767383000,"key":"transformer-remark-markdown-ast-df90f9d77e9e6a8146c4846b0c4865e1--","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Generating and running tests","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":31,"offset":31}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":31,"offset":31}}},{"type":"paragraph","children":[{"type":"text","value":"After KLEE run, UTBot obtains test cases for each project function\npreviously specified as an entry point. Listing bellow shows an example\nof generated test for max function.","position":{"start":{"line":4,"column":1,"offset":33},"end":{"line":6,"column":36,"offset":207}}}],"position":{"start":{"line":4,"column":1,"offset":33},"end":{"line":6,"column":36,"offset":207}}},{"type":"code","lang":"c++","meta":null,"value":"#include \"basic_functions_test.h\"\n\n#include \"gtest/gtest.h\"\nnamespace UTBot {\nTEST(regression, max_test_1)\n{\n    // Construct input\n    int a = 0;\n    int b = -1;\n    // Expected output\n    int expected = 0;\n    // Trigger the function\n    int actual = max(a, b);\n    // Check results\n    EXPECT_EQ(expected, actual);\n}","position":{"start":{"line":8,"column":1,"offset":209},"end":{"line":25,"column":4,"offset":539}}},{"type":"paragraph","children":[{"type":"text","value":"Function arguments and return value, previously marked as\nsymbolic, are printed out to C++ test file, using GoogleTest framework.\nUTBot chose this format, because it is popular in reality and\ncan be applied to both C and C++ user code. For each test file, a\ncorresponding header file is generated; its contents are explained\nbelow.","position":{"start":{"line":27,"column":1,"offset":541},"end":{"line":32,"column":7,"offset":872}}}],"position":{"start":{"line":27,"column":1,"offset":541},"end":{"line":32,"column":7,"offset":872}}},{"type":"paragraph","children":[{"type":"text","value":"UTBot performs a complex transformation of KLEE output into\ntests sources. KLEE returns raw byte values for symbolic objects,\nand UTBot is able to construct human-like code that assigns these\nbytes to variables. For instance, UTBot sets structures fields one by\none with assignment operators instead of performing one memcpy().","position":{"start":{"line":34,"column":1,"offset":874},"end":{"line":38,"column":66,"offset":1201}}}],"position":{"start":{"line":34,"column":1,"offset":874},"end":{"line":38,"column":66,"offset":1201}}},{"type":"paragraph","children":[{"type":"text","value":"UTBot provides its users an option to compile test files, link them\nwith user code and run them to get test results and coverage rates.\nUTBot Makefile that contains compilation and run commands is\ngenerated along with tests based on link_commands.json. There\nare many complications arising when UTBot links user code to\ngenerated tests:","position":{"start":{"line":40,"column":1,"offset":1203},"end":{"line":45,"column":17,"offset":1539}}}],"position":{"start":{"line":40,"column":1,"offset":1203},"end":{"line":45,"column":17,"offset":1539}}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If user code contains a C static function, which was analysed","position":{"start":{"line":47,"column":4,"offset":1544},"end":{"line":47,"column":65,"offset":1605}}}],"position":{"start":{"line":47,"column":4,"offset":1544},"end":{"line":47,"column":65,"offset":1605}}}],"position":{"start":{"line":47,"column":2,"offset":1542},"end":{"line":47,"column":65,"offset":1605}}}],"position":{"start":{"line":47,"column":2,"offset":1542},"end":{"line":47,"column":65,"offset":1605}}},{"type":"paragraph","children":[{"type":"text","value":"by UTBot, generated tests binary can not be linked, because\nstatic functions are available only in the source file they are\ndeclared. To handle this problem, UTBot generates wrapper\nfiles with non-static function that include original files via\n","position":{"start":{"line":48,"column":1,"offset":1606},"end":{"line":52,"column":1,"offset":1851}}},{"type":"inlineCode","value":"#include directory","position":{"start":{"line":52,"column":1,"offset":1851},"end":{"line":52,"column":21,"offset":1871}}},{"type":"text","value":". Functions in wrapper files have same\nsignatures as original static functions and wrapper functions\ndelegate to original static functions in their bodies. For tests\nto be compiled and run, UTBot substitute wrapper files instead of original files in UTBot Makefile via environment\nvariables. Functions in wrapper files and user files have different names, so a name mangling technique is applied to\nallow using user-defined names for them in test files.","position":{"start":{"line":52,"column":21,"offset":1871},"end":{"line":57,"column":55,"offset":2324}}}],"position":{"start":{"line":48,"column":1,"offset":1606},"end":{"line":57,"column":55,"offset":2324}}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In case of using stubs, tests are generated and run with original files in UTBot Makefile replaced by stubs via environment","position":{"start":{"line":58,"column":4,"offset":2328},"end":{"line":58,"column":127,"offset":2451}}}],"position":{"start":{"line":58,"column":4,"offset":2328},"end":{"line":58,"column":127,"offset":2451}}}],"position":{"start":{"line":58,"column":2,"offset":2326},"end":{"line":58,"column":127,"offset":2451}}}],"position":{"start":{"line":58,"column":2,"offset":2326},"end":{"line":58,"column":127,"offset":2451}}},{"type":"paragraph","children":[{"type":"text","value":"variable.","position":{"start":{"line":59,"column":1,"offset":2452},"end":{"line":59,"column":10,"offset":2461}}}],"position":{"start":{"line":59,"column":1,"offset":2452},"end":{"line":59,"column":10,"offset":2461}}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"C++ has some keywords, which are absent in C, for example,","position":{"start":{"line":60,"column":4,"offset":2465},"end":{"line":60,"column":62,"offset":2523}}}],"position":{"start":{"line":60,"column":4,"offset":2465},"end":{"line":60,"column":62,"offset":2523}}}],"position":{"start":{"line":60,"column":2,"offset":2463},"end":{"line":60,"column":62,"offset":2523}}}],"position":{"start":{"line":60,"column":2,"offset":2463},"end":{"line":60,"column":62,"offset":2523}}},{"type":"paragraph","children":[{"type":"text","value":"try or reinterpret_cast. Those keywords can be used as\nfunction/variable names in C, so, in test headers, UTBot\nguards declared user function wrappers with a #define and\nan #undef macro, renaming them in a way they do not clash\nwith any C++ specific keyword.","position":{"start":{"line":61,"column":1,"offset":2524},"end":{"line":65,"column":31,"offset":2782}}}],"position":{"start":{"line":61,"column":1,"offset":2524},"end":{"line":65,"column":31,"offset":2782}}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/runExample.png","alt":"Creating test executable on c-example project","position":{"start":{"line":67,"column":1,"offset":2784},"end":{"line":67,"column":146,"offset":2929}}}],"position":{"start":{"line":67,"column":1,"offset":2784},"end":{"line":67,"column":146,"offset":2929}}},{"type":"paragraph","children":[{"type":"text","value":"Figure 7 represents the way of creating test executable for a generated test file. UTBot reuses the structure it creates when linking\nproject files, takes the same compile and link commands, but this\ntime user files are compiled not to LLVM bitcode, but to native binaries. UTBot takes the same project target it used to pass to KLEE\nand links it with generated test file. This way, functions called from\nthe test file have all symbols they need. One important step is that,\nduring this stage, UTBot links user executables as shared libraries\nfor them to be linkable with generated test files. Despite UTBot\nuses only Clang to compile user project into LLVM IR and to obtain\ncompile_commands.json, it is possible run tests with a broader\nset of compilers, with UTBot supporting gcc, g++, clang and\nclang++.","position":{"start":{"line":69,"column":1,"offset":2931},"end":{"line":79,"column":9,"offset":3737}}}],"position":{"start":{"line":69,"column":1,"offset":2931},"end":{"line":79,"column":9,"offset":3737}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":79,"column":9,"offset":3737}}}}