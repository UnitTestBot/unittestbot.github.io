{"expireTime":9007200911767383000,"key":"transformer-remark-markdown-html-9620b3dc2b8b0056672a56eefc1f1619--","val":"<h1>Configuring Project</h1>\n<p>When you initialize your C project with UTBot Wizard, extension will suggest you to configure project. Also, you may\nconfigure project afterwards using command <code>UTBot: Configure project</code> or <code>UTBot: Reset cache and configure project</code> in\npallet.</p>\n<h2>Project Configuration Steps</h2>\n<h3>Check Build Folder for exist</h3>\n<p>Firstly, if build folder is missing, extension will offer you to create that. In case you haven't done it yet, you may\nclick <code>Create build folder</code> button. UTBot will create that on host machine (as well as <code>bear.sh</code> script within).</p>\n<p><img src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/configureCheckBuildFolder.png\" alt=\"configureCheckBuildFolderImg\"></p>\n<h3>Export Project Model</h3>\n<p>Then, you will be asked to configure project. In case you haven't done it yet, you may click 'Configure' button. UTBot\nwill call <code>cmake</code> command for CMake project. It also will pass root directory and CMake options specified in wizard.\nNext, regardless of project's type UTBot will try to call <code>./bear.sh make</code> from build directory. If everything is\nsuccessful, two files will be created in build directory <code>compile_commands.json</code> and <code>link_commands.json</code>. Or,\nalternatively, you may run <code>./bear.sh</code> from create build directory with your build command as argument. For\nexample, <code>./bear.sh make -j8</code>.</p>\n<p><img src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/configureExportProjectModel.png\" alt=\"configureExportProjectModelImg\"></p>\n<blockquote>\n<p>üìù<strong>Note</strong></p>\n<p>Script <code>bear.sh</code> is just a wrapper around <a href=\"https://github.com/UnitTestBot/Bear\">Bear</a> tool.</p>\n</blockquote>"}