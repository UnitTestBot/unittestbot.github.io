{"expireTime":9007200911767383000,"key":"transformer-remark-markdown-html-ast-9dd7250d12ae1ecbb8898ab1d1de82ee--","val":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Supported C Syntax","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":21,"offset":21}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":21,"offset":21}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"UnitTestBot supports the majority of C language features. Here you can find test cases examples on main syntax\nconstructions. All code snippets below were taken\nfrom ","position":{"start":{"line":4,"column":1,"offset":23},"end":{"line":6,"column":6,"offset":189}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/"},"children":[{"type":"text","value":"this directory","position":{"start":{"line":6,"column":7,"offset":190},"end":{"line":6,"column":21,"offset":204}}}],"position":{"start":{"line":6,"column":6,"offset":189},"end":{"line":6,"column":102,"offset":285}}},{"type":"text","value":".","position":{"start":{"line":6,"column":102,"offset":285},"end":{"line":6,"column":103,"offset":286}}}],"position":{"start":{"line":4,"column":1,"offset":23},"end":{"line":6,"column":103,"offset":286}}},{"type":"text","value":"\n"},{"type":"raw","value":"<!-- toc -->","position":{"start":{"line":8,"column":1,"offset":288},"end":{"line":8,"column":13,"offset":300}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#integral-types"},"children":[{"type":"text","value":"Integral types","position":{"start":{"line":10,"column":4,"offset":305},"end":{"line":10,"column":18,"offset":319}}}],"position":{"start":{"line":10,"column":3,"offset":304},"end":{"line":10,"column":36,"offset":337}}}],"position":{"start":{"line":10,"column":1,"offset":302},"end":{"line":10,"column":36,"offset":337}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#character-types"},"children":[{"type":"text","value":"Character types","position":{"start":{"line":11,"column":4,"offset":341},"end":{"line":11,"column":19,"offset":356}}}],"position":{"start":{"line":11,"column":3,"offset":340},"end":{"line":11,"column":38,"offset":375}}}],"position":{"start":{"line":11,"column":1,"offset":338},"end":{"line":11,"column":38,"offset":375}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#floating-point-types"},"children":[{"type":"text","value":"Floating-point types","position":{"start":{"line":12,"column":4,"offset":379},"end":{"line":12,"column":24,"offset":399}}}],"position":{"start":{"line":12,"column":3,"offset":378},"end":{"line":12,"column":48,"offset":423}}}],"position":{"start":{"line":12,"column":1,"offset":376},"end":{"line":12,"column":48,"offset":423}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#_bool-type"},"children":[{"type":"text","value":"_Bool type","position":{"start":{"line":13,"column":4,"offset":427},"end":{"line":13,"column":14,"offset":437}}}],"position":{"start":{"line":13,"column":3,"offset":426},"end":{"line":13,"column":28,"offset":451}}}],"position":{"start":{"line":13,"column":1,"offset":424},"end":{"line":13,"column":28,"offset":451}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#structs-as-parameters"},"children":[{"type":"text","value":"Structs as parameters","position":{"start":{"line":14,"column":4,"offset":455},"end":{"line":14,"column":25,"offset":476}}}],"position":{"start":{"line":14,"column":3,"offset":454},"end":{"line":14,"column":50,"offset":501}}}],"position":{"start":{"line":14,"column":1,"offset":452},"end":{"line":14,"column":50,"offset":501}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#structs-as-return-values"},"children":[{"type":"text","value":"Structs as return values","position":{"start":{"line":15,"column":4,"offset":505},"end":{"line":15,"column":28,"offset":529}}}],"position":{"start":{"line":15,"column":3,"offset":504},"end":{"line":15,"column":56,"offset":557}}}],"position":{"start":{"line":15,"column":1,"offset":502},"end":{"line":15,"column":56,"offset":557}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#unions"},"children":[{"type":"text","value":"Unions","position":{"start":{"line":16,"column":4,"offset":561},"end":{"line":16,"column":10,"offset":567}}}],"position":{"start":{"line":16,"column":3,"offset":560},"end":{"line":16,"column":20,"offset":577}}}],"position":{"start":{"line":16,"column":1,"offset":558},"end":{"line":16,"column":20,"offset":577}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#pointers-as-parameters-and-return-types"},"children":[{"type":"text","value":"Pointers as parameters and return types","position":{"start":{"line":17,"column":4,"offset":581},"end":{"line":17,"column":43,"offset":620}}}],"position":{"start":{"line":17,"column":3,"offset":580},"end":{"line":17,"column":86,"offset":663}}}],"position":{"start":{"line":17,"column":1,"offset":578},"end":{"line":17,"column":86,"offset":663}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#pointers-as-struct-fields-members"},"children":[{"type":"text","value":"Pointers as struct fields members","position":{"start":{"line":18,"column":4,"offset":667},"end":{"line":18,"column":37,"offset":700}}}],"position":{"start":{"line":18,"column":3,"offset":666},"end":{"line":18,"column":74,"offset":737}}}],"position":{"start":{"line":18,"column":1,"offset":664},"end":{"line":18,"column":74,"offset":737}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#pointers-to-functions"},"children":[{"type":"text","value":"Pointers to functions","position":{"start":{"line":19,"column":4,"offset":741},"end":{"line":19,"column":25,"offset":762}}}],"position":{"start":{"line":19,"column":3,"offset":740},"end":{"line":19,"column":50,"offset":787}}}],"position":{"start":{"line":19,"column":1,"offset":738},"end":{"line":19,"column":50,"offset":787}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#arrays"},"children":[{"type":"text","value":"Arrays","position":{"start":{"line":20,"column":4,"offset":791},"end":{"line":20,"column":10,"offset":797}}}],"position":{"start":{"line":20,"column":3,"offset":790},"end":{"line":20,"column":20,"offset":807}}}],"position":{"start":{"line":20,"column":1,"offset":788},"end":{"line":20,"column":20,"offset":807}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#multidimensional-arrays-and-pointers"},"children":[{"type":"text","value":"Multidimensional arrays and pointers","position":{"start":{"line":21,"column":4,"offset":811},"end":{"line":21,"column":40,"offset":847}}}],"position":{"start":{"line":21,"column":3,"offset":810},"end":{"line":21,"column":80,"offset":887}}}],"position":{"start":{"line":21,"column":1,"offset":808},"end":{"line":21,"column":80,"offset":887}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#enums"},"children":[{"type":"text","value":"Enums","position":{"start":{"line":22,"column":4,"offset":891},"end":{"line":22,"column":9,"offset":896}}}],"position":{"start":{"line":22,"column":3,"offset":890},"end":{"line":22,"column":18,"offset":905}}}],"position":{"start":{"line":22,"column":1,"offset":888},"end":{"line":22,"column":18,"offset":905}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#typedef"},"children":[{"type":"text","value":"Typedef","position":{"start":{"line":23,"column":4,"offset":909},"end":{"line":23,"column":11,"offset":916}}}],"position":{"start":{"line":23,"column":3,"offset":908},"end":{"line":23,"column":22,"offset":927}}}],"position":{"start":{"line":23,"column":1,"offset":906},"end":{"line":23,"column":22,"offset":927}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#static-functions"},"children":[{"type":"text","value":"Static functions","position":{"start":{"line":24,"column":4,"offset":931},"end":{"line":24,"column":20,"offset":947}}}],"position":{"start":{"line":24,"column":3,"offset":930},"end":{"line":24,"column":40,"offset":967}}}],"position":{"start":{"line":24,"column":1,"offset":928},"end":{"line":24,"column":40,"offset":967}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#qualifiers-const-volatile-restrict-etc"},"children":[{"type":"text","value":"Qualifiers: const, volatile, restrict etc.","position":{"start":{"line":25,"column":4,"offset":971},"end":{"line":25,"column":46,"offset":1013}}}],"position":{"start":{"line":25,"column":3,"offset":970},"end":{"line":25,"column":88,"offset":1055}}}],"position":{"start":{"line":25,"column":1,"offset":968},"end":{"line":25,"column":88,"offset":1055}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#global-variables"},"children":[{"type":"text","value":"Global variables","position":{"start":{"line":26,"column":4,"offset":1059},"end":{"line":26,"column":20,"offset":1075}}}],"position":{"start":{"line":26,"column":3,"offset":1058},"end":{"line":26,"column":40,"offset":1095}}}],"position":{"start":{"line":26,"column":1,"offset":1056},"end":{"line":26,"column":40,"offset":1095}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#inline-assembly"},"children":[{"type":"text","value":"Inline assembly","position":{"start":{"line":27,"column":4,"offset":1099},"end":{"line":27,"column":19,"offset":1114}}}],"position":{"start":{"line":27,"column":3,"offset":1098},"end":{"line":27,"column":38,"offset":1133}}}],"position":{"start":{"line":27,"column":1,"offset":1096},"end":{"line":27,"column":38,"offset":1133}}},{"type":"text","value":"\n"}],"position":{"start":{"line":10,"column":1,"offset":302},"end":{"line":27,"column":38,"offset":1133}}},{"type":"text","value":"\n"},{"type":"raw","value":"<!-- tocstop -->","position":{"start":{"line":29,"column":1,"offset":1135},"end":{"line":29,"column":17,"offset":1151}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Integral types","position":{"start":{"line":31,"column":4,"offset":1156},"end":{"line":31,"column":18,"offset":1170}}}],"position":{"start":{"line":31,"column":1,"offset":1153},"end":{"line":31,"column":18,"offset":1170}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"short, unsigned short, int, unsigned int, long, unsigned long, long long, unsigned long long, unsigned char"}],"position":{"start":{"line":33,"column":3,"offset":1174},"end":{"line":33,"column":112,"offset":1283}}}],"position":{"start":{"line":33,"column":3,"offset":1174},"end":{"line":33,"column":112,"offset":1283}}},{"type":"text","value":"\n"}],"position":{"start":{"line":33,"column":1,"offset":1172},"end":{"line":33,"column":112,"offset":1283}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/types.c#L23"},"children":[{"type":"text","value":"Source code example","position":{"start":{"line":35,"column":2,"offset":1286},"end":{"line":35,"column":21,"offset":1305}}}],"position":{"start":{"line":35,"column":1,"offset":1285},"end":{"line":35,"column":123,"offset":1407}}}],"position":{"start":{"line":35,"column":1,"offset":1285},"end":{"line":35,"column":123,"offset":1407}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"signed long long int max_long(long long a, signed long long b) {\n    if (a > b) {\n        return a;\n    }\n    return b;\n}\n"}],"position":{"start":{"line":37,"column":1,"offset":1409},"end":{"line":44,"column":4,"offset":1541}}}],"position":{"start":{"line":37,"column":1,"offset":1409},"end":{"line":44,"column":4,"offset":1541}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details> \n  <summary>Tests code</summary>","position":{"start":{"line":46,"column":1,"offset":1543},"end":{"line":47,"column":32,"offset":1585}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"TEST(regression, max_long_test_1)\n{\n    // Construct input\n    long long a = 0LL;\n    long long b = -1LL;\n\n    // Expected output\n    long long expected = 0LL;\n\n    // Trigger the function\n    long long actual = max_long(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, max_long_test_2)\n{\n    // Construct input\n    long long a = 0LL;\n    long long b = 0LL;\n\n    // Expected output\n    long long expected = 0LL;\n\n    // Trigger the function\n    long long actual = max_long(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n"}],"position":{"start":{"line":49,"column":1,"offset":1587},"end":{"line":81,"column":4,"offset":2167}}}],"position":{"start":{"line":49,"column":1,"offset":1587},"end":{"line":81,"column":4,"offset":2167}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":83,"column":1,"offset":2169},"end":{"line":83,"column":11,"offset":2179}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Character types","position":{"start":{"line":85,"column":4,"offset":2184},"end":{"line":85,"column":19,"offset":2199}}}],"position":{"start":{"line":85,"column":1,"offset":2181},"end":{"line":85,"column":19,"offset":2199}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"char, signed char"}],"position":{"start":{"line":87,"column":3,"offset":2203},"end":{"line":87,"column":22,"offset":2222}}}],"position":{"start":{"line":87,"column":3,"offset":2203},"end":{"line":87,"column":22,"offset":2222}}},{"type":"text","value":"\n"}],"position":{"start":{"line":87,"column":1,"offset":2201},"end":{"line":87,"column":22,"offset":2222}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/types.c#L42"},"children":[{"type":"text","value":"Source code example","position":{"start":{"line":89,"column":2,"offset":2225},"end":{"line":89,"column":21,"offset":2244}}}],"position":{"start":{"line":89,"column":1,"offset":2224},"end":{"line":89,"column":123,"offset":2346}}}],"position":{"start":{"line":89,"column":1,"offset":2224},"end":{"line":89,"column":123,"offset":2346}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"signed char some_func(char a, unsigned char b) {\n    if (b == 'z' && a > b) return a;\n    if (b != 'z') return b;\n    return '0';\n}\n"}],"position":{"start":{"line":91,"column":1,"offset":2348},"end":{"line":97,"column":4,"offset":2490}}}],"position":{"start":{"line":91,"column":1,"offset":2348},"end":{"line":97,"column":4,"offset":2490}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details> \n  <summary>Tests code</summary>","position":{"start":{"line":99,"column":1,"offset":2492},"end":{"line":100,"column":32,"offset":2534}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"TEST(regression, some_func_test_1)\n{\n    // Construct input\n    char a = 'a';\n    unsigned char b = 122;\n\n    // Expected output\n    signed char expected = '0';\n\n    // Trigger the function\n    signed char actual = some_func(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, some_func_test_2)\n{\n    // Construct input\n    char a = 'a';\n    unsigned char b = 120;\n\n    // Expected output\n    signed char expected = 'x';\n\n    // Trigger the function\n    signed char actual = some_func(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, some_func_test_3)\n{\n    // Construct input\n    char a = '{';\n    unsigned char b = 122;\n\n    // Expected output\n    signed char expected = '{';\n\n    // Trigger the function\n    signed char actual = some_func(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(error, some_func_test_4)\n{\n    // Construct input\n    char a = 'a';\n    unsigned char b = 128;\n\n    // Trigger the function\n    some_func(a, b);\n\n    FAIL() << \"Unreachable point. Function was supposed to fail, but actually completed successfully.\";\n}\n"}],"position":{"start":{"line":102,"column":1,"offset":2536},"end":{"line":162,"column":4,"offset":3673}}}],"position":{"start":{"line":102,"column":1,"offset":2536},"end":{"line":162,"column":4,"offset":3673}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":164,"column":1,"offset":3675},"end":{"line":164,"column":11,"offset":3685}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Floating-point types","position":{"start":{"line":166,"column":4,"offset":3690},"end":{"line":166,"column":24,"offset":3710}}}],"position":{"start":{"line":166,"column":1,"offset":3687},"end":{"line":166,"column":24,"offset":3710}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"double, float, long double"}],"position":{"start":{"line":168,"column":3,"offset":3714},"end":{"line":168,"column":31,"offset":3742}}}],"position":{"start":{"line":168,"column":3,"offset":3714},"end":{"line":168,"column":31,"offset":3742}}},{"type":"text","value":"\n"}],"position":{"start":{"line":168,"column":1,"offset":3712},"end":{"line":168,"column":31,"offset":3742}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/floats/floating_point.c#L30"},"children":[{"type":"text","value":"Source code example","position":{"start":{"line":170,"column":2,"offset":3745},"end":{"line":170,"column":21,"offset":3764}}}],"position":{"start":{"line":170,"column":1,"offset":3744},"end":{"line":170,"column":133,"offset":3876}}}],"position":{"start":{"line":170,"column":1,"offset":3744},"end":{"line":170,"column":133,"offset":3876}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"float long_double_arith(long double x) {\n    x *= 2;\n    x -= 3.21;\n    x *= fabsl(x);\n    if (x == 1.0) {\n        return 1.0;\n    } else {\n        return 3.5;\n    }\n}\n"}],"position":{"start":{"line":172,"column":1,"offset":3878},"end":{"line":183,"column":4,"offset":4056}}}],"position":{"start":{"line":172,"column":1,"offset":3878},"end":{"line":183,"column":4,"offset":4056}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details> \n  <summary>Tests code</summary>","position":{"start":{"line":185,"column":1,"offset":4058},"end":{"line":186,"column":32,"offset":4100}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"TEST(regression, long_double_arith_test_1)\n{\n    // Construct input\n    long double x = 2.105000e+00;\n\n    // Expected output\n    float expected = 1.000000e+00;\n\n    // Trigger the function\n    float actual = long_double_arith(x);\n\n    // Check results\n    EXPECT_NEAR(expected, actual, utbot_abs_error);\n}\n\nTEST(regression, long_double_arith_test_2)\n{\n    // Construct input\n    long double x = 0.000000e+00;\n\n    // Expected output\n    float expected = 3.500000e+00;\n\n    // Trigger the function\n    float actual = long_double_arith(x);\n\n    // Check results\n    EXPECT_NEAR(expected, actual, utbot_abs_error);\n}\n"}],"position":{"start":{"line":188,"column":1,"offset":4102},"end":{"line":218,"column":4,"offset":4727}}}],"position":{"start":{"line":188,"column":1,"offset":4102},"end":{"line":218,"column":4,"offset":4727}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details> ","position":{"start":{"line":220,"column":1,"offset":4729},"end":{"line":220,"column":12,"offset":4740}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"_Bool type","position":{"start":{"line":222,"column":4,"offset":4745},"end":{"line":222,"column":14,"offset":4755}}}],"position":{"start":{"line":222,"column":1,"offset":4742},"end":{"line":222,"column":14,"offset":4755}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There is also a type alias bool for _Bool, defined in ","position":{"start":{"line":224,"column":3,"offset":4759},"end":{"line":224,"column":57,"offset":4813}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<stdbool.h>"}],"position":{"start":{"line":224,"column":57,"offset":4813},"end":{"line":224,"column":70,"offset":4826}}},{"type":"text","value":".","position":{"start":{"line":224,"column":70,"offset":4826},"end":{"line":224,"column":71,"offset":4827}}}],"position":{"start":{"line":224,"column":3,"offset":4759},"end":{"line":224,"column":71,"offset":4827}}},{"type":"text","value":"\n"}],"position":{"start":{"line":224,"column":1,"offset":4757},"end":{"line":224,"column":71,"offset":4827}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/types.c#L48"},"children":[{"type":"text","value":"Source code example","position":{"start":{"line":226,"column":2,"offset":4830},"end":{"line":226,"column":21,"offset":4849}}}],"position":{"start":{"line":226,"column":1,"offset":4829},"end":{"line":226,"column":123,"offset":4951}}}],"position":{"start":{"line":226,"column":1,"offset":4829},"end":{"line":226,"column":123,"offset":4951}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"int fun_that_accept_bools(_Bool a, bool b) {\n    if (a && b) return 1;\n    if (a) return 2;\n    if (b) return 3;\n    return 4;\n}\n"}],"position":{"start":{"line":228,"column":1,"offset":4953},"end":{"line":235,"column":4,"offset":5092}}}],"position":{"start":{"line":228,"column":1,"offset":4953},"end":{"line":235,"column":4,"offset":5092}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details> \n  <summary>Tests code</summary>","position":{"start":{"line":237,"column":1,"offset":5094},"end":{"line":238,"column":32,"offset":5136}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"TEST(regression, fun_that_accept_bools_test_1)\n{\n    // Construct input\n    bool a = true;\n    bool b = false;\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = fun_that_accept_bools(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_2)\n{\n    // Construct input\n    bool a = false;\n    bool b = false;\n\n    // Expected output\n    int expected = 4;\n\n    // Trigger the function\n    int actual = fun_that_accept_bools(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_3)\n{\n    // Construct input\n    bool a = false;\n    bool b = true;\n\n    // Expected output\n    int expected = 3;\n\n    // Trigger the function\n    int actual = fun_that_accept_bools(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_4)\n{\n    // Construct input\n    bool a = true;\n    bool b = true;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = fun_that_accept_bools(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n"}],"position":{"start":{"line":240,"column":1,"offset":5138},"end":{"line":304,"column":4,"offset":6307}}}],"position":{"start":{"line":240,"column":1,"offset":5138},"end":{"line":304,"column":4,"offset":6307}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":306,"column":1,"offset":6309},"end":{"line":306,"column":11,"offset":6319}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Structs as parameters","position":{"start":{"line":308,"column":4,"offset":6324},"end":{"line":308,"column":25,"offset":6345}}}],"position":{"start":{"line":308,"column":1,"offset":6321},"end":{"line":308,"column":25,"offset":6345}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/types.c#L122"},"children":[{"type":"text","value":"Source code example","position":{"start":{"line":310,"column":2,"offset":6348},"end":{"line":310,"column":21,"offset":6367}}}],"position":{"start":{"line":310,"column":1,"offset":6347},"end":{"line":310,"column":124,"offset":6470}}}],"position":{"start":{"line":310,"column":1,"offset":6347},"end":{"line":310,"column":124,"offset":6470}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"struct SupportedStruct5 {\n    short b;\n    const int a;\n    char c;\n};\n\nint structWithConstFields(struct SupportedStruct5 st) {\n    if (st.a == 0) {\n        return 1;\n    }\n    return 2;\n}\n"}],"position":{"start":{"line":312,"column":1,"offset":6472},"end":{"line":325,"column":4,"offset":6671}}}],"position":{"start":{"line":312,"column":1,"offset":6472},"end":{"line":325,"column":4,"offset":6671}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details> \n  <summary>Tests code</summary>","position":{"start":{"line":327,"column":1,"offset":6673},"end":{"line":328,"column":32,"offset":6715}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"TEST(regression, structWithConstFields_test_1)\n{\n    // Construct input\n    struct SupportedStruct5 st = {0, 0, 'c'};\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = structWithConstFields(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, structWithConstFields_test_2)\n{\n    // Construct input\n    struct SupportedStruct5 st = {0, -1, 'c'};\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = structWithConstFields(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n"}],"position":{"start":{"line":330,"column":1,"offset":6717},"end":{"line":360,"column":4,"offset":7317}}}],"position":{"start":{"line":330,"column":1,"offset":6717},"end":{"line":360,"column":4,"offset":7317}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":362,"column":1,"offset":7319},"end":{"line":362,"column":11,"offset":7329}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Structs as return values","position":{"start":{"line":364,"column":4,"offset":7334},"end":{"line":364,"column":28,"offset":7358}}}],"position":{"start":{"line":364,"column":1,"offset":7331},"end":{"line":364,"column":28,"offset":7358}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/types.c#L84"},"children":[{"type":"text","value":"Source code example","position":{"start":{"line":366,"column":2,"offset":7361},"end":{"line":366,"column":21,"offset":7380}}}],"position":{"start":{"line":366,"column":1,"offset":7360},"end":{"line":366,"column":123,"offset":7482}}}],"position":{"start":{"line":366,"column":1,"offset":7360},"end":{"line":366,"column":123,"offset":7482}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"struct SupportedStruct4 {\n    char* c;\n};\n\nconst struct SupportedStruct4 structWithConstPointerReturn(int a) {\n    if (a % 2 == 0) {\n        struct SupportedStruct4 res = {.c = \"abcd\"};\n        return res;\n    }\n    struct SupportedStruct4 res = {.c = \"ABCD\"};\n    return res;\n}\n"}],"position":{"start":{"line":368,"column":1,"offset":7484},"end":{"line":381,"column":4,"offset":7773}}}],"position":{"start":{"line":368,"column":1,"offset":7484},"end":{"line":381,"column":4,"offset":7773}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details> \n  <summary>Tests code</summary>","position":{"start":{"line":383,"column":1,"offset":7775},"end":{"line":384,"column":32,"offset":7817}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"TEST(regression, structWithConstPointerReturn_test_1)\n{\n    // Construct input\n    int a = 1;\n\n    // Expected output\n    struct SupportedStruct4 expected = {NULL};\n\n    // Trigger the function\n    const struct SupportedStruct4 actual = structWithConstPointerReturn(a);\n\n    // Check results\n}\n\nTEST(regression, structWithConstPointerReturn_test_2)\n{\n    // Construct input\n    int a = 0;\n\n    // Expected output\n    struct SupportedStruct4 expected = {NULL};\n\n    // Trigger the function\n    const struct SupportedStruct4 actual = structWithConstPointerReturn(a);\n\n    // Check results\n}\n"}],"position":{"start":{"line":386,"column":1,"offset":7819},"end":{"line":414,"column":4,"offset":8418}}}],"position":{"start":{"line":386,"column":1,"offset":7819},"end":{"line":414,"column":4,"offset":8418}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":416,"column":1,"offset":8420},"end":{"line":416,"column":11,"offset":8430}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Unions","position":{"start":{"line":418,"column":4,"offset":8435},"end":{"line":418,"column":10,"offset":8441}}}],"position":{"start":{"line":418,"column":1,"offset":8432},"end":{"line":418,"column":10,"offset":8441}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/structures/simple_unions.c#L56"},"children":[{"type":"text","value":"Source code example","position":{"start":{"line":420,"column":2,"offset":8444},"end":{"line":420,"column":21,"offset":8463}}}],"position":{"start":{"line":420,"column":1,"offset":8443},"end":{"line":420,"column":136,"offset":8578}}}],"position":{"start":{"line":420,"column":1,"offset":8443},"end":{"line":420,"column":136,"offset":8578}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"union MainUnion {\n    union InnerUnion {\n        union InInnerUnion {\n            unsigned int u;\n            long long l;\n        };\n        char c;\n        union InInnerUnion ininner;\n        short s;\n    } inner;\n\n    int x;\n    long long y;\n};\n\nsigned char operate_with_inner_unions(union MainUnion st) {\n    if (st.x == 5 || st.y == 5 || st.inner.c == '5' ||\n        st.inner.s == 5 || st.inner.ininner.l == 5 || st.inner.ininner.u == 5) {\n        return '5';\n    }\n\n\n    if (st.x == 5 || st.y == 102 || st.inner.s == 15) {\n        return st.inner.c;\n    }\n\n    if ((long long) st.inner.ininner.u == st.inner.ininner.l) {\n        return 'e';\n    }\n    if ((long long) st.inner.ininner.u > st.inner.ininner.l) {\n        return 'g';\n    }\n\n    return 'o';\n}\n"}],"position":{"start":{"line":422,"column":1,"offset":8580},"end":{"line":458,"column":4,"offset":9351}}}],"position":{"start":{"line":422,"column":1,"offset":8580},"end":{"line":458,"column":4,"offset":9351}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details> \n  <summary>Tests code</summary>","position":{"start":{"line":460,"column":1,"offset":9353},"end":{"line":461,"column":32,"offset":9395}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"template<typename T, size_t N>\nT from_bytes(const char (&bytes)[N]) {\n    T result;\n    std::memcpy(&result, bytes, sizeof(result));\n    return result;\n}\n\n\nTEST(regression, operate_with_inner_unions_test_1)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({102, 0, 0, 0, 0, 0, 0, 0});\n\n\n    // Expected output\n    signed char expected = 'f';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_2)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({53, 0, 0, 0, 0, 0, 0, 0});\n\n    // Expected output\n    signed char expected = '5';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_3)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({15, 0, 0, 0, 0, 0, 0, 0});\n\n    // Expected output\n    signed char expected = '\\x0f';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_4)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({98, 0, 0, 0, 2, 0, 0, 0});\n\n    // Expected output\n    signed char expected = 'o';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_5)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({5, 0, -1, 0, 0, 0, 0, 0});\n\n    // Expected output\n    signed char expected = '5';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_6)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({104, 0, 0, 0, 0, 0, 0, 0});\n\n    // Expected output\n    signed char expected = 'e';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_7)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({5, 0, 0, 0, 0, 0, 0, 0});\n\n    // Expected output\n    signed char expected = '5';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_8)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({99, 0, 0, 0, 0, 0, 0, -128});\n\n    // Expected output\n    signed char expected = 'g';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n"}],"position":{"start":{"line":463,"column":1,"offset":9397},"end":{"line":592,"column":4,"offset":12370}}}],"position":{"start":{"line":463,"column":1,"offset":9397},"end":{"line":592,"column":4,"offset":12370}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":594,"column":1,"offset":12372},"end":{"line":594,"column":11,"offset":12382}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Pointers as parameters and return types","position":{"start":{"line":596,"column":4,"offset":12387},"end":{"line":596,"column":43,"offset":12426}}}],"position":{"start":{"line":596,"column":1,"offset":12384},"end":{"line":596,"column":43,"offset":12426}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If a pointer is used as a return value, UTBot is not yet capable of determining if it is used as an array, so only value under the pointer itself will be checked in generated tests.","position":{"start":{"line":598,"column":3,"offset":12430},"end":{"line":598,"column":184,"offset":12611}}}],"position":{"start":{"line":598,"column":3,"offset":12430},"end":{"line":598,"column":184,"offset":12611}}},{"type":"text","value":"\n"}],"position":{"start":{"line":598,"column":1,"offset":12428},"end":{"line":598,"column":184,"offset":12611}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib//pointers/pointer_parameters.c#L7"},"children":[{"type":"text","value":"Source code example","position":{"start":{"line":600,"column":2,"offset":12614},"end":{"line":600,"column":21,"offset":12633}}}],"position":{"start":{"line":600,"column":1,"offset":12613},"end":{"line":600,"column":139,"offset":12751}}}],"position":{"start":{"line":600,"column":1,"offset":12613},"end":{"line":600,"column":139,"offset":12751}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"int c_strcmp(const char* a, const char *b) {\n    for (int i = 0; ; i++) {\n        if (a[i] != b[i]) {\n            return 0;\n        } else {\n            if (a[i] == '\\0' || b[i] == '\\0') {\n                return a[i] == '\\0' && b[i] == '\\0';\n            }\n        }\n    }\n}\n\nint void_pointer_char_usage(void *x) {\n    char *a = x;\n    return c_strcmp(a, \"hello\");\n}\n\nint* five_square_numbers(int from) {\n    static int sq[5];\n\n    for (int i = 0; i < 5; i++) {\n        sq[i] = from * from;\n        from++;\n    }\n\n    return sq;\n}\n"}],"position":{"start":{"line":602,"column":1,"offset":12753},"end":{"line":630,"column":4,"offset":13293}}}],"position":{"start":{"line":602,"column":1,"offset":12753},"end":{"line":630,"column":4,"offset":13293}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details> \n  <summary>Tests code</summary>","position":{"start":{"line":632,"column":1,"offset":13295},"end":{"line":633,"column":32,"offset":13337}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"TEST(regression, c_strcmp_test_1)\n{\n    // Construct input\n    char a_buffer[] = \"\";\n    const char * a = a_buffer;\n    char b_buffer[] = \"\";\n    const char * b = b_buffer;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = c_strcmp(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, c_strcmp_test_2)\n{\n    // Construct input\n    char a_buffer[] = \"cbccccbccc\";\n    const char * a = a_buffer;\n    char b_buffer[] = \"cjcccccccc\";\n    const char * b = b_buffer;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = c_strcmp(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, c_strcmp_test_3)\n{\n    // Construct input\n    char a_buffer[] = \"abccccbcca\";\n    const char * a = a_buffer;\n    char b_buffer[] = \"icccccccci\";\n    const char * b = b_buffer;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = c_strcmp(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(error, void_pointer_char_usage_test_1)\n{\n    // Construct input\n    __attribute__ ((aligned(128))) unsigned char x = 104;\n\n    // Trigger the function\n    void_pointer_char_usage(&x);\n\n    FAIL() << \"Unreachable point. Function was supposed to fail, but actually completed successfully.\";\n}\n\nTEST(regression, void_pointer_char_usage_test_2)\n{\n    // Construct input\n    __attribute__ ((aligned(128))) unsigned char x = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = void_pointer_char_usage(&x);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, five_square_numbers_test_1)\n{\n    // Construct input\n    int from = 0;\n\n    // Expected output\n    int expected[1] = {0};\n\n    // Trigger the function\n    int * actual = five_square_numbers(from);\n\n    // Check results\n    for (int it_0_0 = 0; it_0_0 < 1; it_0_0 ++) {\n        EXPECT_EQ(expected[it_0_0], actual[it_0_0]);\n    }\n}\n"}],"position":{"start":{"line":635,"column":1,"offset":13339},"end":{"line":732,"column":4,"offset":15359}}}],"position":{"start":{"line":635,"column":1,"offset":13339},"end":{"line":732,"column":4,"offset":15359}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":734,"column":1,"offset":15361},"end":{"line":734,"column":11,"offset":15371}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Pointers as struct fields members","position":{"start":{"line":736,"column":4,"offset":15376},"end":{"line":736,"column":37,"offset":15409}}}],"position":{"start":{"line":736,"column":1,"offset":15373},"end":{"line":736,"column":37,"offset":15409}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib//structures/structs/structs_with_pointers.c#L28"},"children":[{"type":"text","value":"Source code example","position":{"start":{"line":738,"column":2,"offset":15412},"end":{"line":738,"column":21,"offset":15431}}}],"position":{"start":{"line":738,"column":1,"offset":15411},"end":{"line":738,"column":153,"offset":15563}}}],"position":{"start":{"line":738,"column":1,"offset":15411},"end":{"line":738,"column":153,"offset":15563}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"struct List {\n    struct List * next;\n    int val;\n};\n\nint list_sum_sign(struct List *head) {\n    int sum = list_sum(head);\n    if (sum > 0) {\n        return 1;\n    } else if (sum < 0) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n"}],"position":{"start":{"line":740,"column":1,"offset":15565},"end":{"line":756,"column":4,"offset":15820}}}],"position":{"start":{"line":740,"column":1,"offset":15565},"end":{"line":756,"column":4,"offset":15820}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details> \n  <summary>Tests code</summary>","position":{"start":{"line":758,"column":1,"offset":15822},"end":{"line":759,"column":32,"offset":15864}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"TEST(regression, list_sum_sign_test_1)\n{\n    // Construct input\n    struct List head = {NULL, 0};\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = list_sum_sign(&head);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, list_sum_sign_test_2)\n{\n    // Construct input\n    struct List head = {NULL, -10};\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = list_sum_sign(&head);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, list_sum_sign_test_3)\n{\n    // Construct input\n    struct List head = {NULL, 1};\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = list_sum_sign(&head);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n"}],"position":{"start":{"line":761,"column":1,"offset":15866},"end":{"line":806,"column":4,"offset":16688}}}],"position":{"start":{"line":761,"column":1,"offset":15866},"end":{"line":806,"column":4,"offset":16688}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":808,"column":1,"offset":16690},"end":{"line":808,"column":11,"offset":16700}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Pointers to functions","position":{"start":{"line":810,"column":4,"offset":16705},"end":{"line":810,"column":25,"offset":16726}}}],"position":{"start":{"line":810,"column":1,"offset":16702},"end":{"line":810,"column":25,"offset":16726}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If return type is a pointer to function, UTBot doesn't checking expected value - comparing pointers doesn't make any sense.","position":{"start":{"line":812,"column":5,"offset":16732},"end":{"line":812,"column":128,"offset":16855}}}],"position":{"start":{"line":812,"column":3,"offset":16730},"end":{"line":812,"column":128,"offset":16855}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"We support arrays of pointers to functions also, but 1-dimensional only.","position":{"start":{"line":813,"column":5,"offset":16860},"end":{"line":813,"column":77,"offset":16932}}}],"position":{"start":{"line":813,"column":3,"offset":16858},"end":{"line":813,"column":77,"offset":16932}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If a function takes pointer to another function as parameter, UTBot generates stub for this parameter.","position":{"start":{"line":814,"column":5,"offset":16937},"end":{"line":814,"column":107,"offset":17039}}}],"position":{"start":{"line":814,"column":3,"offset":16935},"end":{"line":814,"column":107,"offset":17039}}},{"type":"text","value":"\n"}],"position":{"start":{"line":812,"column":3,"offset":16730},"end":{"line":814,"column":107,"offset":17039}}},{"type":"text","value":"\n"}],"position":{"start":{"line":812,"column":1,"offset":16728},"end":{"line":814,"column":107,"offset":17039}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/pointers/function_pointers.c#L66"},"children":[{"type":"text","value":"Source code example","position":{"start":{"line":816,"column":2,"offset":17042},"end":{"line":816,"column":21,"offset":17061}}}],"position":{"start":{"line":816,"column":1,"offset":17041},"end":{"line":816,"column":138,"offset":17178}}}],"position":{"start":{"line":816,"column":1,"offset":17041},"end":{"line":816,"column":138,"offset":17178}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"typedef int (*op_func)(int, int);\n\nint f_add(int a, int b) {\n    return a + b;\n}\nint f_sub(int a, int b) {\n    return a - b;\n}\nint f_mul(int a, int b) {\n    return a * b;\n}\n\nop_func return_op(char op) {\n    switch(op) {\n        case '+': return f_add;\n        case '-': return f_sub;\n        case '*': return f_mul;\n    }\n    return NULL;\n}\n\nchar* pointerParam(char* (*f)(int*), int* x) {\n    if (*x == 1) {\n        return f(x);\n    } else{\n        return f(x + 5);\n    }\n}\n"}],"position":{"start":{"line":818,"column":1,"offset":17180},"end":{"line":847,"column":4,"offset":17664}}}],"position":{"start":{"line":818,"column":1,"offset":17180},"end":{"line":847,"column":4,"offset":17664}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details> \n  <summary>Tests code</summary>","position":{"start":{"line":849,"column":1,"offset":17666},"end":{"line":850,"column":32,"offset":17708}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"\nTEST(regression, return_op_test_1)\n{\n// Construct input\nchar op = '*';\n\n// Expected output\n// No output variable check for function returning pointer to function\n\n// Trigger the function\nreturn_op(op);\n\n// Check results\n// No check results for function returning pointer to function\n}\n\nTEST(regression, return_op_test_2)\n{\n// Construct input\nchar op = 'c';\n\n// Expected output\n// No output variable check for function returning pointer to function\n\n// Trigger the function\nreturn_op(op);\n\n// Check results\n// No check results for function returning pointer to function\n}\n\nTEST(regression, return_op_test_3)\n{\n// Construct input\nchar op = '-';\n\n// Expected output\n// No output variable check for function returning pointer to function\n\n// Trigger the function\nreturn_op(op);\n\n// Check results\n// No check results for function returning pointer to function\n}\n\nTEST(regression, return_op_test_4)\n{\n// Construct input\nchar op = '+';\n\n// Expected output\n// No output variable check for function returning pointer to function\n\n// Trigger the function\nreturn_op(op);\n\n// Check results\n// No check results for function returning pointer to function\n}\n\n\ntypedef char * (*pointerParam_f_arg)(int *);\nchar * _pointerParam_f_stub(int * param1) {\nreturn \"\";\n}\n\nTEST(regression, pointerParam_test_1)\n{\n// Construct input\npointerParam_f_arg f = *_pointerParam_f_stub;\nint x = 0;\n\n// Expected output\nchar expected = '\\0';\n\n// Trigger the function\nchar actual = *pointerParam(f, &x);\n\n// Check results\nEXPECT_EQ(expected, actual);\n}\n\nTEST(regression, pointerParam_test_2)\n{\n// Construct input\npointerParam_f_arg f = *_pointerParam_f_stub;\nint x = 1;\n\n// Expected output\nchar expected = '\\0';\n\n// Trigger the function\nchar actual = *pointerParam(f, &x);\n\n// Check results\nEXPECT_EQ(expected, actual);\n}\n\n"}],"position":{"start":{"line":852,"column":1,"offset":17710},"end":{"line":952,"column":4,"offset":19507}}}],"position":{"start":{"line":852,"column":1,"offset":17710},"end":{"line":952,"column":4,"offset":19507}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":954,"column":1,"offset":19509},"end":{"line":954,"column":11,"offset":19519}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Arrays","position":{"start":{"line":956,"column":4,"offset":19524},"end":{"line":956,"column":10,"offset":19530}}}],"position":{"start":{"line":956,"column":1,"offset":19521},"end":{"line":956,"column":10,"offset":19530}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/structures/struct_arrays.c#L18"},"children":[{"type":"text","value":"Source code example","position":{"start":{"line":958,"column":2,"offset":19533},"end":{"line":958,"column":21,"offset":19552}}}],"position":{"start":{"line":958,"column":1,"offset":19532},"end":{"line":958,"column":136,"offset":19667}}}],"position":{"start":{"line":958,"column":1,"offset":19532},"end":{"line":958,"column":136,"offset":19667}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"struct Trio {\n    int a;\n    long long b;\n    short c;\n};\n\nint index_of_struct_with_equal_fields(struct Trio arr []) {\n    for (int i = 0; i < 10; i++) {\n        if (arr[i].a == arr[i].b) {\n            if (arr[i].b == arr[i].c) {\n                return i; \n            }\n        }\n    }\n\n    return -1;\n}\n"}],"position":{"start":{"line":960,"column":1,"offset":19669},"end":{"line":978,"column":4,"offset":19984}}}],"position":{"start":{"line":960,"column":1,"offset":19669},"end":{"line":978,"column":4,"offset":19984}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details> \n  <summary>Tests code</summary>","position":{"start":{"line":980,"column":1,"offset":19986},"end":{"line":981,"column":32,"offset":20028}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"TEST(regression, index_of_struct_with_equal_fields_test_1)\n{\n    // Construct input\n    struct Trio arr[10] = {{0, 1LL, 0}, {0, 4LL, 0}, {0, 1LL, 0}, {0, 2LL, 0}, {0, 8LL, 0}, {0, 8LL, 0}, {0, 4LL, 0}, {0, 4LL, 0}, {0, 1LL, 0}, {0, 1LL, 0}};\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, index_of_struct_with_equal_fields_test_2)\n{\n    // Construct input\n    struct Trio arr[10] = {{0, 1LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}};\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, index_of_struct_with_equal_fields_test_3)\n{\n    // Construct input\n    struct Trio arr[10] = {{0, 1LL, 0}, {8, 8LL, 0}, {2, 2LL, 0}, {0, 2LL, 0}, {1, 1LL, 0}, {1, 1LL, 0}, {0, 4LL, 0}, {1, 1LL, 0}, {0, 1LL, 0}, {2, 2LL, 0}};\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, index_of_struct_with_equal_fields_test_4)\n{\n    // Construct input\n    struct Trio arr[10] = {{2, 2LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}};\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, index_of_struct_with_equal_fields_test_5)\n{\n    // Construct input\n    struct Trio arr[10] = {{0, 1LL, 0}, {0, 4LL, 0}, {0, 1LL, 0}, {2, 2LL, 0}, {0, 8LL, 0}, {0, 8LL, 0}, {0, 4LL, 0}, {0, 4LL, 0}, {2, 2LL, 0}, {2, 2LL, 0}};\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, index_of_struct_with_equal_fields_test_6)\n{\n    // Construct input\n    struct Trio arr[10] = {{0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}};\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n"}],"position":{"start":{"line":983,"column":1,"offset":20030},"end":{"line":1073,"column":4,"offset":22634}}}],"position":{"start":{"line":983,"column":1,"offset":20030},"end":{"line":1073,"column":4,"offset":22634}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":1075,"column":1,"offset":22636},"end":{"line":1075,"column":11,"offset":22646}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Multidimensional arrays and pointers","position":{"start":{"line":1077,"column":4,"offset":22651},"end":{"line":1077,"column":40,"offset":22687}}}],"position":{"start":{"line":1077,"column":1,"offset":22648},"end":{"line":1077,"column":40,"offset":22687}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Arrays of any dimensions are supported, but as for pointers, only 1-d and 2-d are supported.","position":{"start":{"line":1079,"column":3,"offset":22691},"end":{"line":1079,"column":95,"offset":22783}}}],"position":{"start":{"line":1079,"column":3,"offset":22691},"end":{"line":1079,"column":95,"offset":22783}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1079,"column":1,"offset":22689},"end":{"line":1079,"column":95,"offset":22783}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/multi_arrays.c#L67"},"children":[{"type":"text","value":"Source code example","position":{"start":{"line":1081,"column":2,"offset":22786},"end":{"line":1081,"column":21,"offset":22805}}}],"position":{"start":{"line":1081,"column":1,"offset":22785},"end":{"line":1081,"column":124,"offset":22908}}}],"position":{"start":{"line":1081,"column":1,"offset":22785},"end":{"line":1081,"column":124,"offset":22908}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"int some_method(int ** pointer2d) {\n    int x = 2;\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            if (pointer2d[i][j] > 0) {\n                return i * 2 + j;\n            }\n        }\n    }\n    return -1;\n}\n"}],"position":{"start":{"line":1083,"column":1,"offset":22910},"end":{"line":1095,"column":4,"offset":23163}}}],"position":{"start":{"line":1083,"column":1,"offset":22910},"end":{"line":1095,"column":4,"offset":23163}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details> \n  <summary>Tests code</summary>","position":{"start":{"line":1097,"column":1,"offset":23165},"end":{"line":1098,"column":32,"offset":23207}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"TEST(regression, some_method_test_1)\n{\n    // Construct input\n    int _pointer2d[2][2] = {{0, 0}, {0, 0}};\n    int ** pointer2d = (int **) calloc(3, sizeof(int *));\n    for (int it_9_0 = 0; it_9_0 < 2; it_9_0 ++) {\n        pointer2d[it_9_0] = _pointer2d[it_9_0];\n    }\n    pointer2d[2] = NULL;\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = some_method(pointer2d);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, some_method_test_2)\n{\n    // Construct input\n    int _pointer2d[2][2] = {{0, 1}, {0, 0}};\n    int ** pointer2d = (int **) calloc(3, sizeof(int *));\n    for (int it_9_0 = 0; it_9_0 < 2; it_9_0 ++) {\n        pointer2d[it_9_0] = _pointer2d[it_9_0];\n    }\n    pointer2d[2] = NULL;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = some_method(pointer2d);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, some_method_test_3)\n{\n    // Construct input\n    int _pointer2d[2][2] = {{0, 0}, {1, 0}};\n    int ** pointer2d = (int **) calloc(3, sizeof(int *));\n    for (int it_9_0 = 0; it_9_0 < 2; it_9_0 ++) {\n        pointer2d[it_9_0] = _pointer2d[it_9_0];\n    }\n    pointer2d[2] = NULL;\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = some_method(pointer2d);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, some_method_test_4)\n{\n    // Construct input\n    int _pointer2d[2][2] = {{1, 0}, {0, 0}};\n    int ** pointer2d = (int **) calloc(3, sizeof(int *));\n    for (int it_9_0 = 0; it_9_0 < 2; it_9_0 ++) {\n        pointer2d[it_9_0] = _pointer2d[it_9_0];\n    }\n    pointer2d[2] = NULL;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = some_method(pointer2d);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n"}],"position":{"start":{"line":1100,"column":1,"offset":23209},"end":{"line":1180,"column":4,"offset":25091}}}],"position":{"start":{"line":1100,"column":1,"offset":23209},"end":{"line":1180,"column":4,"offset":25091}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":1182,"column":1,"offset":25093},"end":{"line":1182,"column":11,"offset":25103}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Enums","position":{"start":{"line":1184,"column":4,"offset":25108},"end":{"line":1184,"column":9,"offset":25113}}}],"position":{"start":{"line":1184,"column":1,"offset":25105},"end":{"line":1184,"column":9,"offset":25113}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/structures/enums.c#L9"},"children":[{"type":"text","value":"Source code example","position":{"start":{"line":1186,"column":2,"offset":25116},"end":{"line":1186,"column":21,"offset":25135}}}],"position":{"start":{"line":1186,"column":1,"offset":25115},"end":{"line":1186,"column":127,"offset":25241}}}],"position":{"start":{"line":1186,"column":1,"offset":25115},"end":{"line":1186,"column":127,"offset":25241}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"enum Sign {\n    NEGATIVE,\n    ZERO,\n    POSITIVE\n};\n\n\nint enumSignToInt(enum Sign s) {\n    if (s == ZERO) {\n      return 0;\n    }\n    if (s == NEGATIVE) {\n        return -1;\n    } else {\n        return 1;\n    } \n}\n\nint enumSignPointerToInt(enum Sign *s) {\n    return enumSignToInt(*s);\n}\n"}],"position":{"start":{"line":1188,"column":1,"offset":25243},"end":{"line":1210,"column":4,"offset":25541}}}],"position":{"start":{"line":1188,"column":1,"offset":25243},"end":{"line":1210,"column":4,"offset":25541}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details> \n  <summary>Tests code</summary>","position":{"start":{"line":1212,"column":1,"offset":25543},"end":{"line":1213,"column":32,"offset":25585}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"TEST(regression, enumSignToInt_test_1)\n{\n    // Construct input\n    enum Sign s = POSITIVE;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = enumSignToInt(s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, enumSignToInt_test_2)\n{\n    // Construct input\n    enum Sign s = NEGATIVE;\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = enumSignToInt(s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, enumSignToInt_test_3)\n{\n    // Construct input\n    enum Sign s = ZERO;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = enumSignToInt(s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\n\nTEST(regression, enumSignPointerToInt_test_1)\n{\n    // Construct input\n    enum Sign s = NEGATIVE;\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = enumSignPointerToInt(&s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, enumSignPointerToInt_test_2)\n{\n    // Construct input\n    enum Sign s = POSITIVE;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = enumSignPointerToInt(&s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, enumSignPointerToInt_test_3)\n{\n    // Construct input\n    enum Sign s = ZERO;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = enumSignPointerToInt(&s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n"}],"position":{"start":{"line":1215,"column":1,"offset":25587},"end":{"line":1306,"column":4,"offset":27196}}}],"position":{"start":{"line":1215,"column":1,"offset":25587},"end":{"line":1306,"column":4,"offset":27196}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":1308,"column":1,"offset":27198},"end":{"line":1308,"column":11,"offset":27208}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Typedef","position":{"start":{"line":1310,"column":4,"offset":27213},"end":{"line":1310,"column":11,"offset":27220}}}],"position":{"start":{"line":1310,"column":1,"offset":27210},"end":{"line":1310,"column":11,"offset":27220}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/typedefs_1.c#L20"},"children":[{"type":"text","value":"Source code example","position":{"start":{"line":1312,"column":2,"offset":27223},"end":{"line":1312,"column":21,"offset":27242}}}],"position":{"start":{"line":1312,"column":1,"offset":27222},"end":{"line":1312,"column":128,"offset":27349}}}],"position":{"start":{"line":1312,"column":1,"offset":27222},"end":{"line":1312,"column":128,"offset":27349}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"typedef struct __typeDefStruct {\n    int a;\n} TypeDefStruct2;\n\nint sign_of_typedef_struct2(TypeDefStruct2 x) {\n    if (x.a > 0) {\n        return 1;\n    }\n\n    if (x.a < 0) {\n        return -1;\n    }\n\n    return 0;\n}\n"}],"position":{"start":{"line":1314,"column":1,"offset":27351},"end":{"line":1330,"column":4,"offset":27577}}}],"position":{"start":{"line":1314,"column":1,"offset":27351},"end":{"line":1330,"column":4,"offset":27577}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details> \n  <summary>Tests code</summary>","position":{"start":{"line":1332,"column":1,"offset":27579},"end":{"line":1333,"column":32,"offset":27621}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"TEST(regression, sign_of_typedef_struct2_test_1)\n{\n    // Construct input\n    TypeDefStruct2 x = {0};\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = sign_of_typedef_struct2(x);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, sign_of_typedef_struct2_test_2)\n{\n    // Construct input\n    TypeDefStruct2 x = {-10};\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = sign_of_typedef_struct2(x);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, sign_of_typedef_struct2_test_3)\n{\n    // Construct input\n    TypeDefStruct2 x = {1};\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = sign_of_typedef_struct2(x);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n"}],"position":{"start":{"line":1335,"column":1,"offset":27623},"end":{"line":1380,"column":4,"offset":28475}}}],"position":{"start":{"line":1335,"column":1,"offset":27623},"end":{"line":1380,"column":4,"offset":28475}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":1382,"column":1,"offset":28477},"end":{"line":1382,"column":11,"offset":28487}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Static functions","position":{"start":{"line":1384,"column":4,"offset":28492},"end":{"line":1384,"column":20,"offset":28508}}}],"position":{"start":{"line":1384,"column":1,"offset":28489},"end":{"line":1384,"column":20,"offset":28508}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/static.c#L8"},"children":[{"type":"text","value":"Source code example","position":{"start":{"line":1386,"column":2,"offset":28511},"end":{"line":1386,"column":21,"offset":28530}}}],"position":{"start":{"line":1386,"column":1,"offset":28510},"end":{"line":1386,"column":117,"offset":28626}}}],"position":{"start":{"line":1386,"column":1,"offset":28510},"end":{"line":1386,"column":117,"offset":28626}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"static int static_simple(int dx)\n{\n    if (x > 0)\n    {\n        return x + dx;\n    }\n    if (x < 0)\n    {\n        return -x + dx;\n    }\n    return 0;\n}\n"}],"position":{"start":{"line":1388,"column":1,"offset":28628},"end":{"line":1401,"column":4,"offset":28790}}}],"position":{"start":{"line":1388,"column":1,"offset":28628},"end":{"line":1401,"column":4,"offset":28790}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details> \n  <summary>Tests code</summary>","position":{"start":{"line":1403,"column":1,"offset":28792},"end":{"line":1404,"column":32,"offset":28834}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"TEST(regression, static_simple_test_1)\n{\n    // Initialize global variables\n    x = 0;\n\n    // Construct input\n    int dx = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = static_simple(dx);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    int expected_x = 0;\n    EXPECT_EQ(expected_x, x);\n}\n\nTEST(regression, static_simple_test_2)\n{\n    // Initialize global variables\n    x = -10;\n\n    // Construct input\n    int dx = -10;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = static_simple(dx);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    int expected_x = -10;\n    EXPECT_EQ(expected_x, x);\n}\n\nTEST(regression, static_simple_test_3)\n{\n    // Initialize global variables\n    x = 1;\n\n    // Construct input\n    int dx = -1;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = static_simple(dx);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    int expected_x = 1;\n    EXPECT_EQ(expected_x, x);\n}\n"}],"position":{"start":{"line":1406,"column":1,"offset":28836},"end":{"line":1469,"column":4,"offset":29992}}}],"position":{"start":{"line":1406,"column":1,"offset":28836},"end":{"line":1469,"column":4,"offset":29992}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":1471,"column":1,"offset":29994},"end":{"line":1471,"column":11,"offset":30004}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Qualifiers: const, volatile, restrict etc.","position":{"start":{"line":1473,"column":4,"offset":30009},"end":{"line":1473,"column":46,"offset":30051}}}],"position":{"start":{"line":1473,"column":1,"offset":30006},"end":{"line":1473,"column":46,"offset":30051}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/keywords/qualifiers.c#L49"},"children":[{"type":"text","value":"Source code example","position":{"start":{"line":1475,"column":2,"offset":30054},"end":{"line":1475,"column":21,"offset":30073}}}],"position":{"start":{"line":1475,"column":1,"offset":30053},"end":{"line":1475,"column":131,"offset":30183}}}],"position":{"start":{"line":1475,"column":1,"offset":30053},"end":{"line":1475,"column":131,"offset":30183}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"const char * const foo_bar(volatile int a) {\n    if (a < 0) {\n        return \"-1\";\n    } else if (a == 0) {\n        return \"0\";\n    } else {\n        return \"1\";\n    }\n}\n"}],"position":{"start":{"line":1477,"column":1,"offset":30185},"end":{"line":1487,"column":4,"offset":30364}}}],"position":{"start":{"line":1477,"column":1,"offset":30185},"end":{"line":1487,"column":4,"offset":30364}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details> \n  <summary>Tests code</summary>","position":{"start":{"line":1489,"column":1,"offset":30366},"end":{"line":1490,"column":32,"offset":30408}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"TEST(regression, foo_bar_test_1)\n{\n    // Construct input\n    int a = 2;\n\n    // Expected output\n    char expected = '1';\n\n    // Trigger the function\n    const char actual = *foo_bar(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, foo_bar_test_2)\n{\n    // Construct input\n    int a = 0;\n\n    // Expected output\n    char expected = '0';\n\n    // Trigger the function\n    const char actual = *foo_bar(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, foo_bar_test_3)\n{\n    // Construct input\n    int a = -1;\n\n    // Expected output\n    char expected = '-';\n\n    // Trigger the function\n    const char actual = *foo_bar(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n"}],"position":{"start":{"line":1492,"column":1,"offset":30410},"end":{"line":1537,"column":4,"offset":31158}}}],"position":{"start":{"line":1492,"column":1,"offset":30410},"end":{"line":1537,"column":4,"offset":31158}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":1539,"column":1,"offset":31160},"end":{"line":1539,"column":11,"offset":31170}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Global variables","position":{"start":{"line":1541,"column":4,"offset":31175},"end":{"line":1541,"column":20,"offset":31191}}}],"position":{"start":{"line":1541,"column":1,"offset":31172},"end":{"line":1541,"column":20,"offset":31191}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/globals.c#L64"},"children":[{"type":"text","value":"Source code example","position":{"start":{"line":1543,"column":2,"offset":31194},"end":{"line":1543,"column":21,"offset":31213}}}],"position":{"start":{"line":1543,"column":1,"offset":31193},"end":{"line":1543,"column":119,"offset":31311}}}],"position":{"start":{"line":1543,"column":1,"offset":31193},"end":{"line":1543,"column":119,"offset":31311}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"static char* global_mutable_string;\nstatic const char* global_const_string;\n\n\nchar use_global_strings() {\n    if (!global_mutable_string) {\n        return 'M';\n    }\n    if (!global_const_string) {\n        return 'C';\n    }\n    char c = global_const_string[0];\n    char res;\n    if (c >= 'a' && c <= 'z') {\n        res = 'A' + c - 'a';\n    } else {\n        res = c;\n    }\n    global_mutable_string[0] = res;\n    return res;\n}\n"}],"position":{"start":{"line":1545,"column":1,"offset":31313},"end":{"line":1567,"column":4,"offset":31749}}}],"position":{"start":{"line":1545,"column":1,"offset":31313},"end":{"line":1567,"column":4,"offset":31749}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details> \n  <summary>Tests code</summary>","position":{"start":{"line":1569,"column":1,"offset":31751},"end":{"line":1570,"column":32,"offset":31793}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"TEST(regression, use_global_strings_test_1)\n{\n    // Initialize global variables\n    char global_mutable_string_buffer[] = \"ccacccbbbc\";\n    global_mutable_string = global_mutable_string_buffer;\n    char global_const_string_buffer[] = \"{ccaccccc{\";\n    global_const_string = global_const_string_buffer;\n\n\n    // Expected output\n    char expected = '{';\n\n    // Trigger the function\n    char actual = use_global_strings();\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    char expected_global_mutable_string = '{';\n    EXPECT_EQ(expected_global_mutable_string, (*global_mutable_string));\n    char expected_global_const_string = '{';\n    EXPECT_EQ(expected_global_const_string, (*global_const_string));\n}\n\nTEST(regression, use_global_strings_test_2)\n{\n    // Initialize global variables\n    char global_mutable_string_buffer[] = \"ccacccbbbc\";\n    global_mutable_string = global_mutable_string_buffer;\n    char global_const_string_buffer[] = \"cccacccccc\";\n    global_const_string = global_const_string_buffer;\n\n\n    // Expected output\n    char expected = 'C';\n\n    // Trigger the function\n    char actual = use_global_strings();\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    char expected_global_mutable_string = 'C';\n    EXPECT_EQ(expected_global_mutable_string, (*global_mutable_string));\n    char expected_global_const_string = 'c';\n    EXPECT_EQ(expected_global_const_string, (*global_const_string));\n}\n\nTEST(regression, use_global_strings_test_3)\n{\n    // Initialize global variables\n    char global_mutable_string_buffer[] = \"ccacccbbbc\";\n    global_mutable_string = global_mutable_string_buffer;\n    char global_const_string_buffer[] = \"\";\n    global_const_string = global_const_string_buffer;\n\n\n    // Expected output\n    char expected = '\\0';\n\n    // Trigger the function\n    char actual = use_global_strings();\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    char expected_global_mutable_string = '\\0';\n    EXPECT_EQ(expected_global_mutable_string, (*global_mutable_string));\n    char expected_global_const_string = '\\0';\n    EXPECT_EQ(expected_global_const_string, (*global_const_string));\n}\n"}],"position":{"start":{"line":1572,"column":1,"offset":31795},"end":{"line":1644,"column":4,"offset":34029}}}],"position":{"start":{"line":1572,"column":1,"offset":31795},"end":{"line":1644,"column":4,"offset":34029}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":1646,"column":1,"offset":34031},"end":{"line":1646,"column":11,"offset":34041}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Inline assembly","position":{"start":{"line":1648,"column":4,"offset":34046},"end":{"line":1648,"column":19,"offset":34061}}}],"position":{"start":{"line":1648,"column":1,"offset":34043},"end":{"line":1648,"column":19,"offset":34061}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/inline_asm.c#L6"},"children":[{"type":"text","value":"Source code example","position":{"start":{"line":1650,"column":2,"offset":34064},"end":{"line":1650,"column":21,"offset":34083}}}],"position":{"start":{"line":1650,"column":1,"offset":34063},"end":{"line":1650,"column":121,"offset":34183}}}],"position":{"start":{"line":1650,"column":1,"offset":34063},"end":{"line":1650,"column":121,"offset":34183}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"int asm_example(int a) {\n    if (a == 42) {\n        return -1;\n    }\n    asm(\"addl  $5, %0\" : \"+r\"(a));\n    return a;\n}\n"}],"position":{"start":{"line":1652,"column":1,"offset":34185},"end":{"line":1660,"column":4,"offset":34315}}}],"position":{"start":{"line":1652,"column":1,"offset":34185},"end":{"line":1660,"column":4,"offset":34315}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details> \n  <summary>Tests code</summary>","position":{"start":{"line":1662,"column":1,"offset":34317},"end":{"line":1663,"column":32,"offset":34359}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"TEST(regression, asm_example_test_1)\n{\n    int actual = asm_example(42);\n    EXPECT_EQ(-1, actual);\n}\n\nTEST(regression, asm_example_test_2)\n{\n    int actual = asm_example(0);\n    EXPECT_EQ(5, actual);\n}\n"}],"position":{"start":{"line":1665,"column":1,"offset":34361},"end":{"line":1677,"column":4,"offset":34574}}}],"position":{"start":{"line":1665,"column":1,"offset":34361},"end":{"line":1677,"column":4,"offset":34574}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":1679,"column":1,"offset":34576},"end":{"line":1679,"column":11,"offset":34586}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1679,"column":11,"offset":34586}}}}