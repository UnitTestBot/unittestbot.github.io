{"expireTime":9007200911767383000,"key":"transformer-remark-markdown-html-ast-682bac7107e58a0ec4158460a53af7e6--","val":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Compile database","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":19,"offset":19}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":19,"offset":19}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When C/C++ project is opened in VS Code with UTBot plugin enabled, the plugin tries to obtain information about the\nproject structure. UTBot needs this information to create sources‚Äô ASTs with clang-tooling and to rebuild the project in\nLLVM IR. LLVM has a special format, designed to store project information (i.e. compilation database) ‚Äî\n","position":{"start":{"line":4,"column":1,"offset":21},"end":{"line":7,"column":1,"offset":362}}},{"type":"element","tagName":"a","properties":{"href":"https://clang.llvm.org/docs/LibTooling.html"},"children":[{"type":"text","value":"compile_commands.json","position":{"start":{"line":7,"column":2,"offset":363},"end":{"line":7,"column":23,"offset":384}}}],"position":{"start":{"line":7,"column":1,"offset":362},"end":{"line":7,"column":69,"offset":430}}},{"type":"text","value":". There are various ways to obtain\ncompile_commands.json:","position":{"start":{"line":7,"column":69,"offset":430},"end":{"line":8,"column":23,"offset":487}}}],"position":{"start":{"line":4,"column":1,"offset":21},"end":{"line":8,"column":23,"offset":487}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If a project is built with CMake, one can pass CMAKE_EXPORT_COMPILE_COMMANDS=ON option to it;","position":{"start":{"line":10,"column":3,"offset":491},"end":{"line":10,"column":96,"offset":584}}}],"position":{"start":{"line":10,"column":1,"offset":489},"end":{"line":10,"column":96,"offset":584}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"One can run the ","position":{"start":{"line":11,"column":3,"offset":587},"end":{"line":11,"column":19,"offset":603}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/rizsotto/Bear"},"children":[{"type":"text","value":"Bear tool","position":{"start":{"line":11,"column":20,"offset":604},"end":{"line":11,"column":29,"offset":613}}}],"position":{"start":{"line":11,"column":19,"offset":603},"end":{"line":11,"column":64,"offset":648}}},{"type":"text","value":". Bear is able to create compile_commands.json by\nanalysing Makefile commands, hence, Bear can be used if make command can be applied to a project.","position":{"start":{"line":11,"column":64,"offset":648},"end":{"line":12,"column":100,"offset":797}}}],"position":{"start":{"line":11,"column":1,"offset":585},"end":{"line":12,"column":100,"offset":797}}},{"type":"text","value":"\n"}],"position":{"start":{"line":10,"column":1,"offset":489},"end":{"line":12,"column":100,"offset":797}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Unfortunately, compile_commands.json only contains information about compilation of individual source files. That is not\nsufficient to determine function behaviour. Consider a function ùëì, which calls a function ùëî in its body, while ùëî is\nspecified by an external symbol. The definition of ùëî can be provided to ùëì if an artifact containing ùëì is linked with\nthe artifact containing ùëî. If there are multiple functions ùëî in the project, it is impossible to determine, which\nfunction is used by ùëì, with only compile commands. To find a solution, a new format was invented ‚Äî link_commands.json.\nIt shares the way of representing data with compile_commands.json, but holds information from project link commands. A\nlink_commands.json example can be viewed bellow. With this information, it is easy to solve the mentioned problem ‚Äî one\nhas to look up for a pair of artifacts containing ùëì and ùëî, which are linked together while the project builds. UTBot\nneeded to be able to retrieve both compile and link information from a project. The vast majority of C/C++ projects are\nbuilt with either CMake or Makefile build systems. UTBot supports both of these, using the following approach:","position":{"start":{"line":14,"column":1,"offset":799},"end":{"line":23,"column":111,"offset":1983}}}],"position":{"start":{"line":14,"column":1,"offset":799},"end":{"line":23,"column":111,"offset":1983}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-json"]},"children":[{"type":"text","value":"[\n  {\n    \"command\": \"/usr/bin/ar qc liblib.a CMakeFiles/lib.dir/file3.c.o\",\n    \"directory\": \"c-example/build\",\n    \"files\": [\n      \"c-example/build/CMakeFiles/lib.dir/file3.c.o\"\n    ]\n  },\n  {\n    \"command\": \"clang -fuse-ld=gold CMakeFiles/exe2.dir/file4.c.o -o exe2  liblib.a\",\n    \"directory\": \"c-example/build\",\n    \"files\": [\n      \"c-example/build/CMakeFiles/exe2.dir/file4.c.o\",\n      \"c-example/build/liblib.a\"\n    ]\n  },\n  {\n    \"command\": \"/usr/bin/ar qc libhelper.a CMakeFiles/helper.dir/file1.c.o\",\n    \"directory\": \"c-example/build\",\n    \"files\": [\n      \"c-example/build/CMakeFiles/helper.dir/file1.c.o\"\n    ]\n  },\n  {\n    \"command\": \"clang -fuse-ld=gold CMakeFiles/exe1.dir/file2.c.o -o exe1 libhelper.a liblib.a\",\n    \"directory\": \"c-example/build\",\n    \"files\": [\n      \"c-example/build/CMakeFiles/exe1.dir/file2.c.o\",\n      \"c-example/build/libhelper.a\",\n      \"c-example/build/liblib.a\"\n    ]\n  }\n]\n"}],"position":{"start":{"line":25,"column":1,"offset":1985},"end":{"line":59,"column":4,"offset":2916}}}],"position":{"start":{"line":25,"column":1,"offset":1985},"end":{"line":59,"column":4,"offset":2916}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If a given project is a CMake project, UTBot prompts user to invoke a cmake command on it, generating Makefiles (or\noffers to automatically do it by itself). From now on, all projects can be treated as projects which are built with\nthe use of Makefiles;","position":{"start":{"line":61,"column":4,"offset":2921},"end":{"line":63,"column":25,"offset":3180}}}],"position":{"start":{"line":61,"column":1,"offset":2918},"end":{"line":63,"column":25,"offset":3180}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"UTBot applies Bear to project Makefiles. Bear is able to create compile_commands.json, and it was patched, so it is\nable to construct link_commands.json as well.","position":{"start":{"line":64,"column":4,"offset":3184},"end":{"line":65,"column":49,"offset":3348}}}],"position":{"start":{"line":64,"column":1,"offset":3181},"end":{"line":65,"column":49,"offset":3348}}},{"type":"text","value":"\n"}],"position":{"start":{"line":61,"column":1,"offset":2918},"end":{"line":65,"column":49,"offset":3348}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The approach scheme can be viewed on scheme bellow, with algorithm steps highlighted with blue arrows.","position":{"start":{"line":67,"column":1,"offset":3350},"end":{"line":67,"column":103,"offset":3452}}}],"position":{"start":{"line":67,"column":1,"offset":3350},"end":{"line":67,"column":103,"offset":3452}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/jsons.png","alt":"jsons"},"children":[],"position":{"start":{"line":69,"column":1,"offset":3454},"end":{"line":69,"column":101,"offset":3554}}}],"position":{"start":{"line":69,"column":1,"offset":3454},"end":{"line":69,"column":101,"offset":3554}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":71,"column":1,"offset":3556}}}}