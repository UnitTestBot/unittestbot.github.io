{"expireTime":9007200911767383000,"key":"transformer-remark-markdown-html-ast-684ed159fef8dce6d9722f614f954b83--","val":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Symbolic stdin","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":17,"offset":17}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":17,"offset":17}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"UTBot is able to generate tests for C code that reads values from ","position":{"start":{"line":4,"column":1,"offset":19},"end":{"line":4,"column":67,"offset":85}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"stdin","position":{"start":{"line":4,"column":69,"offset":87},"end":{"line":4,"column":74,"offset":92}}}],"position":{"start":{"line":4,"column":67,"offset":85},"end":{"line":4,"column":76,"offset":94}}},{"type":"text","value":", ","position":{"start":{"line":4,"column":76,"offset":94},"end":{"line":4,"column":78,"offset":96}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"file descriptor","position":{"start":{"line":4,"column":80,"offset":98},"end":{"line":4,"column":95,"offset":113}}}],"position":{"start":{"line":4,"column":78,"offset":96},"end":{"line":4,"column":97,"offset":115}}},{"type":"text","value":" or ","position":{"start":{"line":4,"column":97,"offset":115},"end":{"line":4,"column":101,"offset":119}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"STDIN_FILENO","position":{"start":{"line":4,"column":103,"offset":121},"end":{"line":4,"column":115,"offset":133}}}],"position":{"start":{"line":4,"column":101,"offset":119},"end":{"line":4,"column":117,"offset":135}}},{"type":"text","value":".\nUTBot marks read values as symbolic, generates tests, puts the needed data into a C-string buffer and redirects **\nstdin** to the buffer so tests can be executed properly.","position":{"start":{"line":4,"column":117,"offset":135},"end":{"line":6,"column":57,"offset":308}}}],"position":{"start":{"line":4,"column":1,"offset":19},"end":{"line":6,"column":57,"offset":308}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is an example of a function that reads values from stdin:","position":{"start":{"line":8,"column":1,"offset":310},"end":{"line":8,"column":63,"offset":372}}}],"position":{"start":{"line":8,"column":1,"offset":310},"end":{"line":8,"column":63,"offset":372}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/UnitTestBot/UTBotCpp/blob/main/integration-tests/c-example/lib/symbolic_stdin.c"},"children":[{"type":"text","value":"Source code example","position":{"start":{"line":10,"column":9,"offset":382},"end":{"line":10,"column":28,"offset":401}}}],"position":{"start":{"line":10,"column":8,"offset":381},"end":{"line":10,"column":129,"offset":502}}}],"position":{"start":{"line":10,"column":1,"offset":374},"end":{"line":10,"column":129,"offset":502}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"int check_password(int fd) {\n  char buf[5];\n  if (read(fd, buf, 5) != -1) {\n    if (buf[0] == 'h' && buf[1] == 'e' &&\n\tbuf[2] == 'l' && buf[3] == 'l' &&\n\tbuf[4] == 'o')\n      return 1;\n  }\n  return 0;\n}\n"}],"position":{"start":{"line":12,"column":1,"offset":504},"end":{"line":23,"column":4,"offset":717}}}],"position":{"start":{"line":12,"column":1,"offset":504},"end":{"line":23,"column":4,"offset":717}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Redirecting stdin","position":{"start":{"line":25,"column":8,"offset":726},"end":{"line":25,"column":25,"offset":743}}}],"position":{"start":{"line":25,"column":1,"offset":719},"end":{"line":25,"column":25,"offset":743}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"void utbot_redirect_stdin(const char* buf, int &res) {\n    int fds[2];\n    if (pipe(fds) == -1) {\n        res = -1;\n        return;\n    }\n    close(STDIN_FILENO);\n    dup2(fds[0], STDIN_FILENO);\n    write(fds[1], buf, 64);\n    close(fds[1]);\n}\n"}],"position":{"start":{"line":27,"column":1,"offset":745},"end":{"line":39,"column":4,"offset":999}}}],"position":{"start":{"line":27,"column":1,"offset":745},"end":{"line":39,"column":4,"offset":999}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h6","properties":{},"children":[{"type":"text","value":"Tests code example","position":{"start":{"line":41,"column":8,"offset":1008},"end":{"line":41,"column":26,"offset":1026}}}],"position":{"start":{"line":41,"column":1,"offset":1001},"end":{"line":41,"column":26,"offset":1026}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-cpp"]},"children":[{"type":"text","value":"TEST(regression, check_password_test_1)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"hello\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_2)\n{\n    // Construct input\n    int fd = 1;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_3)\n{\n    // Construct input\n    int fd = 3;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_4)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"\\x97\"\"\\x97\"\"\\x97\"\"\\x97\"\"\\x97\"\"\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_5)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"he\\0\"\"hh\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_6)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"hell\\0\"\"\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_7)\n{\n    // Construct input\n    int fd = 1024;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_8)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"h\\0\"\"hhh\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_9)\n{\n    // Construct input\n    int fd = -1;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_10)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"hel\\0\"\"h\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n"}],"position":{"start":{"line":43,"column":1,"offset":1028},"end":{"line":235,"column":4,"offset":5137}}}],"position":{"start":{"line":43,"column":1,"offset":1028},"end":{"line":235,"column":4,"offset":5137}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":235,"column":4,"offset":5137}}}}