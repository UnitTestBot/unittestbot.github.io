{"expireTime":9007200910765524000,"key":"gatsby-plugin-mdx-entire-payload-ade858b5a6005a77258c23ff12509549-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/home/runner/work/unittestbot.github.io/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":140,"offset":141},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":143},"end":{"line":5,"column":29,"offset":171},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Configuring Project","position":{"start":{"line":8,"column":3,"offset":176},"end":{"line":8,"column":22,"offset":195},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":174},"end":{"line":8,"column":22,"offset":195},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When you initialize your C project with UTBot Wizard, extension will suggest you to configure project. Also, you may\nconfigure project afterwards using command ","position":{"start":{"line":10,"column":1,"offset":197},"end":{"line":11,"column":44,"offset":357},"indent":[1]}},{"type":"inlineCode","value":"UTBot: Configure project","position":{"start":{"line":11,"column":44,"offset":357},"end":{"line":11,"column":70,"offset":383},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":11,"column":70,"offset":383},"end":{"line":11,"column":74,"offset":387},"indent":[]}},{"type":"inlineCode","value":"UTBot: Reset cache and configure project","position":{"start":{"line":11,"column":74,"offset":387},"end":{"line":11,"column":116,"offset":429},"indent":[]}},{"type":"text","value":" in\npallet.","position":{"start":{"line":11,"column":116,"offset":429},"end":{"line":12,"column":8,"offset":440},"indent":[1]}}],"position":{"start":{"line":10,"column":1,"offset":197},"end":{"line":12,"column":8,"offset":440},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Project Configuration Steps","position":{"start":{"line":14,"column":4,"offset":445},"end":{"line":14,"column":31,"offset":472},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":442},"end":{"line":14,"column":31,"offset":472},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Check Build Folder for exist","position":{"start":{"line":16,"column":5,"offset":478},"end":{"line":16,"column":33,"offset":506},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":474},"end":{"line":16,"column":33,"offset":506},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Firstly, if build folder is missing, extension will offer you to create that. In case you haven't done it yet, you may\nclick ","position":{"start":{"line":18,"column":1,"offset":508},"end":{"line":19,"column":7,"offset":633},"indent":[1]}},{"type":"inlineCode","value":"Create build folder","position":{"start":{"line":19,"column":7,"offset":633},"end":{"line":19,"column":28,"offset":654},"indent":[]}},{"type":"text","value":" button. UTBot will create that on host machine (as well as ","position":{"start":{"line":19,"column":28,"offset":654},"end":{"line":19,"column":88,"offset":714},"indent":[]}},{"type":"inlineCode","value":"bear.sh","position":{"start":{"line":19,"column":88,"offset":714},"end":{"line":19,"column":97,"offset":723},"indent":[]}},{"type":"text","value":" script within).","position":{"start":{"line":19,"column":97,"offset":723},"end":{"line":19,"column":113,"offset":739},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":508},"end":{"line":19,"column":113,"offset":739},"indent":[1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/configureCheckBuildFolder.png","alt":"configureCheckBuildFolderImg","position":{"start":{"line":21,"column":1,"offset":741},"end":{"line":21,"column":144,"offset":884},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":741},"end":{"line":21,"column":144,"offset":884},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Export Project Model","position":{"start":{"line":23,"column":5,"offset":890},"end":{"line":23,"column":25,"offset":910},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":886},"end":{"line":23,"column":25,"offset":910},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Then, you will be asked to configure project. In case you haven't done it yet, you may click 'Configure' button. UTBot\nwill call ","position":{"start":{"line":25,"column":1,"offset":912},"end":{"line":26,"column":11,"offset":1041},"indent":[1]}},{"type":"inlineCode","value":"cmake","position":{"start":{"line":26,"column":11,"offset":1041},"end":{"line":26,"column":18,"offset":1048},"indent":[]}},{"type":"text","value":" command for CMake project. It also will pass root directory and CMake options specified in wizard.\nNext, regardless of project's type UTBot will try to call ","position":{"start":{"line":26,"column":18,"offset":1048},"end":{"line":27,"column":59,"offset":1206},"indent":[1]}},{"type":"inlineCode","value":"./bear.sh make","position":{"start":{"line":27,"column":59,"offset":1206},"end":{"line":27,"column":75,"offset":1222},"indent":[]}},{"type":"text","value":" from build directory. If everything is\nsuccessful, two files will be created in build directory ","position":{"start":{"line":27,"column":75,"offset":1222},"end":{"line":28,"column":58,"offset":1319},"indent":[1]}},{"type":"inlineCode","value":"compile_commands.json","position":{"start":{"line":28,"column":58,"offset":1319},"end":{"line":28,"column":81,"offset":1342},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":28,"column":81,"offset":1342},"end":{"line":28,"column":86,"offset":1347},"indent":[]}},{"type":"inlineCode","value":"link_commands.json","position":{"start":{"line":28,"column":86,"offset":1347},"end":{"line":28,"column":106,"offset":1367},"indent":[]}},{"type":"text","value":". Or,\nalternatively, you may run ","position":{"start":{"line":28,"column":106,"offset":1367},"end":{"line":29,"column":28,"offset":1400},"indent":[1]}},{"type":"inlineCode","value":"./bear.sh","position":{"start":{"line":29,"column":28,"offset":1400},"end":{"line":29,"column":39,"offset":1411},"indent":[]}},{"type":"text","value":" from create build directory with your build command as argument. For\nexample, ","position":{"start":{"line":29,"column":39,"offset":1411},"end":{"line":30,"column":10,"offset":1490},"indent":[1]}},{"type":"inlineCode","value":"./bear.sh make -j8","position":{"start":{"line":30,"column":10,"offset":1490},"end":{"line":30,"column":30,"offset":1510},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":30,"column":30,"offset":1510},"end":{"line":30,"column":31,"offset":1511},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":912},"end":{"line":30,"column":31,"offset":1511},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/configureExportProjectModel.png","alt":"configureExportProjectModelImg","position":{"start":{"line":32,"column":1,"offset":1513},"end":{"line":32,"column":148,"offset":1660},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1513},"end":{"line":32,"column":148,"offset":1660},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"üìù","position":{"start":{"line":34,"column":3,"offset":1664},"end":{"line":34,"column":5,"offset":1666},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Note","position":{"start":{"line":34,"column":7,"offset":1668},"end":{"line":34,"column":11,"offset":1672},"indent":[]}}],"position":{"start":{"line":34,"column":5,"offset":1666},"end":{"line":34,"column":13,"offset":1674},"indent":[]}}],"position":{"start":{"line":34,"column":3,"offset":1664},"end":{"line":34,"column":13,"offset":1674},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Script ","position":{"start":{"line":36,"column":3,"offset":1679},"end":{"line":36,"column":10,"offset":1686},"indent":[]}},{"type":"inlineCode","value":"bear.sh","position":{"start":{"line":36,"column":10,"offset":1686},"end":{"line":36,"column":19,"offset":1695},"indent":[]}},{"type":"text","value":" is just a wrapper around ","position":{"start":{"line":36,"column":19,"offset":1695},"end":{"line":36,"column":45,"offset":1721},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/UnitTestBot/Bear","children":[{"type":"text","value":"Bear","position":{"start":{"line":36,"column":46,"offset":1722},"end":{"line":36,"column":50,"offset":1726},"indent":[]}}],"position":{"start":{"line":36,"column":45,"offset":1721},"end":{"line":36,"column":88,"offset":1764},"indent":[]}},{"type":"text","value":" tool.","position":{"start":{"line":36,"column":88,"offset":1764},"end":{"line":36,"column":94,"offset":1770},"indent":[]}}],"position":{"start":{"line":36,"column":3,"offset":1679},"end":{"line":36,"column":94,"offset":1770},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1662},"end":{"line":36,"column":94,"offset":1770},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":39,"column":1,"offset":1773},"end":{"line":39,"column":31,"offset":1803},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":39,"column":31,"offset":1803}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/unittestbot.github.io/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"configuring-project\"\n    }}>{`Configuring Project`}</h1>\n    <p>{`When you initialize your C project with UTBot Wizard, extension will suggest you to configure project. Also, you may\nconfigure project afterwards using command `}<inlineCode parentName=\"p\">{`UTBot: Configure project`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`UTBot: Reset cache and configure project`}</inlineCode>{` in\npallet.`}</p>\n    <h2 {...{\n      \"id\": \"project-configuration-steps\"\n    }}>{`Project Configuration Steps`}</h2>\n    <h3 {...{\n      \"id\": \"check-build-folder-for-exist\"\n    }}>{`Check Build Folder for exist`}</h3>\n    <p>{`Firstly, if build folder is missing, extension will offer you to create that. In case you haven't done it yet, you may\nclick `}<inlineCode parentName=\"p\">{`Create build folder`}</inlineCode>{` button. UTBot will create that on host machine (as well as `}<inlineCode parentName=\"p\">{`bear.sh`}</inlineCode>{` script within).`}</p>\n    <p><img alt=\"configureCheckBuildFolderImg\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/configureCheckBuildFolder.png\" /></p>\n    <h3 {...{\n      \"id\": \"export-project-model\"\n    }}>{`Export Project Model`}</h3>\n    <p>{`Then, you will be asked to configure project. In case you haven't done it yet, you may click 'Configure' button. UTBot\nwill call `}<inlineCode parentName=\"p\">{`cmake`}</inlineCode>{` command for CMake project. It also will pass root directory and CMake options specified in wizard.\nNext, regardless of project's type UTBot will try to call `}<inlineCode parentName=\"p\">{`./bear.sh make`}</inlineCode>{` from build directory. If everything is\nsuccessful, two files will be created in build directory `}<inlineCode parentName=\"p\">{`compile_commands.json`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`link_commands.json`}</inlineCode>{`. Or,\nalternatively, you may run `}<inlineCode parentName=\"p\">{`./bear.sh`}</inlineCode>{` from create build directory with your build command as argument. For\nexample, `}<inlineCode parentName=\"p\">{`./bear.sh make -j8`}</inlineCode>{`.`}</p>\n    <p><img alt=\"configureExportProjectModelImg\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/configureExportProjectModel.png\" /></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`üìù`}<strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`Script `}<inlineCode parentName=\"p\">{`bear.sh`}</inlineCode>{` is just a wrapper around `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/UnitTestBot/Bear\"\n        }}>{`Bear`}</a>{` tool.`}</p>\n    </blockquote>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}