{"expireTime":9007200911246819000,"key":"gatsby-plugin-mdx-entire-payload-a83fecf984c0ddcd182e250f3007b139-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/home/runner/work/unittestbot.github.io/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":140,"offset":141},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":143},"end":{"line":5,"column":29,"offset":171},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"C features","position":{"start":{"line":8,"column":3,"offset":176},"end":{"line":8,"column":13,"offset":186},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":174},"end":{"line":8,"column":13,"offset":186},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Types","position":{"start":{"line":9,"column":3,"offset":189},"end":{"line":9,"column":8,"offset":194},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":189},"end":{"line":9,"column":8,"offset":194},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/type","children":[{"type":"text","value":"Basic types","position":{"start":{"line":10,"column":8,"offset":202},"end":{"line":10,"column":19,"offset":213},"indent":[]}}],"position":{"start":{"line":10,"column":7,"offset":201},"end":{"line":10,"column":67,"offset":261},"indent":[]}}],"position":{"start":{"line":10,"column":7,"offset":201},"end":{"line":10,"column":67,"offset":261},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"char ✔️ ","position":{"start":{"line":11,"column":11,"offset":272},"end":{"line":11,"column":19,"offset":280},"indent":[]}},{"type":"link","title":null,"url":"#char","children":[{"type":"text","value":"[examples]","position":{"start":{"line":11,"column":20,"offset":281},"end":{"line":11,"column":30,"offset":291},"indent":[]}}],"position":{"start":{"line":11,"column":19,"offset":280},"end":{"line":11,"column":38,"offset":299},"indent":[]}}],"position":{"start":{"line":11,"column":11,"offset":272},"end":{"line":11,"column":38,"offset":299},"indent":[]}}],"position":{"start":{"line":11,"column":7,"offset":268},"end":{"line":11,"column":38,"offset":299},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"integral types ✔️  ","position":{"start":{"line":12,"column":11,"offset":310},"end":{"line":12,"column":30,"offset":329},"indent":[]}},{"type":"link","title":null,"url":"#integral-types","children":[{"type":"text","value":"[examples]","position":{"start":{"line":12,"column":31,"offset":330},"end":{"line":12,"column":41,"offset":340},"indent":[]}}],"position":{"start":{"line":12,"column":30,"offset":329},"end":{"line":12,"column":59,"offset":358},"indent":[]}}],"position":{"start":{"line":12,"column":11,"offset":310},"end":{"line":12,"column":59,"offset":358},"indent":[]}}],"position":{"start":{"line":12,"column":7,"offset":306},"end":{"line":12,"column":59,"offset":358},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"linkReference","identifier":"extended","label":"extended","referenceType":"shortcut","children":[{"type":"text","value":"extended","position":{"start":{"line":13,"column":14,"offset":372},"end":{"line":13,"column":22,"offset":380},"indent":[]}}],"position":{"start":{"line":13,"column":13,"offset":371},"end":{"line":13,"column":23,"offset":381},"indent":[]}}],"position":{"start":{"line":13,"column":11,"offset":369},"end":{"line":13,"column":25,"offset":383},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":13,"column":25,"offset":383},"end":{"line":13,"column":26,"offset":384},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"int128 / ","position":{"start":{"line":13,"column":28,"offset":386},"end":{"line":13,"column":37,"offset":395},"indent":[]}}],"position":{"start":{"line":13,"column":26,"offset":384},"end":{"line":13,"column":39,"offset":397},"indent":[]}},{"type":"text","value":"uint128 ","position":{"start":{"line":13,"column":39,"offset":397},"end":{"line":13,"column":47,"offset":405},"indent":[]}}],"position":{"start":{"line":13,"column":11,"offset":369},"end":{"line":13,"column":47,"offset":405},"indent":[]}}],"position":{"start":{"line":13,"column":7,"offset":365},"end":{"line":13,"column":47,"offset":405},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"_Bool ✔️ ","position":{"start":{"line":14,"column":11,"offset":416},"end":{"line":14,"column":20,"offset":425},"indent":[]}},{"type":"link","title":null,"url":"#_bool-type","children":[{"type":"text","value":"[examples]","position":{"start":{"line":14,"column":21,"offset":426},"end":{"line":14,"column":31,"offset":436},"indent":[]}}],"position":{"start":{"line":14,"column":20,"offset":425},"end":{"line":14,"column":45,"offset":450},"indent":[]}}],"position":{"start":{"line":14,"column":11,"offset":416},"end":{"line":14,"column":45,"offset":450},"indent":[]}}],"position":{"start":{"line":14,"column":7,"offset":412},"end":{"line":14,"column":45,"offset":450},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"floating-point types ✔️ ","position":{"start":{"line":15,"column":11,"offset":461},"end":{"line":15,"column":35,"offset":485},"indent":[]}},{"type":"link","title":null,"url":"#floating-point-types","children":[{"type":"text","value":"[examples]","position":{"start":{"line":15,"column":36,"offset":486},"end":{"line":15,"column":46,"offset":496},"indent":[]}}],"position":{"start":{"line":15,"column":35,"offset":485},"end":{"line":15,"column":70,"offset":520},"indent":[]}}],"position":{"start":{"line":15,"column":11,"offset":461},"end":{"line":15,"column":70,"offset":520},"indent":[]}}],"position":{"start":{"line":15,"column":7,"offset":457},"end":{"line":15,"column":70,"offset":520},"indent":[]}}],"position":{"start":{"line":11,"column":7,"offset":268},"end":{"line":15,"column":70,"offset":520},"indent":[7,7,7,7]}}],"position":{"start":{"line":10,"column":3,"offset":197},"end":{"line":15,"column":70,"offset":520},"indent":[3,3,3,3,3]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/enum","children":[{"type":"text","value":"Enums","position":{"start":{"line":16,"column":8,"offset":528},"end":{"line":16,"column":13,"offset":533},"indent":[]}}],"position":{"start":{"line":16,"column":7,"offset":527},"end":{"line":16,"column":61,"offset":581},"indent":[]}},{"type":"text","value":" ✔️ ","position":{"start":{"line":16,"column":61,"offset":581},"end":{"line":16,"column":65,"offset":585},"indent":[]}},{"type":"link","title":null,"url":"#enums","children":[{"type":"text","value":"[examples]","position":{"start":{"line":16,"column":66,"offset":586},"end":{"line":16,"column":76,"offset":596},"indent":[]}}],"position":{"start":{"line":16,"column":65,"offset":585},"end":{"line":16,"column":85,"offset":605},"indent":[]}}],"position":{"start":{"line":16,"column":7,"offset":527},"end":{"line":16,"column":85,"offset":605},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":523},"end":{"line":16,"column":85,"offset":605},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/array","children":[{"type":"text","value":"Arrays","position":{"start":{"line":17,"column":8,"offset":613},"end":{"line":17,"column":14,"offset":619},"indent":[]}}],"position":{"start":{"line":17,"column":7,"offset":612},"end":{"line":17,"column":63,"offset":668},"indent":[]}}],"position":{"start":{"line":17,"column":7,"offset":612},"end":{"line":17,"column":63,"offset":668},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"arrays of constant known size","position":{"start":{"line":18,"column":11,"offset":679},"end":{"line":18,"column":40,"offset":708},"indent":[]}}],"position":{"start":{"line":18,"column":11,"offset":679},"end":{"line":18,"column":40,"offset":708},"indent":[]}}],"position":{"start":{"line":18,"column":7,"offset":675},"end":{"line":18,"column":40,"offset":708},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"variable-length array","position":{"start":{"line":19,"column":11,"offset":719},"end":{"line":19,"column":32,"offset":740},"indent":[]}}],"position":{"start":{"line":19,"column":11,"offset":719},"end":{"line":19,"column":32,"offset":740},"indent":[]}}],"position":{"start":{"line":19,"column":7,"offset":715},"end":{"line":19,"column":32,"offset":740},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"arrays of unknown size","position":{"start":{"line":20,"column":11,"offset":751},"end":{"line":20,"column":33,"offset":773},"indent":[]}}],"position":{"start":{"line":20,"column":11,"offset":751},"end":{"line":20,"column":33,"offset":773},"indent":[]}}],"position":{"start":{"line":20,"column":7,"offset":747},"end":{"line":20,"column":33,"offset":773},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"multidimensional arrays","position":{"start":{"line":21,"column":11,"offset":784},"end":{"line":21,"column":34,"offset":807},"indent":[]}}],"position":{"start":{"line":21,"column":11,"offset":784},"end":{"line":21,"column":34,"offset":807},"indent":[]}}],"position":{"start":{"line":21,"column":7,"offset":780},"end":{"line":21,"column":34,"offset":807},"indent":[]}}],"position":{"start":{"line":18,"column":7,"offset":675},"end":{"line":21,"column":34,"offset":807},"indent":[7,7,7]}}],"position":{"start":{"line":17,"column":3,"offset":608},"end":{"line":21,"column":34,"offset":807},"indent":[3,3,3,3]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/struct","children":[{"type":"text","value":"Structs","position":{"start":{"line":22,"column":8,"offset":815},"end":{"line":22,"column":15,"offset":822},"indent":[]}}],"position":{"start":{"line":22,"column":7,"offset":814},"end":{"line":22,"column":65,"offset":872},"indent":[]}}],"position":{"start":{"line":22,"column":7,"offset":814},"end":{"line":22,"column":65,"offset":872},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"anonymous structs","position":{"start":{"line":23,"column":11,"offset":883},"end":{"line":23,"column":28,"offset":900},"indent":[]}}],"position":{"start":{"line":23,"column":11,"offset":883},"end":{"line":23,"column":28,"offset":900},"indent":[]}}],"position":{"start":{"line":23,"column":7,"offset":879},"end":{"line":23,"column":28,"offset":900},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/bit_field","children":[{"type":"text","value":"bit fields","position":{"start":{"line":24,"column":12,"offset":912},"end":{"line":24,"column":22,"offset":922},"indent":[]}}],"position":{"start":{"line":24,"column":11,"offset":911},"end":{"line":24,"column":75,"offset":975},"indent":[]}},{"type":"text","value":" ❌ ","position":{"start":{"line":24,"column":75,"offset":975},"end":{"line":24,"column":78,"offset":978},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/issues/237","children":[{"type":"text","value":"[discussion]","position":{"start":{"line":24,"column":79,"offset":979},"end":{"line":24,"column":91,"offset":991},"indent":[]}}],"position":{"start":{"line":24,"column":78,"offset":978},"end":{"line":24,"column":144,"offset":1044},"indent":[]}}],"position":{"start":{"line":24,"column":11,"offset":911},"end":{"line":24,"column":144,"offset":1044},"indent":[]}}],"position":{"start":{"line":24,"column":7,"offset":907},"end":{"line":24,"column":144,"offset":1044},"indent":[]}}],"position":{"start":{"line":23,"column":7,"offset":879},"end":{"line":24,"column":144,"offset":1044},"indent":[7]}}],"position":{"start":{"line":22,"column":3,"offset":810},"end":{"line":24,"column":144,"offset":1044},"indent":[3,3]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/union","children":[{"type":"text","value":"Unions","position":{"start":{"line":25,"column":8,"offset":1052},"end":{"line":25,"column":14,"offset":1058},"indent":[]}}],"position":{"start":{"line":25,"column":7,"offset":1051},"end":{"line":25,"column":63,"offset":1107},"indent":[]}}],"position":{"start":{"line":25,"column":7,"offset":1051},"end":{"line":25,"column":63,"offset":1107},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"anonymous union","position":{"start":{"line":26,"column":11,"offset":1118},"end":{"line":26,"column":26,"offset":1133},"indent":[]}}],"position":{"start":{"line":26,"column":11,"offset":1118},"end":{"line":26,"column":26,"offset":1133},"indent":[]}}],"position":{"start":{"line":26,"column":7,"offset":1114},"end":{"line":26,"column":26,"offset":1133},"indent":[]}}],"position":{"start":{"line":26,"column":7,"offset":1114},"end":{"line":26,"column":26,"offset":1133},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":1047},"end":{"line":26,"column":26,"offset":1133},"indent":[3]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/pointer","children":[{"type":"text","value":"Pointers","position":{"start":{"line":27,"column":8,"offset":1141},"end":{"line":27,"column":16,"offset":1149},"indent":[]}}],"position":{"start":{"line":27,"column":7,"offset":1140},"end":{"line":27,"column":67,"offset":1200},"indent":[]}}],"position":{"start":{"line":27,"column":7,"offset":1140},"end":{"line":27,"column":67,"offset":1200},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"pointers to functions","position":{"start":{"line":28,"column":11,"offset":1211},"end":{"line":28,"column":32,"offset":1232},"indent":[]}}],"position":{"start":{"line":28,"column":11,"offset":1211},"end":{"line":28,"column":32,"offset":1232},"indent":[]}}],"position":{"start":{"line":28,"column":7,"offset":1207},"end":{"line":28,"column":32,"offset":1232},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"pointers to void ❌ ","position":{"start":{"line":29,"column":11,"offset":1243},"end":{"line":29,"column":30,"offset":1262},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/pull/221#discussion_r861876337","children":[{"type":"text","value":"[discussion]","position":{"start":{"line":29,"column":31,"offset":1263},"end":{"line":29,"column":43,"offset":1275},"indent":[]}}],"position":{"start":{"line":29,"column":30,"offset":1262},"end":{"line":29,"column":116,"offset":1348},"indent":[]}}],"position":{"start":{"line":29,"column":11,"offset":1243},"end":{"line":29,"column":116,"offset":1348},"indent":[]}}],"position":{"start":{"line":29,"column":7,"offset":1239},"end":{"line":29,"column":116,"offset":1348},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"multidimensional pointers","position":{"start":{"line":30,"column":11,"offset":1359},"end":{"line":30,"column":36,"offset":1384},"indent":[]}}],"position":{"start":{"line":30,"column":11,"offset":1359},"end":{"line":30,"column":36,"offset":1384},"indent":[]}}],"position":{"start":{"line":30,"column":7,"offset":1355},"end":{"line":30,"column":36,"offset":1384},"indent":[]}}],"position":{"start":{"line":28,"column":7,"offset":1207},"end":{"line":30,"column":36,"offset":1384},"indent":[7,7]}}],"position":{"start":{"line":27,"column":3,"offset":1136},"end":{"line":30,"column":36,"offset":1384},"indent":[3,3,3]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/atomic","children":[{"type":"text","value":"Atomic types","position":{"start":{"line":31,"column":8,"offset":1392},"end":{"line":31,"column":20,"offset":1404},"indent":[]}}],"position":{"start":{"line":31,"column":7,"offset":1391},"end":{"line":31,"column":70,"offset":1454},"indent":[]}}],"position":{"start":{"line":31,"column":7,"offset":1391},"end":{"line":31,"column":70,"offset":1454},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":1387},"end":{"line":31,"column":70,"offset":1454},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":197},"end":{"line":31,"column":70,"offset":1454},"indent":[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]}}],"position":{"start":{"line":9,"column":1,"offset":187},"end":{"line":31,"column":70,"offset":1454},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/functions","children":[{"type":"text","value":"Functions","position":{"start":{"line":32,"column":4,"offset":1458},"end":{"line":32,"column":13,"offset":1467},"indent":[]}}],"position":{"start":{"line":32,"column":3,"offset":1457},"end":{"line":32,"column":66,"offset":1520},"indent":[]}}],"position":{"start":{"line":32,"column":3,"offset":1457},"end":{"line":32,"column":66,"offset":1520},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/variadic","children":[{"type":"text","value":"variadic arguments","position":{"start":{"line":33,"column":8,"offset":1528},"end":{"line":33,"column":26,"offset":1546},"indent":[]}}],"position":{"start":{"line":33,"column":7,"offset":1527},"end":{"line":33,"column":78,"offset":1598},"indent":[]}}],"position":{"start":{"line":33,"column":7,"offset":1527},"end":{"line":33,"column":78,"offset":1598},"indent":[]}}],"position":{"start":{"line":33,"column":3,"offset":1523},"end":{"line":33,"column":78,"offset":1598},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"static functions","position":{"start":{"line":34,"column":7,"offset":1605},"end":{"line":34,"column":23,"offset":1621},"indent":[]}}],"position":{"start":{"line":34,"column":7,"offset":1605},"end":{"line":34,"column":23,"offset":1621},"indent":[]}}],"position":{"start":{"line":34,"column":3,"offset":1601},"end":{"line":34,"column":23,"offset":1621},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/inline","children":[{"type":"text","value":"inline functions","position":{"start":{"line":35,"column":8,"offset":1629},"end":{"line":35,"column":24,"offset":1645},"indent":[]}}],"position":{"start":{"line":35,"column":7,"offset":1628},"end":{"line":35,"column":74,"offset":1695},"indent":[]}}],"position":{"start":{"line":35,"column":7,"offset":1628},"end":{"line":35,"column":74,"offset":1695},"indent":[]}}],"position":{"start":{"line":35,"column":3,"offset":1624},"end":{"line":35,"column":74,"offset":1695},"indent":[]}}],"position":{"start":{"line":33,"column":3,"offset":1523},"end":{"line":35,"column":74,"offset":1695},"indent":[3,3]}}],"position":{"start":{"line":32,"column":1,"offset":1455},"end":{"line":35,"column":74,"offset":1695},"indent":[1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/statements","children":[{"type":"text","value":"Statements and loops","position":{"start":{"line":36,"column":4,"offset":1699},"end":{"line":36,"column":24,"offset":1719},"indent":[]}}],"position":{"start":{"line":36,"column":3,"offset":1698},"end":{"line":36,"column":78,"offset":1773},"indent":[]}}],"position":{"start":{"line":36,"column":3,"offset":1698},"end":{"line":36,"column":78,"offset":1773},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/if","children":[{"type":"text","value":"if","position":{"start":{"line":37,"column":8,"offset":1781},"end":{"line":37,"column":10,"offset":1783},"indent":[]}}],"position":{"start":{"line":37,"column":7,"offset":1780},"end":{"line":37,"column":56,"offset":1829},"indent":[]}}],"position":{"start":{"line":37,"column":7,"offset":1780},"end":{"line":37,"column":56,"offset":1829},"indent":[]}}],"position":{"start":{"line":37,"column":3,"offset":1776},"end":{"line":37,"column":56,"offset":1829},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/switch","children":[{"type":"text","value":"switch","position":{"start":{"line":38,"column":8,"offset":1837},"end":{"line":38,"column":14,"offset":1843},"indent":[]}}],"position":{"start":{"line":38,"column":7,"offset":1836},"end":{"line":38,"column":64,"offset":1893},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":38,"column":64,"offset":1893},"end":{"line":38,"column":65,"offset":1894},"indent":[]}}],"position":{"start":{"line":38,"column":7,"offset":1836},"end":{"line":38,"column":65,"offset":1894},"indent":[]}}],"position":{"start":{"line":38,"column":3,"offset":1832},"end":{"line":38,"column":65,"offset":1894},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/for","children":[{"type":"text","value":"for","position":{"start":{"line":39,"column":8,"offset":1902},"end":{"line":39,"column":11,"offset":1905},"indent":[]}}],"position":{"start":{"line":39,"column":7,"offset":1901},"end":{"line":39,"column":58,"offset":1952},"indent":[]}}],"position":{"start":{"line":39,"column":7,"offset":1901},"end":{"line":39,"column":58,"offset":1952},"indent":[]}}],"position":{"start":{"line":39,"column":3,"offset":1897},"end":{"line":39,"column":58,"offset":1952},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/while","children":[{"type":"text","value":"while","position":{"start":{"line":40,"column":8,"offset":1960},"end":{"line":40,"column":13,"offset":1965},"indent":[]}}],"position":{"start":{"line":40,"column":7,"offset":1959},"end":{"line":40,"column":62,"offset":2014},"indent":[]}}],"position":{"start":{"line":40,"column":7,"offset":1959},"end":{"line":40,"column":62,"offset":2014},"indent":[]}}],"position":{"start":{"line":40,"column":3,"offset":1955},"end":{"line":40,"column":62,"offset":2014},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/do","children":[{"type":"text","value":"do-while","position":{"start":{"line":41,"column":8,"offset":2022},"end":{"line":41,"column":16,"offset":2030},"indent":[]}}],"position":{"start":{"line":41,"column":7,"offset":2021},"end":{"line":41,"column":62,"offset":2076},"indent":[]}}],"position":{"start":{"line":41,"column":7,"offset":2021},"end":{"line":41,"column":62,"offset":2076},"indent":[]}}],"position":{"start":{"line":41,"column":3,"offset":2017},"end":{"line":41,"column":62,"offset":2076},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/continue","children":[{"type":"text","value":"continue","position":{"start":{"line":42,"column":8,"offset":2084},"end":{"line":42,"column":16,"offset":2092},"indent":[]}}],"position":{"start":{"line":42,"column":7,"offset":2083},"end":{"line":42,"column":68,"offset":2144},"indent":[]}}],"position":{"start":{"line":42,"column":7,"offset":2083},"end":{"line":42,"column":68,"offset":2144},"indent":[]}}],"position":{"start":{"line":42,"column":3,"offset":2079},"end":{"line":42,"column":68,"offset":2144},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/break","children":[{"type":"text","value":"break","position":{"start":{"line":43,"column":8,"offset":2152},"end":{"line":43,"column":13,"offset":2157},"indent":[]}}],"position":{"start":{"line":43,"column":7,"offset":2151},"end":{"line":43,"column":62,"offset":2206},"indent":[]}}],"position":{"start":{"line":43,"column":7,"offset":2151},"end":{"line":43,"column":62,"offset":2206},"indent":[]}}],"position":{"start":{"line":43,"column":3,"offset":2147},"end":{"line":43,"column":62,"offset":2206},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/goto","children":[{"type":"text","value":"goto","position":{"start":{"line":44,"column":8,"offset":2214},"end":{"line":44,"column":12,"offset":2218},"indent":[]}}],"position":{"start":{"line":44,"column":7,"offset":2213},"end":{"line":44,"column":60,"offset":2266},"indent":[]}}],"position":{"start":{"line":44,"column":7,"offset":2213},"end":{"line":44,"column":60,"offset":2266},"indent":[]}}],"position":{"start":{"line":44,"column":3,"offset":2209},"end":{"line":44,"column":60,"offset":2266},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/operator_other#Conditional_operator","children":[{"type":"text","value":"conditional (ternary) operator","position":{"start":{"line":45,"column":8,"offset":2274},"end":{"line":45,"column":38,"offset":2304},"indent":[]}}],"position":{"start":{"line":45,"column":7,"offset":2273},"end":{"line":45,"column":117,"offset":2383},"indent":[]}}],"position":{"start":{"line":45,"column":7,"offset":2273},"end":{"line":45,"column":117,"offset":2383},"indent":[]}}],"position":{"start":{"line":45,"column":3,"offset":2269},"end":{"line":45,"column":117,"offset":2383},"indent":[]}}],"position":{"start":{"line":37,"column":3,"offset":1776},"end":{"line":45,"column":117,"offset":2383},"indent":[3,3,3,3,3,3,3,3]}}],"position":{"start":{"line":36,"column":1,"offset":1696},"end":{"line":45,"column":117,"offset":2383},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/typedef","children":[{"type":"text","value":"Typedefs","position":{"start":{"line":46,"column":4,"offset":2387},"end":{"line":46,"column":12,"offset":2395},"indent":[]}}],"position":{"start":{"line":46,"column":3,"offset":2386},"end":{"line":46,"column":63,"offset":2446},"indent":[]}}],"position":{"start":{"line":46,"column":3,"offset":2386},"end":{"line":46,"column":63,"offset":2446},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":2384},"end":{"line":46,"column":63,"offset":2446},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/storage_duration","children":[{"type":"text","value":"Storage-class specifiers","position":{"start":{"line":47,"column":4,"offset":2450},"end":{"line":47,"column":28,"offset":2474},"indent":[]}}],"position":{"start":{"line":47,"column":3,"offset":2449},"end":{"line":47,"column":88,"offset":2534},"indent":[]}}],"position":{"start":{"line":47,"column":3,"offset":2449},"end":{"line":47,"column":88,"offset":2534},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"static variables","position":{"start":{"line":48,"column":7,"offset":2541},"end":{"line":48,"column":23,"offset":2557},"indent":[]}}],"position":{"start":{"line":48,"column":7,"offset":2541},"end":{"line":48,"column":23,"offset":2557},"indent":[]}}],"position":{"start":{"line":48,"column":3,"offset":2537},"end":{"line":48,"column":23,"offset":2557},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"extern variables","position":{"start":{"line":49,"column":7,"offset":2564},"end":{"line":49,"column":23,"offset":2580},"indent":[]}}],"position":{"start":{"line":49,"column":7,"offset":2564},"end":{"line":49,"column":23,"offset":2580},"indent":[]}}],"position":{"start":{"line":49,"column":3,"offset":2560},"end":{"line":49,"column":23,"offset":2580},"indent":[]}}],"position":{"start":{"line":48,"column":3,"offset":2537},"end":{"line":49,"column":23,"offset":2580},"indent":[3]}}],"position":{"start":{"line":47,"column":1,"offset":2447},"end":{"line":49,"column":23,"offset":2580},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Qualifiers","position":{"start":{"line":50,"column":3,"offset":2583},"end":{"line":50,"column":13,"offset":2593},"indent":[]}}],"position":{"start":{"line":50,"column":3,"offset":2583},"end":{"line":50,"column":13,"offset":2593},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/const","children":[{"type":"text","value":"const","position":{"start":{"line":51,"column":8,"offset":2601},"end":{"line":51,"column":13,"offset":2606},"indent":[]}}],"position":{"start":{"line":51,"column":7,"offset":2600},"end":{"line":51,"column":62,"offset":2655},"indent":[]}}],"position":{"start":{"line":51,"column":7,"offset":2600},"end":{"line":51,"column":62,"offset":2655},"indent":[]}}],"position":{"start":{"line":51,"column":3,"offset":2596},"end":{"line":51,"column":62,"offset":2655},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/volatile","children":[{"type":"text","value":"volatile","position":{"start":{"line":52,"column":8,"offset":2663},"end":{"line":52,"column":16,"offset":2671},"indent":[]}}],"position":{"start":{"line":52,"column":7,"offset":2662},"end":{"line":52,"column":68,"offset":2723},"indent":[]}}],"position":{"start":{"line":52,"column":7,"offset":2662},"end":{"line":52,"column":68,"offset":2723},"indent":[]}}],"position":{"start":{"line":52,"column":3,"offset":2658},"end":{"line":52,"column":68,"offset":2723},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/restrict","children":[{"type":"text","value":"restrict","position":{"start":{"line":53,"column":8,"offset":2731},"end":{"line":53,"column":16,"offset":2739},"indent":[]}}],"position":{"start":{"line":53,"column":7,"offset":2730},"end":{"line":53,"column":68,"offset":2791},"indent":[]}}],"position":{"start":{"line":53,"column":7,"offset":2730},"end":{"line":53,"column":68,"offset":2791},"indent":[]}}],"position":{"start":{"line":53,"column":3,"offset":2726},"end":{"line":53,"column":68,"offset":2791},"indent":[]}}],"position":{"start":{"line":51,"column":3,"offset":2596},"end":{"line":53,"column":68,"offset":2791},"indent":[3,3]}}],"position":{"start":{"line":50,"column":1,"offset":2581},"end":{"line":53,"column":68,"offset":2791},"indent":[1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/compound_literal","children":[{"type":"text","value":"Compound literals","position":{"start":{"line":54,"column":4,"offset":2795},"end":{"line":54,"column":21,"offset":2812},"indent":[]}}],"position":{"start":{"line":54,"column":3,"offset":2794},"end":{"line":54,"column":81,"offset":2872},"indent":[]}}],"position":{"start":{"line":54,"column":3,"offset":2794},"end":{"line":54,"column":81,"offset":2872},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":2792},"end":{"line":54,"column":81,"offset":2872},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/program","children":[{"type":"text","value":"Program support utilities","position":{"start":{"line":55,"column":4,"offset":2876},"end":{"line":55,"column":29,"offset":2901},"indent":[]}}],"position":{"start":{"line":55,"column":3,"offset":2875},"end":{"line":55,"column":71,"offset":2943},"indent":[]}}],"position":{"start":{"line":55,"column":3,"offset":2875},"end":{"line":55,"column":71,"offset":2943},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":2873},"end":{"line":55,"column":71,"offset":2943},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/error","children":[{"type":"text","value":"Error handling","position":{"start":{"line":56,"column":4,"offset":2947},"end":{"line":56,"column":18,"offset":2961},"indent":[]}}],"position":{"start":{"line":56,"column":3,"offset":2946},"end":{"line":56,"column":58,"offset":3001},"indent":[]}}],"position":{"start":{"line":56,"column":3,"offset":2946},"end":{"line":56,"column":58,"offset":3001},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"errno","position":{"start":{"line":57,"column":7,"offset":3008},"end":{"line":57,"column":12,"offset":3013},"indent":[]}}],"position":{"start":{"line":57,"column":7,"offset":3008},"end":{"line":57,"column":12,"offset":3013},"indent":[]}}],"position":{"start":{"line":57,"column":3,"offset":3004},"end":{"line":57,"column":12,"offset":3013},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"assert","position":{"start":{"line":58,"column":7,"offset":3020},"end":{"line":58,"column":13,"offset":3026},"indent":[]}}],"position":{"start":{"line":58,"column":7,"offset":3020},"end":{"line":58,"column":13,"offset":3026},"indent":[]}}],"position":{"start":{"line":58,"column":3,"offset":3016},"end":{"line":58,"column":13,"offset":3026},"indent":[]}}],"position":{"start":{"line":57,"column":3,"offset":3004},"end":{"line":58,"column":13,"offset":3026},"indent":[3]}}],"position":{"start":{"line":56,"column":1,"offset":2944},"end":{"line":58,"column":13,"offset":3026},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/memory","children":[{"type":"text","value":"Dynamic memory management","position":{"start":{"line":59,"column":4,"offset":3030},"end":{"line":59,"column":29,"offset":3055},"indent":[]}}],"position":{"start":{"line":59,"column":3,"offset":3029},"end":{"line":59,"column":70,"offset":3096},"indent":[]}}],"position":{"start":{"line":59,"column":3,"offset":3029},"end":{"line":59,"column":70,"offset":3096},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":3027},"end":{"line":59,"column":70,"offset":3096},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/io","children":[{"type":"text","value":"Input/Output","position":{"start":{"line":60,"column":4,"offset":3100},"end":{"line":60,"column":16,"offset":3112},"indent":[]}}],"position":{"start":{"line":60,"column":3,"offset":3099},"end":{"line":60,"column":53,"offset":3149},"indent":[]}}],"position":{"start":{"line":60,"column":3,"offset":3099},"end":{"line":60,"column":53,"offset":3149},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":3097},"end":{"line":60,"column":53,"offset":3149},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/algorithm","children":[{"type":"text","value":"Algorithms","position":{"start":{"line":61,"column":4,"offset":3153},"end":{"line":61,"column":14,"offset":3163},"indent":[]}}],"position":{"start":{"line":61,"column":3,"offset":3152},"end":{"line":61,"column":58,"offset":3207},"indent":[]}}],"position":{"start":{"line":61,"column":3,"offset":3152},"end":{"line":61,"column":58,"offset":3207},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":3150},"end":{"line":61,"column":58,"offset":3207},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/numeric/random","children":[{"type":"text","value":"Pseudo random number generation","position":{"start":{"line":62,"column":4,"offset":3211},"end":{"line":62,"column":35,"offset":3242},"indent":[]}}],"position":{"start":{"line":62,"column":3,"offset":3210},"end":{"line":62,"column":84,"offset":3291},"indent":[]}}],"position":{"start":{"line":62,"column":3,"offset":3210},"end":{"line":62,"column":84,"offset":3291},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":3208},"end":{"line":62,"column":84,"offset":3291},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/numeric/complex","children":[{"type":"text","value":"Complex number arithmetic","position":{"start":{"line":63,"column":4,"offset":3295},"end":{"line":63,"column":29,"offset":3320},"indent":[]}}],"position":{"start":{"line":63,"column":3,"offset":3294},"end":{"line":63,"column":79,"offset":3370},"indent":[]}}],"position":{"start":{"line":63,"column":3,"offset":3294},"end":{"line":63,"column":79,"offset":3370},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":3292},"end":{"line":63,"column":79,"offset":3370},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/thread","children":[{"type":"text","value":"Concurrency","position":{"start":{"line":64,"column":4,"offset":3374},"end":{"line":64,"column":15,"offset":3385},"indent":[]}}],"position":{"start":{"line":64,"column":3,"offset":3373},"end":{"line":64,"column":56,"offset":3426},"indent":[]}}],"position":{"start":{"line":64,"column":3,"offset":3373},"end":{"line":64,"column":56,"offset":3426},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":3371},"end":{"line":64,"column":56,"offset":3426},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.cppreference.com/w/c/language/generic","children":[{"type":"text","value":"Generic selection","position":{"start":{"line":65,"column":4,"offset":3430},"end":{"line":65,"column":21,"offset":3447},"indent":[]}}],"position":{"start":{"line":65,"column":3,"offset":3429},"end":{"line":65,"column":72,"offset":3498},"indent":[]}}],"position":{"start":{"line":65,"column":3,"offset":3429},"end":{"line":65,"column":72,"offset":3498},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":3427},"end":{"line":65,"column":72,"offset":3498},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":187},"end":{"line":65,"column":72,"offset":3498},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":66,"column":1,"offset":3499},"end":{"line":66,"column":4,"offset":3502},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"UTBot examples","position":{"start":{"line":67,"column":3,"offset":3505},"end":{"line":67,"column":17,"offset":3519},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":3503},"end":{"line":67,"column":17,"offset":3519},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note","position":{"start":{"line":68,"column":5,"offset":3524},"end":{"line":68,"column":9,"offset":3528},"indent":[]}}],"position":{"start":{"line":68,"column":3,"offset":3522},"end":{"line":68,"column":11,"offset":3530},"indent":[]}},{"type":"text","value":": all of the following examples can be found ","position":{"start":{"line":68,"column":11,"offset":3530},"end":{"line":68,"column":56,"offset":3575},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib","children":[{"type":"text","value":"here","position":{"start":{"line":68,"column":57,"offset":3576},"end":{"line":68,"column":61,"offset":3580},"indent":[]}}],"position":{"start":{"line":68,"column":56,"offset":3575},"end":{"line":68,"column":145,"offset":3664},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":68,"column":145,"offset":3664},"end":{"line":68,"column":146,"offset":3665},"indent":[]}}],"position":{"start":{"line":68,"column":3,"offset":3522},"end":{"line":68,"column":146,"offset":3665},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Basic types","position":{"start":{"line":69,"column":4,"offset":3669},"end":{"line":69,"column":15,"offset":3680},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":3666},"end":{"line":69,"column":15,"offset":3680},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Char","position":{"start":{"line":70,"column":5,"offset":3685},"end":{"line":70,"column":9,"offset":3689},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":3681},"end":{"line":70,"column":9,"offset":3689},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"char a_or_b(char a, char b) {\n    if (a == 'a') {\n        return a;\n    }\n    if (b == 'b') {\n        return b;\n    }","position":{"start":{"line":71,"column":1,"offset":3690},"end":{"line":78,"column":6,"offset":3814},"indent":[1,1,1,1,1,1,1]}}],"position":{"start":{"line":68,"column":1,"offset":3520},"end":{"line":78,"column":6,"offset":3814},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":null,"meta":null,"value":"if (a > b) {\n    return a;\n}\nreturn b;","position":{"start":{"line":80,"column":1,"offset":3816},"end":{"line":83,"column":14,"offset":3870},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"}","position":{"start":{"line":84,"column":1,"offset":3871},"end":{"line":84,"column":2,"offset":3872},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":3871},"end":{"line":84,"column":2,"offset":3872},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"\n###### Generated tests\n\n```cpp\nTEST(regression, a_or_b_test_1)\n{\n    char actual = a_or_b('b', 'b');\n    EXPECT_EQ('b', actual);\n}\n\nTEST(regression, a_or_b_test_2)\n{\n    char actual = a_or_b('p', 'j');\n    EXPECT_EQ('p', actual);\n}\n\nTEST(regression, a_or_b_test_3)\n{\n    char actual = a_or_b('i', 'n');\n    EXPECT_EQ('n', actual);\n}\n\nTEST(regression, a_or_b_test_4)\n{\n    char actual = a_or_b('a', 'c');\n    EXPECT_EQ('a', actual);\n}","position":{"start":{"line":85,"column":1,"offset":3873},"end":{"line":113,"column":4,"offset":4315},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Integral types","position":{"start":{"line":115,"column":5,"offset":4321},"end":{"line":115,"column":19,"offset":4335},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":4317},"end":{"line":115,"column":19,"offset":4335},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"short, unsigned short, int, unsigned int, long, unsigned long, long long, unsigned long long, signed char, unsigned char","position":{"start":{"line":117,"column":3,"offset":4339},"end":{"line":117,"column":125,"offset":4461},"indent":[]}}],"position":{"start":{"line":117,"column":3,"offset":4339},"end":{"line":117,"column":125,"offset":4461},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":4337},"end":{"line":117,"column":125,"offset":4461},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"signed long long int max_long(long long a, signed long long b) {\n    if (a > b) {\n        return a;\n    }\n    return b;\n}","position":{"start":{"line":119,"column":1,"offset":4463},"end":{"line":126,"column":4,"offset":4595},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Generated tests","position":{"start":{"line":128,"column":8,"offset":4604},"end":{"line":128,"column":23,"offset":4619},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":4597},"end":{"line":128,"column":23,"offset":4619},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, max_long_test_1)\n{\n    long long actual = max_long(0LL, -1LL);\n    EXPECT_EQ(0LL, actual);\n}\n\nTEST(regression, max_long_test_2)\n{\n    long long actual = max_long(0LL, 0LL);\n    EXPECT_EQ(0LL, actual);\n}","position":{"start":{"line":130,"column":1,"offset":4621},"end":{"line":142,"column":4,"offset":4851},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"_Bool type","position":{"start":{"line":144,"column":5,"offset":4857},"end":{"line":144,"column":15,"offset":4867},"indent":[]}}],"position":{"start":{"line":144,"column":1,"offset":4853},"end":{"line":144,"column":15,"offset":4867},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"There is also a type alias bool for _Bool, defined in ","position":{"start":{"line":146,"column":3,"offset":4871},"end":{"line":146,"column":57,"offset":4925},"indent":[]}},{"type":"inlineCode","value":"<stdbool.h>","position":{"start":{"line":146,"column":57,"offset":4925},"end":{"line":146,"column":70,"offset":4938},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":146,"column":70,"offset":4938},"end":{"line":146,"column":71,"offset":4939},"indent":[]}}],"position":{"start":{"line":146,"column":3,"offset":4871},"end":{"line":146,"column":71,"offset":4939},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":4869},"end":{"line":146,"column":71,"offset":4939},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"int fun_that_accept_bools(_Bool a, bool b) {\n    if (a && b) return 1;\n    if (a) return 2;\n    if (b) return 3;\n    return 4;\n}","position":{"start":{"line":148,"column":1,"offset":4941},"end":{"line":155,"column":4,"offset":5080},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Generated tests","position":{"start":{"line":157,"column":8,"offset":5089},"end":{"line":157,"column":23,"offset":5104},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":5082},"end":{"line":157,"column":23,"offset":5104},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, fun_that_accept_bools_test_1)\n{\n    int actual = fun_that_accept_bools(true, false);\n    EXPECT_EQ(2, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_2)\n{\n    int actual = fun_that_accept_bools(false, true);\n    EXPECT_EQ(3, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_3)\n{\n    int actual = fun_that_accept_bools(false, false);\n    EXPECT_EQ(4, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_4)\n{\n    int actual = fun_that_accept_bools(true, true);\n    EXPECT_EQ(1, actual);\n}","position":{"start":{"line":159,"column":1,"offset":5106},"end":{"line":183,"column":4,"offset":5639},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Floating-point types","position":{"start":{"line":185,"column":5,"offset":5645},"end":{"line":185,"column":25,"offset":5665},"indent":[]}}],"position":{"start":{"line":185,"column":1,"offset":5641},"end":{"line":185,"column":25,"offset":5665},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"double, float, long double","position":{"start":{"line":187,"column":3,"offset":5669},"end":{"line":187,"column":31,"offset":5697},"indent":[]}}],"position":{"start":{"line":187,"column":3,"offset":5669},"end":{"line":187,"column":31,"offset":5697},"indent":[]}}],"position":{"start":{"line":187,"column":1,"offset":5667},"end":{"line":187,"column":31,"offset":5697},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"float long_double_arith(long double x) {\n    x *= 2;\n    x -= 3.21;\n    x *= fabsl(x);\n    if (x == 1.0) {\n        return 1.0;\n    } else {\n        return 3.5;\n    }\n}","position":{"start":{"line":189,"column":1,"offset":5699},"end":{"line":200,"column":4,"offset":5877},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Generated tests","position":{"start":{"line":201,"column":8,"offset":5885},"end":{"line":201,"column":23,"offset":5900},"indent":[]}}],"position":{"start":{"line":201,"column":1,"offset":5878},"end":{"line":201,"column":23,"offset":5900},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, long_double_arith_test_1)\n{\n    float actual = long_double_arith(2.105000e+00);\n    EXPECT_NEAR(1.000000e+00, actual, utbot_abs_error);\n}\n\nTEST(regression, long_double_arith_test_2)\n{\n    float actual = long_double_arith(0.000000e+00);\n    EXPECT_NEAR(3.500000e+00, actual, utbot_abs_error);\n}","position":{"start":{"line":203,"column":1,"offset":5902},"end":{"line":215,"column":4,"offset":6223},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"code","lang":"cpp","meta":null,"value":"int plain_isnan(float x) {\n    if (x != x) {\n        return 1;\n    } else {\n        return 0;\n    }\n}","position":{"start":{"line":217,"column":1,"offset":6225},"end":{"line":225,"column":4,"offset":6337},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Generated tests","position":{"start":{"line":226,"column":8,"offset":6345},"end":{"line":226,"column":23,"offset":6360},"indent":[]}}],"position":{"start":{"line":226,"column":1,"offset":6338},"end":{"line":226,"column":23,"offset":6360},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, plain_isnan_test_1)\n{\n    int actual = plain_isnan(NAN);\n    EXPECT_EQ(1, actual);\n}\n\nTEST(regression, plain_isnan_test_2)\n{\n    int actual = plain_isnan(0.000000e+00);\n    EXPECT_EQ(0, actual);\n}","position":{"start":{"line":228,"column":1,"offset":6362},"end":{"line":240,"column":4,"offset":6586},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Enums","position":{"start":{"line":242,"column":4,"offset":6591},"end":{"line":242,"column":9,"offset":6596},"indent":[]}}],"position":{"start":{"line":242,"column":1,"offset":6588},"end":{"line":242,"column":9,"offset":6596},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"enum Sign {\n    NEGATIVE,\n    ZERO,\n    POSITIVE\n};\n\nint getSignValue(enum Sign s) {\n    switch (s) {\n        case NEGATIVE:\n            return 0;\n        case ZERO:\n            return 1;\n        case POSITIVE:\n            return 2;\n        default:\n            return -1;\n    }\n}","position":{"start":{"line":244,"column":1,"offset":6598},"end":{"line":263,"column":4,"offset":6889},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Generated tests","position":{"start":{"line":265,"column":8,"offset":6898},"end":{"line":265,"column":23,"offset":6913},"indent":[]}}],"position":{"start":{"line":265,"column":1,"offset":6891},"end":{"line":265,"column":23,"offset":6913},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, getSignValue_test_1)\n{\n    int actual = getSignValue(NEGATIVE);\n    EXPECT_EQ(0, actual);\n}\n\nTEST(regression, getSignValue_test_2)\n{\n    int actual = getSignValue(ZERO);\n    EXPECT_EQ(1, actual);\n}\n\nTEST(regression, getSignValue_test_3)\n{\n    int actual = getSignValue(POSITIVE);\n    EXPECT_EQ(2, actual);\n}","position":{"start":{"line":267,"column":1,"offset":6915},"end":{"line":285,"column":4,"offset":7250},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":287,"column":1,"offset":7252},"end":{"line":287,"column":4,"offset":7255},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Example template","position":{"start":{"line":289,"column":5,"offset":7261},"end":{"line":289,"column":21,"offset":7277},"indent":[]}}],"position":{"start":{"line":289,"column":1,"offset":7257},"end":{"line":289,"column":21,"offset":7277},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"// Enter the source code","position":{"start":{"line":291,"column":1,"offset":7279},"end":{"line":293,"column":4,"offset":7314},"indent":[1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Generated tests","position":{"start":{"line":295,"column":8,"offset":7323},"end":{"line":295,"column":23,"offset":7338},"indent":[]}}],"position":{"start":{"line":295,"column":1,"offset":7316},"end":{"line":295,"column":23,"offset":7338},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"// Enter generated tests","position":{"start":{"line":297,"column":1,"offset":7340},"end":{"line":299,"column":4,"offset":7375},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":301,"column":1,"offset":7377},"end":{"line":301,"column":31,"offset":7407},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":301,"column":31,"offset":7407}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/unittestbot.github.io/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"c-features\"\n    }}>{`C features`}</h1>\n    <ul>\n      <li parentName=\"ul\">{`Types`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/type\"\n            }}>{`Basic types`}</a>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`char ✔️ `}<a parentName=\"li\" {...{\n                  \"href\": \"#char\"\n                }}>{`[examples]`}</a></li>\n              <li parentName=\"ul\">{`integral types ✔️  `}<a parentName=\"li\" {...{\n                  \"href\": \"#integral-types\"\n                }}>{`[examples]`}</a></li>\n              <li parentName=\"ul\"><strong parentName=\"li\">{`[extended]`}</strong>{` `}<strong parentName=\"li\">{`int128 / `}</strong>{`uint128 `}</li>\n              <li parentName=\"ul\">{`_Bool ✔️ `}<a parentName=\"li\" {...{\n                  \"href\": \"#_bool-type\"\n                }}>{`[examples]`}</a></li>\n              <li parentName=\"ul\">{`floating-point types ✔️ `}<a parentName=\"li\" {...{\n                  \"href\": \"#floating-point-types\"\n                }}>{`[examples]`}</a></li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/enum\"\n            }}>{`Enums`}</a>{` ✔️ `}<a parentName=\"li\" {...{\n              \"href\": \"#enums\"\n            }}>{`[examples]`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/array\"\n            }}>{`Arrays`}</a>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`arrays of constant known size`}</li>\n              <li parentName=\"ul\">{`variable-length array`}</li>\n              <li parentName=\"ul\">{`arrays of unknown size`}</li>\n              <li parentName=\"ul\">{`multidimensional arrays`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/struct\"\n            }}>{`Structs`}</a>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`anonymous structs`}</li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"https://en.cppreference.com/w/c/language/bit_field\"\n                }}>{`bit fields`}</a>{` ❌ `}<a parentName=\"li\" {...{\n                  \"href\": \"https://github.com/UnitTestBot/UTBotCpp/issues/237\"\n                }}>{`[discussion]`}</a></li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/union\"\n            }}>{`Unions`}</a>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`anonymous union`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/pointer\"\n            }}>{`Pointers`}</a>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`pointers to functions`}</li>\n              <li parentName=\"ul\">{`pointers to void ❌ `}<a parentName=\"li\" {...{\n                  \"href\": \"https://github.com/UnitTestBot/UTBotCpp/pull/221#discussion_r861876337\"\n                }}>{`[discussion]`}</a></li>\n              <li parentName=\"ul\">{`multidimensional pointers`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/atomic\"\n            }}>{`Atomic types`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/language/functions\"\n        }}>{`Functions`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/variadic\"\n            }}>{`variadic arguments`}</a></li>\n          <li parentName=\"ul\">{`static functions`}</li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/inline\"\n            }}>{`inline functions`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/language/statements\"\n        }}>{`Statements and loops`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/if\"\n            }}>{`if`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/switch\"\n            }}>{`switch`}</a>{` `}</li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/for\"\n            }}>{`for`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/while\"\n            }}>{`while`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/do\"\n            }}>{`do-while`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/continue\"\n            }}>{`continue`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/break\"\n            }}>{`break`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/goto\"\n            }}>{`goto`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/operator_other#Conditional_operator\"\n            }}>{`conditional (ternary) operator`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/language/typedef\"\n        }}>{`Typedefs`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/language/storage_duration\"\n        }}>{`Storage-class specifiers`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`static variables`}</li>\n          <li parentName=\"ul\">{`extern variables`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Qualifiers`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/const\"\n            }}>{`const`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/volatile\"\n            }}>{`volatile`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/restrict\"\n            }}>{`restrict`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/language/compound_literal\"\n        }}>{`Compound literals`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/program\"\n        }}>{`Program support utilities`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/error\"\n        }}>{`Error handling`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`errno`}</li>\n          <li parentName=\"ul\">{`assert`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/memory\"\n        }}>{`Dynamic memory management`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/io\"\n        }}>{`Input/Output`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/algorithm\"\n        }}>{`Algorithms`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/numeric/random\"\n        }}>{`Pseudo random number generation`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/numeric/complex\"\n        }}>{`Complex number arithmetic`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/thread\"\n        }}>{`Concurrency`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/language/generic\"\n        }}>{`Generic selection`}</a></li>\n    </ul>\n    <hr></hr>\n    <h1 {...{\n      \"id\": \"utbot-examples\"\n    }}>{`UTBot examples`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note`}</strong>{`: all of the following examples can be found `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib\"\n        }}>{`here`}</a>{`.`}</p>\n      <h2 parentName=\"blockquote\" {...{\n        \"id\": \"basic-types\"\n      }}>{`Basic types`}</h2>\n      <h3 parentName=\"blockquote\" {...{\n        \"id\": \"char\"\n      }}>{`Char`}</h3>\n      <pre parentName=\"blockquote\"><code parentName=\"pre\" {...{\n          \"className\": \"language-cpp\"\n        }}>{`char a_or_b(char a, char b) {\n    if (a == 'a') {\n        return a;\n    }\n    if (b == 'b') {\n        return b;\n    }\n`}</code></pre>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{}}>{`if (a > b) {\n    return a;\n}\nreturn b;\n`}</code></pre>\n    <p>{`}`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\n###### Generated tests\n\n\\`\\`\\`cpp\nTEST(regression, a_or_b_test_1)\n{\n    char actual = a_or_b('b', 'b');\n    EXPECT_EQ('b', actual);\n}\n\nTEST(regression, a_or_b_test_2)\n{\n    char actual = a_or_b('p', 'j');\n    EXPECT_EQ('p', actual);\n}\n\nTEST(regression, a_or_b_test_3)\n{\n    char actual = a_or_b('i', 'n');\n    EXPECT_EQ('n', actual);\n}\n\nTEST(regression, a_or_b_test_4)\n{\n    char actual = a_or_b('a', 'c');\n    EXPECT_EQ('a', actual);\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"integral-types\"\n    }}>{`Integral types`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`short, unsigned short, int, unsigned int, long, unsigned long, long long, unsigned long long, signed char, unsigned char`}</inlineCode></p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`signed long long int max_long(long long a, signed long long b) {\n    if (a > b) {\n        return a;\n    }\n    return b;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"generated-tests\"\n    }}>{`Generated tests`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, max_long_test_1)\n{\n    long long actual = max_long(0LL, -1LL);\n    EXPECT_EQ(0LL, actual);\n}\n\nTEST(regression, max_long_test_2)\n{\n    long long actual = max_long(0LL, 0LL);\n    EXPECT_EQ(0LL, actual);\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"_bool-type\"\n    }}>{`_Bool type`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`There is also a type alias bool for _Bool, defined in `}<inlineCode parentName=\"p\">{`<stdbool.h>`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`int fun_that_accept_bools(_Bool a, bool b) {\n    if (a && b) return 1;\n    if (a) return 2;\n    if (b) return 3;\n    return 4;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"generated-tests-1\"\n    }}>{`Generated tests`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, fun_that_accept_bools_test_1)\n{\n    int actual = fun_that_accept_bools(true, false);\n    EXPECT_EQ(2, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_2)\n{\n    int actual = fun_that_accept_bools(false, true);\n    EXPECT_EQ(3, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_3)\n{\n    int actual = fun_that_accept_bools(false, false);\n    EXPECT_EQ(4, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_4)\n{\n    int actual = fun_that_accept_bools(true, true);\n    EXPECT_EQ(1, actual);\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"floating-point-types\"\n    }}>{`Floating-point types`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`double, float, long double`}</inlineCode></p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`float long_double_arith(long double x) {\n    x *= 2;\n    x -= 3.21;\n    x *= fabsl(x);\n    if (x == 1.0) {\n        return 1.0;\n    } else {\n        return 3.5;\n    }\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"generated-tests-2\"\n    }}>{`Generated tests`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, long_double_arith_test_1)\n{\n    float actual = long_double_arith(2.105000e+00);\n    EXPECT_NEAR(1.000000e+00, actual, utbot_abs_error);\n}\n\nTEST(regression, long_double_arith_test_2)\n{\n    float actual = long_double_arith(0.000000e+00);\n    EXPECT_NEAR(3.500000e+00, actual, utbot_abs_error);\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`int plain_isnan(float x) {\n    if (x != x) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"generated-tests-3\"\n    }}>{`Generated tests`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, plain_isnan_test_1)\n{\n    int actual = plain_isnan(NAN);\n    EXPECT_EQ(1, actual);\n}\n\nTEST(regression, plain_isnan_test_2)\n{\n    int actual = plain_isnan(0.000000e+00);\n    EXPECT_EQ(0, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enums\"\n    }}>{`Enums`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`enum Sign {\n    NEGATIVE,\n    ZERO,\n    POSITIVE\n};\n\nint getSignValue(enum Sign s) {\n    switch (s) {\n        case NEGATIVE:\n            return 0;\n        case ZERO:\n            return 1;\n        case POSITIVE:\n            return 2;\n        default:\n            return -1;\n    }\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"generated-tests-4\"\n    }}>{`Generated tests`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, getSignValue_test_1)\n{\n    int actual = getSignValue(NEGATIVE);\n    EXPECT_EQ(0, actual);\n}\n\nTEST(regression, getSignValue_test_2)\n{\n    int actual = getSignValue(ZERO);\n    EXPECT_EQ(1, actual);\n}\n\nTEST(regression, getSignValue_test_3)\n{\n    int actual = getSignValue(POSITIVE);\n    EXPECT_EQ(2, actual);\n}\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"example-template\"\n    }}>{`Example template`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`// Enter the source code\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"generated-tests-5\"\n    }}>{`Generated tests`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`// Enter generated tests\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}