{"expireTime":9007200910765525000,"key":"gatsby-plugin-mdx-entire-payload-b5b969bb3d818ffc8631ab1242b518ab-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/home/runner/work/unittestbot.github.io/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":140,"offset":141},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":143},"end":{"line":5,"column":29,"offset":171},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Symbolic stdin","position":{"start":{"line":8,"column":3,"offset":176},"end":{"line":8,"column":17,"offset":190},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":174},"end":{"line":8,"column":17,"offset":190},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"UTBot is able to generate tests for C code that reads values from ","position":{"start":{"line":10,"column":1,"offset":192},"end":{"line":10,"column":67,"offset":258},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"stdin","position":{"start":{"line":10,"column":69,"offset":260},"end":{"line":10,"column":74,"offset":265},"indent":[]}}],"position":{"start":{"line":10,"column":67,"offset":258},"end":{"line":10,"column":76,"offset":267},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":10,"column":76,"offset":267},"end":{"line":10,"column":78,"offset":269},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"file descriptor","position":{"start":{"line":10,"column":80,"offset":271},"end":{"line":10,"column":95,"offset":286},"indent":[]}}],"position":{"start":{"line":10,"column":78,"offset":269},"end":{"line":10,"column":97,"offset":288},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":10,"column":97,"offset":288},"end":{"line":10,"column":101,"offset":292},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"STDIN_FILENO","position":{"start":{"line":10,"column":103,"offset":294},"end":{"line":10,"column":115,"offset":306},"indent":[]}}],"position":{"start":{"line":10,"column":101,"offset":292},"end":{"line":10,"column":117,"offset":308},"indent":[]}},{"type":"text","value":".\nUTBot marks read values as symbolic, generates tests, puts the needed data into a C-string buffer and redirects ","position":{"start":{"line":10,"column":117,"offset":308},"end":{"line":11,"column":113,"offset":422},"indent":[1]}},{"type":"strong","children":[{"type":"text","value":"\nstdin","position":{"start":{"line":11,"column":115,"offset":424},"end":{"line":12,"column":6,"offset":430},"indent":[1]}}],"position":{"start":{"line":11,"column":113,"offset":422},"end":{"line":12,"column":8,"offset":432},"indent":[1]}},{"type":"text","value":" to the buffer so tests can be executed properly.","position":{"start":{"line":12,"column":8,"offset":432},"end":{"line":12,"column":57,"offset":481},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":192},"end":{"line":12,"column":57,"offset":481},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here is an example of a function that reads values from stdin:","position":{"start":{"line":14,"column":1,"offset":483},"end":{"line":14,"column":63,"offset":545},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":483},"end":{"line":14,"column":63,"offset":545},"indent":[]}},{"type":"heading","depth":6,"children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/blob/main/integration-tests/c-example/lib/symbolic_stdin.c","children":[{"type":"text","value":"Source code example","position":{"start":{"line":16,"column":9,"offset":555},"end":{"line":16,"column":28,"offset":574},"indent":[]}}],"position":{"start":{"line":16,"column":8,"offset":554},"end":{"line":16,"column":129,"offset":675},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":547},"end":{"line":16,"column":129,"offset":675},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"int check_password(int fd) {\n  char buf[5];\n  if (read(fd, buf, 5) != -1) {\n    if (buf[0] == 'h' && buf[1] == 'e' &&\n\tbuf[2] == 'l' && buf[3] == 'l' &&\n\tbuf[4] == 'o')\n      return 1;\n  }\n  return 0;\n}","position":{"start":{"line":18,"column":1,"offset":677},"end":{"line":29,"column":4,"offset":890},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Redirecting stdin","position":{"start":{"line":31,"column":8,"offset":899},"end":{"line":31,"column":25,"offset":916},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":892},"end":{"line":31,"column":25,"offset":916},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"void utbot_redirect_stdin(const char* buf, int &res) {\n    int fds[2];\n    if (pipe(fds) == -1) {\n        res = -1;\n        return;\n    }\n    close(STDIN_FILENO);\n    dup2(fds[0], STDIN_FILENO);\n    write(fds[1], buf, 64);\n    close(fds[1]);\n}","position":{"start":{"line":33,"column":1,"offset":918},"end":{"line":45,"column":4,"offset":1172},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code example","position":{"start":{"line":47,"column":8,"offset":1181},"end":{"line":47,"column":26,"offset":1199},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1174},"end":{"line":47,"column":26,"offset":1199},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, check_password_test_1)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"hello\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_2)\n{\n    // Construct input\n    int fd = 1;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_3)\n{\n    // Construct input\n    int fd = 3;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_4)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"\\x97\"\"\\x97\"\"\\x97\"\"\\x97\"\"\\x97\"\"\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_5)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"he\\0\"\"hh\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_6)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"hell\\0\"\"\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_7)\n{\n    // Construct input\n    int fd = 1024;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_8)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"h\\0\"\"hhh\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_9)\n{\n    // Construct input\n    int fd = -1;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_10)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"hel\\0\"\"h\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}","position":{"start":{"line":49,"column":1,"offset":1201},"end":{"line":241,"column":4,"offset":5310},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":243,"column":1,"offset":5312},"end":{"line":243,"column":31,"offset":5342},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":243,"column":31,"offset":5342}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/unittestbot.github.io/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"symbolic-stdin\"\n    }}>{`Symbolic stdin`}</h1>\n    <p>{`UTBot is able to generate tests for C code that reads values from `}<strong parentName=\"p\">{`stdin`}</strong>{`, `}<strong parentName=\"p\">{`file descriptor`}</strong>{` or `}<strong parentName=\"p\">{`STDIN_FILENO`}</strong>{`.\nUTBot marks read values as symbolic, generates tests, puts the needed data into a C-string buffer and redirects `}<strong parentName=\"p\">{`\nstdin`}</strong>{` to the buffer so tests can be executed properly.`}</p>\n    <p>{`Here is an example of a function that reads values from stdin:`}</p>\n    <h6 {...{\n      \"id\": \"source-code-example\"\n    }}><a parentName=\"h6\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/blob/main/integration-tests/c-example/lib/symbolic_stdin.c\"\n      }}>{`Source code example`}</a></h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`int check_password(int fd) {\n  char buf[5];\n  if (read(fd, buf, 5) != -1) {\n    if (buf[0] == 'h' && buf[1] == 'e' &&\n    buf[2] == 'l' && buf[3] == 'l' &&\n    buf[4] == 'o')\n      return 1;\n  }\n  return 0;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"redirecting-stdin\"\n    }}>{`Redirecting stdin`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`void utbot_redirect_stdin(const char* buf, int &res) {\n    int fds[2];\n    if (pipe(fds) == -1) {\n        res = -1;\n        return;\n    }\n    close(STDIN_FILENO);\n    dup2(fds[0], STDIN_FILENO);\n    write(fds[1], buf, 64);\n    close(fds[1]);\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-example\"\n    }}>{`Tests code example`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, check_password_test_1)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"hello\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_2)\n{\n    // Construct input\n    int fd = 1;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_3)\n{\n    // Construct input\n    int fd = 3;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_4)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"\\\\x97\"\"\\\\x97\"\"\\\\x97\"\"\\\\x97\"\"\\\\x97\"\"\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_5)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"he\\\\0\"\"hh\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_6)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"hell\\\\0\"\"\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_7)\n{\n    // Construct input\n    int fd = 1024;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_8)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"h\\\\0\"\"hhh\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_9)\n{\n    // Construct input\n    int fd = -1;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_10)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"hel\\\\0\"\"h\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}