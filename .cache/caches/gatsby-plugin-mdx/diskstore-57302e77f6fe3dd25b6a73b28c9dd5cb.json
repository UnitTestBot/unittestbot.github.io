{"expireTime":9007200910765525000,"key":"gatsby-plugin-mdx-entire-payload-30b5bc2af104e5f77ae262fa71c8154f-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/home/runner/work/unittestbot.github.io/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":140,"offset":141},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":143},"end":{"line":5,"column":29,"offset":171},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Supported C Syntax","position":{"start":{"line":8,"column":3,"offset":176},"end":{"line":8,"column":21,"offset":194},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":174},"end":{"line":8,"column":21,"offset":194},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"UnitTestBot supports the majority of C language features. Here you can find test cases examples on main syntax\nconstructions. All code snippets below were taken\nfrom ","position":{"start":{"line":10,"column":1,"offset":196},"end":{"line":12,"column":6,"offset":362},"indent":[1,1]}},{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/","children":[{"type":"text","value":"this directory","position":{"start":{"line":12,"column":7,"offset":363},"end":{"line":12,"column":21,"offset":377},"indent":[]}}],"position":{"start":{"line":12,"column":6,"offset":362},"end":{"line":12,"column":102,"offset":458},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":12,"column":102,"offset":458},"end":{"line":12,"column":103,"offset":459},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":196},"end":{"line":12,"column":103,"offset":459},"indent":[1,1]}},{"type":"jsx","value":"<!-- toc -->","position":{"start":{"line":14,"column":1,"offset":461},"end":{"line":14,"column":13,"offset":473},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#integral-types","children":[{"type":"text","value":"Integral types","position":{"start":{"line":16,"column":4,"offset":478},"end":{"line":16,"column":18,"offset":492},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":477},"end":{"line":16,"column":36,"offset":510},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":477},"end":{"line":16,"column":36,"offset":510},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":475},"end":{"line":16,"column":36,"offset":510},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#character-types","children":[{"type":"text","value":"Character types","position":{"start":{"line":17,"column":4,"offset":514},"end":{"line":17,"column":19,"offset":529},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":513},"end":{"line":17,"column":38,"offset":548},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":513},"end":{"line":17,"column":38,"offset":548},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":511},"end":{"line":17,"column":38,"offset":548},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#floating-point-types","children":[{"type":"text","value":"Floating-point types","position":{"start":{"line":18,"column":4,"offset":552},"end":{"line":18,"column":24,"offset":572},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":551},"end":{"line":18,"column":48,"offset":596},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":551},"end":{"line":18,"column":48,"offset":596},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":549},"end":{"line":18,"column":48,"offset":596},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#_bool-type","children":[{"type":"text","value":"_Bool type","position":{"start":{"line":19,"column":4,"offset":600},"end":{"line":19,"column":14,"offset":610},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":599},"end":{"line":19,"column":28,"offset":624},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":599},"end":{"line":19,"column":28,"offset":624},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":597},"end":{"line":19,"column":28,"offset":624},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#structs-as-parameters","children":[{"type":"text","value":"Structs as parameters","position":{"start":{"line":20,"column":4,"offset":628},"end":{"line":20,"column":25,"offset":649},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":627},"end":{"line":20,"column":50,"offset":674},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":627},"end":{"line":20,"column":50,"offset":674},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":625},"end":{"line":20,"column":50,"offset":674},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#structs-as-return-values","children":[{"type":"text","value":"Structs as return values","position":{"start":{"line":21,"column":4,"offset":678},"end":{"line":21,"column":28,"offset":702},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":677},"end":{"line":21,"column":56,"offset":730},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":677},"end":{"line":21,"column":56,"offset":730},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":675},"end":{"line":21,"column":56,"offset":730},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#unions","children":[{"type":"text","value":"Unions","position":{"start":{"line":22,"column":4,"offset":734},"end":{"line":22,"column":10,"offset":740},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":733},"end":{"line":22,"column":20,"offset":750},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":733},"end":{"line":22,"column":20,"offset":750},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":731},"end":{"line":22,"column":20,"offset":750},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#pointers-as-parameters-and-return-types","children":[{"type":"text","value":"Pointers as parameters and return types","position":{"start":{"line":23,"column":4,"offset":754},"end":{"line":23,"column":43,"offset":793},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":753},"end":{"line":23,"column":86,"offset":836},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":753},"end":{"line":23,"column":86,"offset":836},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":751},"end":{"line":23,"column":86,"offset":836},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#pointers-as-struct-fields-members","children":[{"type":"text","value":"Pointers as struct fields members","position":{"start":{"line":24,"column":4,"offset":840},"end":{"line":24,"column":37,"offset":873},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":839},"end":{"line":24,"column":74,"offset":910},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":839},"end":{"line":24,"column":74,"offset":910},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":837},"end":{"line":24,"column":74,"offset":910},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#pointers-to-functions","children":[{"type":"text","value":"Pointers to functions","position":{"start":{"line":25,"column":4,"offset":914},"end":{"line":25,"column":25,"offset":935},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":913},"end":{"line":25,"column":50,"offset":960},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":913},"end":{"line":25,"column":50,"offset":960},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":911},"end":{"line":25,"column":50,"offset":960},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#arrays","children":[{"type":"text","value":"Arrays","position":{"start":{"line":26,"column":4,"offset":964},"end":{"line":26,"column":10,"offset":970},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":963},"end":{"line":26,"column":20,"offset":980},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":963},"end":{"line":26,"column":20,"offset":980},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":961},"end":{"line":26,"column":20,"offset":980},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#multidimensional-arrays-and-pointers","children":[{"type":"text","value":"Multidimensional arrays and pointers","position":{"start":{"line":27,"column":4,"offset":984},"end":{"line":27,"column":40,"offset":1020},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":983},"end":{"line":27,"column":80,"offset":1060},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":983},"end":{"line":27,"column":80,"offset":1060},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":981},"end":{"line":27,"column":80,"offset":1060},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#enums","children":[{"type":"text","value":"Enums","position":{"start":{"line":28,"column":4,"offset":1064},"end":{"line":28,"column":9,"offset":1069},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":1063},"end":{"line":28,"column":18,"offset":1078},"indent":[]}}],"position":{"start":{"line":28,"column":3,"offset":1063},"end":{"line":28,"column":18,"offset":1078},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1061},"end":{"line":28,"column":18,"offset":1078},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#typedef","children":[{"type":"text","value":"Typedef","position":{"start":{"line":29,"column":4,"offset":1082},"end":{"line":29,"column":11,"offset":1089},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":1081},"end":{"line":29,"column":22,"offset":1100},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":1081},"end":{"line":29,"column":22,"offset":1100},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1079},"end":{"line":29,"column":22,"offset":1100},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#static-functions","children":[{"type":"text","value":"Static functions","position":{"start":{"line":30,"column":4,"offset":1104},"end":{"line":30,"column":20,"offset":1120},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":1103},"end":{"line":30,"column":40,"offset":1140},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":1103},"end":{"line":30,"column":40,"offset":1140},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1101},"end":{"line":30,"column":40,"offset":1140},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#qualifiers-const-volatile-restrict-etc","children":[{"type":"text","value":"Qualifiers: const, volatile, restrict etc.","position":{"start":{"line":31,"column":4,"offset":1144},"end":{"line":31,"column":46,"offset":1186},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":1143},"end":{"line":31,"column":88,"offset":1228},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":1143},"end":{"line":31,"column":88,"offset":1228},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1141},"end":{"line":31,"column":88,"offset":1228},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#global-variables","children":[{"type":"text","value":"Global variables","position":{"start":{"line":32,"column":4,"offset":1232},"end":{"line":32,"column":20,"offset":1248},"indent":[]}}],"position":{"start":{"line":32,"column":3,"offset":1231},"end":{"line":32,"column":40,"offset":1268},"indent":[]}}],"position":{"start":{"line":32,"column":3,"offset":1231},"end":{"line":32,"column":40,"offset":1268},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1229},"end":{"line":32,"column":40,"offset":1268},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":475},"end":{"line":32,"column":40,"offset":1268},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<!-- tocstop -->","position":{"start":{"line":34,"column":1,"offset":1270},"end":{"line":34,"column":17,"offset":1286},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Integral types","position":{"start":{"line":36,"column":4,"offset":1291},"end":{"line":36,"column":18,"offset":1305},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1288},"end":{"line":36,"column":18,"offset":1305},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"short, unsigned short, int, unsigned int, long, unsigned long, long long, unsigned long long, unsigned char","position":{"start":{"line":38,"column":3,"offset":1309},"end":{"line":38,"column":112,"offset":1418},"indent":[]}}],"position":{"start":{"line":38,"column":3,"offset":1309},"end":{"line":38,"column":112,"offset":1418},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1307},"end":{"line":38,"column":112,"offset":1418},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/types.c#L23","children":[{"type":"text","value":"Source code example","position":{"start":{"line":40,"column":2,"offset":1421},"end":{"line":40,"column":21,"offset":1440},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1420},"end":{"line":40,"column":123,"offset":1542},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1420},"end":{"line":40,"column":123,"offset":1542},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"signed long long int max_long(long long a, signed long long b) {\n    if (a > b) {\n        return a;\n    }\n    return b;\n}","position":{"start":{"line":42,"column":1,"offset":1544},"end":{"line":49,"column":4,"offset":1676},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":51,"column":8,"offset":1685},"end":{"line":51,"column":18,"offset":1695},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1678},"end":{"line":51,"column":18,"offset":1695},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, max_long_test_1)\n{\n    // Construct input\n    long long a = 0LL;\n    long long b = -1LL;\n\n    // Expected output\n    long long expected = 0LL;\n\n    // Trigger the function\n    long long actual = max_long(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, max_long_test_2)\n{\n    // Construct input\n    long long a = 0LL;\n    long long b = 0LL;\n\n    // Expected output\n    long long expected = 0LL;\n\n    // Trigger the function\n    long long actual = max_long(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}","position":{"start":{"line":53,"column":1,"offset":1697},"end":{"line":85,"column":4,"offset":2277},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Character types","position":{"start":{"line":88,"column":4,"offset":2283},"end":{"line":88,"column":19,"offset":2298},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":2280},"end":{"line":88,"column":19,"offset":2298},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"char, signed char","position":{"start":{"line":90,"column":3,"offset":2302},"end":{"line":90,"column":22,"offset":2321},"indent":[]}}],"position":{"start":{"line":90,"column":3,"offset":2302},"end":{"line":90,"column":22,"offset":2321},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":2300},"end":{"line":90,"column":22,"offset":2321},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/types.c#L42","children":[{"type":"text","value":"Source code example","position":{"start":{"line":92,"column":2,"offset":2324},"end":{"line":92,"column":21,"offset":2343},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":2323},"end":{"line":92,"column":123,"offset":2445},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":2323},"end":{"line":92,"column":123,"offset":2445},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"signed char some_func(char a, unsigned char b) {\n    if (b == 'z' && a > b) return a;\n    if (b != 'z') return b;\n    return '0';\n}","position":{"start":{"line":94,"column":1,"offset":2447},"end":{"line":100,"column":4,"offset":2589},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":102,"column":8,"offset":2598},"end":{"line":102,"column":18,"offset":2608},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":2591},"end":{"line":102,"column":18,"offset":2608},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, some_func_test_1)\n{\n    // Construct input\n    char a = 'a';\n    unsigned char b = 122;\n\n    // Expected output\n    signed char expected = '0';\n\n    // Trigger the function\n    signed char actual = some_func(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, some_func_test_2)\n{\n    // Construct input\n    char a = 'a';\n    unsigned char b = 120;\n\n    // Expected output\n    signed char expected = 'x';\n\n    // Trigger the function\n    signed char actual = some_func(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, some_func_test_3)\n{\n    // Construct input\n    char a = '{';\n    unsigned char b = 122;\n\n    // Expected output\n    signed char expected = '{';\n\n    // Trigger the function\n    signed char actual = some_func(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(error, some_func_test_4)\n{\n    // Construct input\n    char a = 'a';\n    unsigned char b = 128;\n\n    // Trigger the function\n    some_func(a, b);\n\n    FAIL() << \"Unreachable point. Function was supposed to fail, but actually completed successfully.\";\n}","position":{"start":{"line":104,"column":1,"offset":2610},"end":{"line":164,"column":4,"offset":3747},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Floating-point types","position":{"start":{"line":167,"column":4,"offset":3753},"end":{"line":167,"column":24,"offset":3773},"indent":[]}}],"position":{"start":{"line":167,"column":1,"offset":3750},"end":{"line":167,"column":24,"offset":3773},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"double, float, long double","position":{"start":{"line":169,"column":3,"offset":3777},"end":{"line":169,"column":31,"offset":3805},"indent":[]}}],"position":{"start":{"line":169,"column":3,"offset":3777},"end":{"line":169,"column":31,"offset":3805},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":3775},"end":{"line":169,"column":31,"offset":3805},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/floats/floating_point.c#L30","children":[{"type":"text","value":"Source code example","position":{"start":{"line":171,"column":2,"offset":3808},"end":{"line":171,"column":21,"offset":3827},"indent":[]}}],"position":{"start":{"line":171,"column":1,"offset":3807},"end":{"line":171,"column":133,"offset":3939},"indent":[]}}],"position":{"start":{"line":171,"column":1,"offset":3807},"end":{"line":171,"column":133,"offset":3939},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"float long_double_arith(long double x) {\n    x *= 2;\n    x -= 3.21;\n    x *= fabsl(x);\n    if (x == 1.0) {\n        return 1.0;\n    } else {\n        return 3.5;\n    }\n}","position":{"start":{"line":173,"column":1,"offset":3941},"end":{"line":184,"column":4,"offset":4119},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":186,"column":8,"offset":4128},"end":{"line":186,"column":18,"offset":4138},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":4121},"end":{"line":186,"column":18,"offset":4138},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, long_double_arith_test_1)\n{\n    // Construct input\n    long double x = 2.105000e+00;\n\n    // Expected output\n    float expected = 1.000000e+00;\n\n    // Trigger the function\n    float actual = long_double_arith(x);\n\n    // Check results\n    EXPECT_NEAR(expected, actual, utbot_abs_error);\n}\n\nTEST(regression, long_double_arith_test_2)\n{\n    // Construct input\n    long double x = 0.000000e+00;\n\n    // Expected output\n    float expected = 3.500000e+00;\n\n    // Trigger the function\n    float actual = long_double_arith(x);\n\n    // Check results\n    EXPECT_NEAR(expected, actual, utbot_abs_error);\n}","position":{"start":{"line":188,"column":1,"offset":4140},"end":{"line":218,"column":4,"offset":4765},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"_Bool type","position":{"start":{"line":221,"column":4,"offset":4771},"end":{"line":221,"column":14,"offset":4781},"indent":[]}}],"position":{"start":{"line":221,"column":1,"offset":4768},"end":{"line":221,"column":14,"offset":4781},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"There is also a type alias bool for _Bool, defined in ","position":{"start":{"line":223,"column":3,"offset":4785},"end":{"line":223,"column":57,"offset":4839},"indent":[]}},{"type":"inlineCode","value":"<stdbool.h>","position":{"start":{"line":223,"column":57,"offset":4839},"end":{"line":223,"column":70,"offset":4852},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":223,"column":70,"offset":4852},"end":{"line":223,"column":71,"offset":4853},"indent":[]}}],"position":{"start":{"line":223,"column":3,"offset":4785},"end":{"line":223,"column":71,"offset":4853},"indent":[]}}],"position":{"start":{"line":223,"column":1,"offset":4783},"end":{"line":223,"column":71,"offset":4853},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/types.c#L48","children":[{"type":"text","value":"Source code example","position":{"start":{"line":225,"column":2,"offset":4856},"end":{"line":225,"column":21,"offset":4875},"indent":[]}}],"position":{"start":{"line":225,"column":1,"offset":4855},"end":{"line":225,"column":123,"offset":4977},"indent":[]}}],"position":{"start":{"line":225,"column":1,"offset":4855},"end":{"line":225,"column":123,"offset":4977},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"int fun_that_accept_bools(_Bool a, bool b) {\n    if (a && b) return 1;\n    if (a) return 2;\n    if (b) return 3;\n    return 4;\n}","position":{"start":{"line":227,"column":1,"offset":4979},"end":{"line":234,"column":4,"offset":5118},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":236,"column":8,"offset":5127},"end":{"line":236,"column":18,"offset":5137},"indent":[]}}],"position":{"start":{"line":236,"column":1,"offset":5120},"end":{"line":236,"column":18,"offset":5137},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, fun_that_accept_bools_test_1)\n{\n    // Construct input\n    bool a = true;\n    bool b = false;\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = fun_that_accept_bools(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_2)\n{\n    // Construct input\n    bool a = false;\n    bool b = false;\n\n    // Expected output\n    int expected = 4;\n\n    // Trigger the function\n    int actual = fun_that_accept_bools(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_3)\n{\n    // Construct input\n    bool a = false;\n    bool b = true;\n\n    // Expected output\n    int expected = 3;\n\n    // Trigger the function\n    int actual = fun_that_accept_bools(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_4)\n{\n    // Construct input\n    bool a = true;\n    bool b = true;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = fun_that_accept_bools(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}","position":{"start":{"line":238,"column":1,"offset":5139},"end":{"line":302,"column":4,"offset":6308},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Structs as parameters","position":{"start":{"line":305,"column":4,"offset":6314},"end":{"line":305,"column":25,"offset":6335},"indent":[]}}],"position":{"start":{"line":305,"column":1,"offset":6311},"end":{"line":305,"column":25,"offset":6335},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/types.c#L122","children":[{"type":"text","value":"Source code example","position":{"start":{"line":307,"column":2,"offset":6338},"end":{"line":307,"column":21,"offset":6357},"indent":[]}}],"position":{"start":{"line":307,"column":1,"offset":6337},"end":{"line":307,"column":124,"offset":6460},"indent":[]}}],"position":{"start":{"line":307,"column":1,"offset":6337},"end":{"line":307,"column":124,"offset":6460},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"struct SupportedStruct5 {\n    short b;\n    const int a;\n    char c;\n};\n\nint structWithConstFields(struct SupportedStruct5 st) {\n    if (st.a == 0) {\n        return 1;\n    }\n    return 2;\n}","position":{"start":{"line":309,"column":1,"offset":6462},"end":{"line":322,"column":4,"offset":6661},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":324,"column":8,"offset":6670},"end":{"line":324,"column":18,"offset":6680},"indent":[]}}],"position":{"start":{"line":324,"column":1,"offset":6663},"end":{"line":324,"column":18,"offset":6680},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, structWithConstFields_test_1)\n{\n    // Construct input\n    struct SupportedStruct5 st = {0, 0, 'c'};\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = structWithConstFields(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, structWithConstFields_test_2)\n{\n    // Construct input\n    struct SupportedStruct5 st = {0, -1, 'c'};\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = structWithConstFields(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}","position":{"start":{"line":326,"column":1,"offset":6682},"end":{"line":356,"column":4,"offset":7282},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Structs as return values","position":{"start":{"line":359,"column":4,"offset":7288},"end":{"line":359,"column":28,"offset":7312},"indent":[]}}],"position":{"start":{"line":359,"column":1,"offset":7285},"end":{"line":359,"column":28,"offset":7312},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/types.c#L84","children":[{"type":"text","value":"Source code example","position":{"start":{"line":361,"column":2,"offset":7315},"end":{"line":361,"column":21,"offset":7334},"indent":[]}}],"position":{"start":{"line":361,"column":1,"offset":7314},"end":{"line":361,"column":123,"offset":7436},"indent":[]}}],"position":{"start":{"line":361,"column":1,"offset":7314},"end":{"line":361,"column":123,"offset":7436},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"struct SupportedStruct4 {\n    char* c;\n};\n\nconst struct SupportedStruct4 structWithConstPointerReturn(int a) {\n    if (a % 2 == 0) {\n        struct SupportedStruct4 res = {.c = \"abcd\"};\n        return res;\n    }\n    struct SupportedStruct4 res = {.c = \"ABCD\"};\n    return res;\n}","position":{"start":{"line":363,"column":1,"offset":7438},"end":{"line":376,"column":4,"offset":7727},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":378,"column":8,"offset":7736},"end":{"line":378,"column":18,"offset":7746},"indent":[]}}],"position":{"start":{"line":378,"column":1,"offset":7729},"end":{"line":378,"column":18,"offset":7746},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, structWithConstPointerReturn_test_1)\n{\n    // Construct input\n    int a = 1;\n\n    // Expected output\n    struct SupportedStruct4 expected = {NULL};\n\n    // Trigger the function\n    const struct SupportedStruct4 actual = structWithConstPointerReturn(a);\n\n    // Check results\n}\n\nTEST(regression, structWithConstPointerReturn_test_2)\n{\n    // Construct input\n    int a = 0;\n\n    // Expected output\n    struct SupportedStruct4 expected = {NULL};\n\n    // Trigger the function\n    const struct SupportedStruct4 actual = structWithConstPointerReturn(a);\n\n    // Check results\n}","position":{"start":{"line":380,"column":1,"offset":7748},"end":{"line":408,"column":4,"offset":8347},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Unions","position":{"start":{"line":411,"column":4,"offset":8353},"end":{"line":411,"column":10,"offset":8359},"indent":[]}}],"position":{"start":{"line":411,"column":1,"offset":8350},"end":{"line":411,"column":10,"offset":8359},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/structures/simple_unions.c#L56","children":[{"type":"text","value":"Source code example","position":{"start":{"line":413,"column":2,"offset":8362},"end":{"line":413,"column":21,"offset":8381},"indent":[]}}],"position":{"start":{"line":413,"column":1,"offset":8361},"end":{"line":413,"column":136,"offset":8496},"indent":[]}}],"position":{"start":{"line":413,"column":1,"offset":8361},"end":{"line":413,"column":136,"offset":8496},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"union MainUnion {\n    union InnerUnion {\n        union InInnerUnion {\n            unsigned int u;\n            long long l;\n        };\n        char c;\n        union InInnerUnion ininner;\n        short s;\n    } inner;\n\n    int x;\n    long long y;\n};\n\nsigned char operate_with_inner_unions(union MainUnion st) {\n    if (st.x == 5 || st.y == 5 || st.inner.c == '5' ||\n        st.inner.s == 5 || st.inner.ininner.l == 5 || st.inner.ininner.u == 5) {\n        return '5';\n    }\n\n\n    if (st.x == 5 || st.y == 102 || st.inner.s == 15) {\n        return st.inner.c;\n    }\n\n    if ((long long) st.inner.ininner.u == st.inner.ininner.l) {\n        return 'e';\n    }\n    if ((long long) st.inner.ininner.u > st.inner.ininner.l) {\n        return 'g';\n    }\n\n    return 'o';\n}","position":{"start":{"line":415,"column":1,"offset":8498},"end":{"line":451,"column":4,"offset":9269},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":453,"column":8,"offset":9278},"end":{"line":453,"column":18,"offset":9288},"indent":[]}}],"position":{"start":{"line":453,"column":1,"offset":9271},"end":{"line":453,"column":18,"offset":9288},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"template<typename T, size_t N>\nT from_bytes(const char (&bytes)[N]) {\n    T result;\n    std::memcpy(&result, bytes, sizeof(result));\n    return result;\n}\n\n\nTEST(regression, operate_with_inner_unions_test_1)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({102, 0, 0, 0, 0, 0, 0, 0});\n\n\n    // Expected output\n    signed char expected = 'f';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_2)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({53, 0, 0, 0, 0, 0, 0, 0});\n\n    // Expected output\n    signed char expected = '5';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_3)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({15, 0, 0, 0, 0, 0, 0, 0});\n\n    // Expected output\n    signed char expected = '\\x0f';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_4)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({98, 0, 0, 0, 2, 0, 0, 0});\n\n    // Expected output\n    signed char expected = 'o';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_5)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({5, 0, -1, 0, 0, 0, 0, 0});\n\n    // Expected output\n    signed char expected = '5';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_6)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({104, 0, 0, 0, 0, 0, 0, 0});\n\n    // Expected output\n    signed char expected = 'e';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_7)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({5, 0, 0, 0, 0, 0, 0, 0});\n\n    // Expected output\n    signed char expected = '5';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_8)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({99, 0, 0, 0, 0, 0, 0, -128});\n\n    // Expected output\n    signed char expected = 'g';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}","position":{"start":{"line":455,"column":1,"offset":9290},"end":{"line":584,"column":4,"offset":12263},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pointers as parameters and return types","position":{"start":{"line":587,"column":4,"offset":12269},"end":{"line":587,"column":43,"offset":12308},"indent":[]}}],"position":{"start":{"line":587,"column":1,"offset":12266},"end":{"line":587,"column":43,"offset":12308},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"If a pointer is used as a return value, UTBot is not yet capable of determining if it is used as an array, so only value under the pointer itself will be checked in generated tests.","position":{"start":{"line":589,"column":3,"offset":12312},"end":{"line":589,"column":184,"offset":12493},"indent":[]}}],"position":{"start":{"line":589,"column":3,"offset":12312},"end":{"line":589,"column":184,"offset":12493},"indent":[]}}],"position":{"start":{"line":589,"column":1,"offset":12310},"end":{"line":589,"column":184,"offset":12493},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib//pointers/pointer_parameters.c#L7","children":[{"type":"text","value":"Source code example","position":{"start":{"line":591,"column":2,"offset":12496},"end":{"line":591,"column":21,"offset":12515},"indent":[]}}],"position":{"start":{"line":591,"column":1,"offset":12495},"end":{"line":591,"column":139,"offset":12633},"indent":[]}}],"position":{"start":{"line":591,"column":1,"offset":12495},"end":{"line":591,"column":139,"offset":12633},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"int c_strcmp(const char* a, const char *b) {\n    for (int i = 0; ; i++) {\n        if (a[i] != b[i]) {\n            return 0;\n        } else {\n            if (a[i] == '\\0' || b[i] == '\\0') {\n                return a[i] == '\\0' && b[i] == '\\0';\n            }\n        }\n    }\n}\n\nint void_pointer_char_usage(void *x) {\n    char *a = x;\n    return c_strcmp(a, \"hello\");\n}\n\nint* five_square_numbers(int from) {\n    static int sq[5];\n\n    for (int i = 0; i < 5; i++) {\n        sq[i] = from * from;\n        from++;\n    }\n\n    return sq;\n}","position":{"start":{"line":593,"column":1,"offset":12635},"end":{"line":621,"column":4,"offset":13175},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":623,"column":8,"offset":13184},"end":{"line":623,"column":18,"offset":13194},"indent":[]}}],"position":{"start":{"line":623,"column":1,"offset":13177},"end":{"line":623,"column":18,"offset":13194},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, c_strcmp_test_1)\n{\n    // Construct input\n    char a_buffer[] = \"\";\n    const char * a = a_buffer;\n    char b_buffer[] = \"\";\n    const char * b = b_buffer;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = c_strcmp(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, c_strcmp_test_2)\n{\n    // Construct input\n    char a_buffer[] = \"cbccccbccc\";\n    const char * a = a_buffer;\n    char b_buffer[] = \"cjcccccccc\";\n    const char * b = b_buffer;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = c_strcmp(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, c_strcmp_test_3)\n{\n    // Construct input\n    char a_buffer[] = \"abccccbcca\";\n    const char * a = a_buffer;\n    char b_buffer[] = \"icccccccci\";\n    const char * b = b_buffer;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = c_strcmp(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(error, void_pointer_char_usage_test_1)\n{\n    // Construct input\n    __attribute__ ((aligned(128))) unsigned char x = 104;\n\n    // Trigger the function\n    void_pointer_char_usage(&x);\n\n    FAIL() << \"Unreachable point. Function was supposed to fail, but actually completed successfully.\";\n}\n\nTEST(regression, void_pointer_char_usage_test_2)\n{\n    // Construct input\n    __attribute__ ((aligned(128))) unsigned char x = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = void_pointer_char_usage(&x);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, five_square_numbers_test_1)\n{\n    // Construct input\n    int from = 0;\n\n    // Expected output\n    int expected[1] = {0};\n\n    // Trigger the function\n    int * actual = five_square_numbers(from);\n\n    // Check results\n    for (int it_0_0 = 0; it_0_0 < 1; it_0_0 ++) {\n        EXPECT_EQ(expected[it_0_0], actual[it_0_0]);\n    }\n}","position":{"start":{"line":625,"column":1,"offset":13196},"end":{"line":722,"column":4,"offset":15216},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pointers as struct fields members","position":{"start":{"line":725,"column":4,"offset":15222},"end":{"line":725,"column":37,"offset":15255},"indent":[]}}],"position":{"start":{"line":725,"column":1,"offset":15219},"end":{"line":725,"column":37,"offset":15255},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib//structures/structs/structs_with_pointers.c#L28","children":[{"type":"text","value":"Source code example","position":{"start":{"line":727,"column":2,"offset":15258},"end":{"line":727,"column":21,"offset":15277},"indent":[]}}],"position":{"start":{"line":727,"column":1,"offset":15257},"end":{"line":727,"column":153,"offset":15409},"indent":[]}}],"position":{"start":{"line":727,"column":1,"offset":15257},"end":{"line":727,"column":153,"offset":15409},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"struct List {\n    struct List * next;\n    int val;\n};\n\nint list_sum_sign(struct List *head) {\n    int sum = list_sum(head);\n    if (sum > 0) {\n        return 1;\n    } else if (sum < 0) {\n        return -1;\n    } else {\n        return 0;\n    }\n}","position":{"start":{"line":729,"column":1,"offset":15411},"end":{"line":745,"column":4,"offset":15666},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":747,"column":8,"offset":15675},"end":{"line":747,"column":18,"offset":15685},"indent":[]}}],"position":{"start":{"line":747,"column":1,"offset":15668},"end":{"line":747,"column":18,"offset":15685},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, list_sum_sign_test_1)\n{\n    // Construct input\n    struct List head = {NULL, 0};\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = list_sum_sign(&head);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, list_sum_sign_test_2)\n{\n    // Construct input\n    struct List head = {NULL, -10};\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = list_sum_sign(&head);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, list_sum_sign_test_3)\n{\n    // Construct input\n    struct List head = {NULL, 1};\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = list_sum_sign(&head);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}","position":{"start":{"line":749,"column":1,"offset":15687},"end":{"line":794,"column":4,"offset":16509},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Pointers to functions","position":{"start":{"line":797,"column":4,"offset":16515},"end":{"line":797,"column":25,"offset":16536},"indent":[]}}],"position":{"start":{"line":797,"column":1,"offset":16512},"end":{"line":797,"column":25,"offset":16536},"indent":[]}},{"type":"blockquote","children":[{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If return type is a pointer to function, UTBot doesn't checking expected value - comparing pointers doesn't make any sense.","position":{"start":{"line":799,"column":5,"offset":16542},"end":{"line":799,"column":128,"offset":16665},"indent":[]}}],"position":{"start":{"line":799,"column":5,"offset":16542},"end":{"line":799,"column":128,"offset":16665},"indent":[]}}],"position":{"start":{"line":799,"column":3,"offset":16540},"end":{"line":799,"column":128,"offset":16665},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We support arrays of pointers to functions also, but 1-dimensional only.","position":{"start":{"line":800,"column":5,"offset":16670},"end":{"line":800,"column":77,"offset":16742},"indent":[]}}],"position":{"start":{"line":800,"column":5,"offset":16670},"end":{"line":800,"column":77,"offset":16742},"indent":[]}}],"position":{"start":{"line":800,"column":3,"offset":16668},"end":{"line":800,"column":77,"offset":16742},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If a function takes pointer to another function as parameter, UTBot generates stub for this parameter.","position":{"start":{"line":801,"column":5,"offset":16747},"end":{"line":801,"column":107,"offset":16849},"indent":[]}}],"position":{"start":{"line":801,"column":5,"offset":16747},"end":{"line":801,"column":107,"offset":16849},"indent":[]}}],"position":{"start":{"line":801,"column":3,"offset":16745},"end":{"line":801,"column":107,"offset":16849},"indent":[]}}],"position":{"start":{"line":799,"column":3,"offset":16540},"end":{"line":801,"column":107,"offset":16849},"indent":[3,3]}}],"position":{"start":{"line":799,"column":1,"offset":16538},"end":{"line":801,"column":107,"offset":16849},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/pointers/function_pointers.c#L66","children":[{"type":"text","value":"Source code example","position":{"start":{"line":803,"column":2,"offset":16852},"end":{"line":803,"column":21,"offset":16871},"indent":[]}}],"position":{"start":{"line":803,"column":1,"offset":16851},"end":{"line":803,"column":138,"offset":16988},"indent":[]}}],"position":{"start":{"line":803,"column":1,"offset":16851},"end":{"line":803,"column":138,"offset":16988},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"typedef int (*op_func)(int, int);\n\nint f_add(int a, int b) {\n    return a + b;\n}\nint f_sub(int a, int b) {\n    return a - b;\n}\nint f_mul(int a, int b) {\n    return a * b;\n}\n\nop_func return_op(char op) {\n    switch(op) {\n        case '+': return f_add;\n        case '-': return f_sub;\n        case '*': return f_mul;\n    }\n    return NULL;\n}\n\nchar* pointerParam(char* (*f)(int*), int* x) {\n    if (*x == 1) {\n        return f(x);\n    } else{\n        return f(x + 5);\n    }\n}","position":{"start":{"line":805,"column":1,"offset":16990},"end":{"line":834,"column":4,"offset":17474},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":836,"column":8,"offset":17483},"end":{"line":836,"column":18,"offset":17493},"indent":[]}}],"position":{"start":{"line":836,"column":1,"offset":17476},"end":{"line":836,"column":18,"offset":17493},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"\nTEST(regression, return_op_test_1)\n{\n// Construct input\nchar op = '*';\n\n// Expected output\n// No output variable check for function returning pointer to function\n\n// Trigger the function\nreturn_op(op);\n\n// Check results\n// No check results for function returning pointer to function\n}\n\nTEST(regression, return_op_test_2)\n{\n// Construct input\nchar op = 'c';\n\n// Expected output\n// No output variable check for function returning pointer to function\n\n// Trigger the function\nreturn_op(op);\n\n// Check results\n// No check results for function returning pointer to function\n}\n\nTEST(regression, return_op_test_3)\n{\n// Construct input\nchar op = '-';\n\n// Expected output\n// No output variable check for function returning pointer to function\n\n// Trigger the function\nreturn_op(op);\n\n// Check results\n// No check results for function returning pointer to function\n}\n\nTEST(regression, return_op_test_4)\n{\n// Construct input\nchar op = '+';\n\n// Expected output\n// No output variable check for function returning pointer to function\n\n// Trigger the function\nreturn_op(op);\n\n// Check results\n// No check results for function returning pointer to function\n}\n\n\ntypedef char * (*pointerParam_f_arg)(int *);\nchar * _pointerParam_f_stub(int * param1) {\nreturn \"\";\n}\n\nTEST(regression, pointerParam_test_1)\n{\n// Construct input\npointerParam_f_arg f = *_pointerParam_f_stub;\nint x = 0;\n\n// Expected output\nchar expected = '\\0';\n\n// Trigger the function\nchar actual = *pointerParam(f, &x);\n\n// Check results\nEXPECT_EQ(expected, actual);\n}\n\nTEST(regression, pointerParam_test_2)\n{\n// Construct input\npointerParam_f_arg f = *_pointerParam_f_stub;\nint x = 1;\n\n// Expected output\nchar expected = '\\0';\n\n// Trigger the function\nchar actual = *pointerParam(f, &x);\n\n// Check results\nEXPECT_EQ(expected, actual);\n}\n","position":{"start":{"line":838,"column":1,"offset":17495},"end":{"line":938,"column":4,"offset":19292},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Arrays","position":{"start":{"line":941,"column":4,"offset":19298},"end":{"line":941,"column":10,"offset":19304},"indent":[]}}],"position":{"start":{"line":941,"column":1,"offset":19295},"end":{"line":941,"column":10,"offset":19304},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/structures/struct_arrays.c#L18","children":[{"type":"text","value":"Source code example","position":{"start":{"line":943,"column":2,"offset":19307},"end":{"line":943,"column":21,"offset":19326},"indent":[]}}],"position":{"start":{"line":943,"column":1,"offset":19306},"end":{"line":943,"column":136,"offset":19441},"indent":[]}}],"position":{"start":{"line":943,"column":1,"offset":19306},"end":{"line":943,"column":136,"offset":19441},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"struct Trio {\n    int a;\n    long long b;\n    short c;\n};\n\nint index_of_struct_with_equal_fields(struct Trio arr []) {\n    for (int i = 0; i < 10; i++) {\n        if (arr[i].a == arr[i].b) {\n            if (arr[i].b == arr[i].c) {\n                return i; \n            }\n        }\n    }\n\n    return -1;\n}","position":{"start":{"line":945,"column":1,"offset":19443},"end":{"line":963,"column":4,"offset":19758},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":965,"column":8,"offset":19767},"end":{"line":965,"column":18,"offset":19777},"indent":[]}}],"position":{"start":{"line":965,"column":1,"offset":19760},"end":{"line":965,"column":18,"offset":19777},"indent":[]}},{"type":"jsx","value":"<!--\nThe tag below is used in order to avoid Liquid exception when deploy on gh pages.\n-->","position":{"start":{"line":967,"column":1,"offset":19779},"end":{"line":969,"column":4,"offset":19869},"indent":[1,1]}},{"type":"definition","identifier":"//","label":"//","title":"{% raw %}","url":"#","position":{"start":{"line":970,"column":1,"offset":19870},"end":{"line":970,"column":20,"offset":19889},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, index_of_struct_with_equal_fields_test_1)\n{\n    // Construct input\n    struct Trio arr[10] = {{0, 1LL, 0}, {0, 4LL, 0}, {0, 1LL, 0}, {0, 2LL, 0}, {0, 8LL, 0}, {0, 8LL, 0}, {0, 4LL, 0}, {0, 4LL, 0}, {0, 1LL, 0}, {0, 1LL, 0}};\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, index_of_struct_with_equal_fields_test_2)\n{\n    // Construct input\n    struct Trio arr[10] = {{0, 1LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}};\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, index_of_struct_with_equal_fields_test_3)\n{\n    // Construct input\n    struct Trio arr[10] = {{0, 1LL, 0}, {8, 8LL, 0}, {2, 2LL, 0}, {0, 2LL, 0}, {1, 1LL, 0}, {1, 1LL, 0}, {0, 4LL, 0}, {1, 1LL, 0}, {0, 1LL, 0}, {2, 2LL, 0}};\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, index_of_struct_with_equal_fields_test_4)\n{\n    // Construct input\n    struct Trio arr[10] = {{2, 2LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}};\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, index_of_struct_with_equal_fields_test_5)\n{\n    // Construct input\n    struct Trio arr[10] = {{0, 1LL, 0}, {0, 4LL, 0}, {0, 1LL, 0}, {2, 2LL, 0}, {0, 8LL, 0}, {0, 8LL, 0}, {0, 4LL, 0}, {0, 4LL, 0}, {2, 2LL, 0}, {2, 2LL, 0}};\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, index_of_struct_with_equal_fields_test_6)\n{\n    // Construct input\n    struct Trio arr[10] = {{0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}};\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}","position":{"start":{"line":971,"column":1,"offset":19890},"end":{"line":1061,"column":4,"offset":22494},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"definition","identifier":"//","label":"//","title":"{% endraw %}","url":"#","position":{"start":{"line":1062,"column":1,"offset":22495},"end":{"line":1062,"column":22,"offset":22516},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Multidimensional arrays and pointers","position":{"start":{"line":1065,"column":4,"offset":22522},"end":{"line":1065,"column":40,"offset":22558},"indent":[]}}],"position":{"start":{"line":1065,"column":1,"offset":22519},"end":{"line":1065,"column":40,"offset":22558},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Arrays of any dimensions are supported, but as for pointers, only 1-d and 2-d are supported.","position":{"start":{"line":1067,"column":3,"offset":22562},"end":{"line":1067,"column":95,"offset":22654},"indent":[]}}],"position":{"start":{"line":1067,"column":3,"offset":22562},"end":{"line":1067,"column":95,"offset":22654},"indent":[]}}],"position":{"start":{"line":1067,"column":1,"offset":22560},"end":{"line":1067,"column":95,"offset":22654},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/multi_arrays.c#L67","children":[{"type":"text","value":"Source code example","position":{"start":{"line":1069,"column":2,"offset":22657},"end":{"line":1069,"column":21,"offset":22676},"indent":[]}}],"position":{"start":{"line":1069,"column":1,"offset":22656},"end":{"line":1069,"column":124,"offset":22779},"indent":[]}}],"position":{"start":{"line":1069,"column":1,"offset":22656},"end":{"line":1069,"column":124,"offset":22779},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"int some_method(int ** pointer2d) {\n    int x = 2;\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            if (pointer2d[i][j] > 0) {\n                return i * 2 + j;\n            }\n        }\n    }\n    return -1;\n}","position":{"start":{"line":1071,"column":1,"offset":22781},"end":{"line":1083,"column":4,"offset":23034},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":1085,"column":8,"offset":23043},"end":{"line":1085,"column":18,"offset":23053},"indent":[]}}],"position":{"start":{"line":1085,"column":1,"offset":23036},"end":{"line":1085,"column":18,"offset":23053},"indent":[]}},{"type":"jsx","value":"<!--\nThe tag below is used in order to avoid Liquid exception when deploy on gh pages.\n-->","position":{"start":{"line":1087,"column":1,"offset":23055},"end":{"line":1089,"column":4,"offset":23145},"indent":[1,1]}},{"type":"definition","identifier":"//","label":"//","title":"{% raw %}","url":"#","position":{"start":{"line":1090,"column":1,"offset":23146},"end":{"line":1090,"column":20,"offset":23165},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, some_method_test_1)\n{\n    // Construct input\n    int _pointer2d[2][2] = {{0, 0}, {0, 0}};\n    int ** pointer2d = (int **) calloc(3, sizeof(int *));\n    for (int it_9_0 = 0; it_9_0 < 2; it_9_0 ++) {\n        pointer2d[it_9_0] = _pointer2d[it_9_0];\n    }\n    pointer2d[2] = NULL;\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = some_method(pointer2d);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, some_method_test_2)\n{\n    // Construct input\n    int _pointer2d[2][2] = {{0, 1}, {0, 0}};\n    int ** pointer2d = (int **) calloc(3, sizeof(int *));\n    for (int it_9_0 = 0; it_9_0 < 2; it_9_0 ++) {\n        pointer2d[it_9_0] = _pointer2d[it_9_0];\n    }\n    pointer2d[2] = NULL;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = some_method(pointer2d);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, some_method_test_3)\n{\n    // Construct input\n    int _pointer2d[2][2] = {{0, 0}, {1, 0}};\n    int ** pointer2d = (int **) calloc(3, sizeof(int *));\n    for (int it_9_0 = 0; it_9_0 < 2; it_9_0 ++) {\n        pointer2d[it_9_0] = _pointer2d[it_9_0];\n    }\n    pointer2d[2] = NULL;\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = some_method(pointer2d);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, some_method_test_4)\n{\n    // Construct input\n    int _pointer2d[2][2] = {{1, 0}, {0, 0}};\n    int ** pointer2d = (int **) calloc(3, sizeof(int *));\n    for (int it_9_0 = 0; it_9_0 < 2; it_9_0 ++) {\n        pointer2d[it_9_0] = _pointer2d[it_9_0];\n    }\n    pointer2d[2] = NULL;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = some_method(pointer2d);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}","position":{"start":{"line":1091,"column":1,"offset":23166},"end":{"line":1171,"column":4,"offset":25048},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"definition","identifier":"//","label":"//","title":"{% endraw %}","url":"#","position":{"start":{"line":1172,"column":1,"offset":25049},"end":{"line":1172,"column":22,"offset":25070},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Enums","position":{"start":{"line":1175,"column":4,"offset":25076},"end":{"line":1175,"column":9,"offset":25081},"indent":[]}}],"position":{"start":{"line":1175,"column":1,"offset":25073},"end":{"line":1175,"column":9,"offset":25081},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/structures/enums.c#L9","children":[{"type":"text","value":"Source code example","position":{"start":{"line":1177,"column":2,"offset":25084},"end":{"line":1177,"column":21,"offset":25103},"indent":[]}}],"position":{"start":{"line":1177,"column":1,"offset":25083},"end":{"line":1177,"column":127,"offset":25209},"indent":[]}}],"position":{"start":{"line":1177,"column":1,"offset":25083},"end":{"line":1177,"column":127,"offset":25209},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"enum Sign {\n    NEGATIVE,\n    ZERO,\n    POSITIVE\n};\n\n\nint enumSignToInt(enum Sign s) {\n    if (s == ZERO) {\n      return 0;\n    }\n    if (s == NEGATIVE) {\n        return -1;\n    } else {\n        return 1;\n    } \n}\n\nint enumSignPointerToInt(enum Sign *s) {\n    return enumSignToInt(*s);\n}","position":{"start":{"line":1179,"column":1,"offset":25211},"end":{"line":1201,"column":4,"offset":25509},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":1203,"column":8,"offset":25518},"end":{"line":1203,"column":18,"offset":25528},"indent":[]}}],"position":{"start":{"line":1203,"column":1,"offset":25511},"end":{"line":1203,"column":18,"offset":25528},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, enumSignToInt_test_1)\n{\n    // Construct input\n    enum Sign s = POSITIVE;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = enumSignToInt(s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, enumSignToInt_test_2)\n{\n    // Construct input\n    enum Sign s = NEGATIVE;\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = enumSignToInt(s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, enumSignToInt_test_3)\n{\n    // Construct input\n    enum Sign s = ZERO;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = enumSignToInt(s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\n\nTEST(regression, enumSignPointerToInt_test_1)\n{\n    // Construct input\n    enum Sign s = NEGATIVE;\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = enumSignPointerToInt(&s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, enumSignPointerToInt_test_2)\n{\n    // Construct input\n    enum Sign s = POSITIVE;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = enumSignPointerToInt(&s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, enumSignPointerToInt_test_3)\n{\n    // Construct input\n    enum Sign s = ZERO;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = enumSignPointerToInt(&s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}","position":{"start":{"line":1205,"column":1,"offset":25530},"end":{"line":1296,"column":4,"offset":27139},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Typedef","position":{"start":{"line":1299,"column":4,"offset":27145},"end":{"line":1299,"column":11,"offset":27152},"indent":[]}}],"position":{"start":{"line":1299,"column":1,"offset":27142},"end":{"line":1299,"column":11,"offset":27152},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/typedefs_1.c#L20","children":[{"type":"text","value":"Source code example","position":{"start":{"line":1301,"column":2,"offset":27155},"end":{"line":1301,"column":21,"offset":27174},"indent":[]}}],"position":{"start":{"line":1301,"column":1,"offset":27154},"end":{"line":1301,"column":128,"offset":27281},"indent":[]}}],"position":{"start":{"line":1301,"column":1,"offset":27154},"end":{"line":1301,"column":128,"offset":27281},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"typedef struct __typeDefStruct {\n    int a;\n} TypeDefStruct2;\n\nint sign_of_typedef_struct2(TypeDefStruct2 x) {\n    if (x.a > 0) {\n        return 1;\n    }\n\n    if (x.a < 0) {\n        return -1;\n    }\n\n    return 0;\n}","position":{"start":{"line":1303,"column":1,"offset":27283},"end":{"line":1319,"column":4,"offset":27509},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":1321,"column":8,"offset":27518},"end":{"line":1321,"column":18,"offset":27528},"indent":[]}}],"position":{"start":{"line":1321,"column":1,"offset":27511},"end":{"line":1321,"column":18,"offset":27528},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, sign_of_typedef_struct2_test_1)\n{\n    // Construct input\n    TypeDefStruct2 x = {0};\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = sign_of_typedef_struct2(x);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, sign_of_typedef_struct2_test_2)\n{\n    // Construct input\n    TypeDefStruct2 x = {-10};\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = sign_of_typedef_struct2(x);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, sign_of_typedef_struct2_test_3)\n{\n    // Construct input\n    TypeDefStruct2 x = {1};\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = sign_of_typedef_struct2(x);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}","position":{"start":{"line":1323,"column":1,"offset":27530},"end":{"line":1368,"column":4,"offset":28382},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Static functions","position":{"start":{"line":1371,"column":4,"offset":28388},"end":{"line":1371,"column":20,"offset":28404},"indent":[]}}],"position":{"start":{"line":1371,"column":1,"offset":28385},"end":{"line":1371,"column":20,"offset":28404},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/static.c#L8","children":[{"type":"text","value":"Source code example","position":{"start":{"line":1373,"column":2,"offset":28407},"end":{"line":1373,"column":21,"offset":28426},"indent":[]}}],"position":{"start":{"line":1373,"column":1,"offset":28406},"end":{"line":1373,"column":117,"offset":28522},"indent":[]}}],"position":{"start":{"line":1373,"column":1,"offset":28406},"end":{"line":1373,"column":117,"offset":28522},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"static int static_simple(int dx)\n{\n    if (x > 0)\n    {\n        return x + dx;\n    }\n    if (x < 0)\n    {\n        return -x + dx;\n    }\n    return 0;\n}","position":{"start":{"line":1375,"column":1,"offset":28524},"end":{"line":1388,"column":4,"offset":28686},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":1390,"column":8,"offset":28695},"end":{"line":1390,"column":18,"offset":28705},"indent":[]}}],"position":{"start":{"line":1390,"column":1,"offset":28688},"end":{"line":1390,"column":18,"offset":28705},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, static_simple_test_1)\n{\n    // Initialize global variables\n    x = 0;\n\n    // Construct input\n    int dx = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = static_simple(dx);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    int expected_x = 0;\n    EXPECT_EQ(expected_x, x);\n}\n\nTEST(regression, static_simple_test_2)\n{\n    // Initialize global variables\n    x = -10;\n\n    // Construct input\n    int dx = -10;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = static_simple(dx);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    int expected_x = -10;\n    EXPECT_EQ(expected_x, x);\n}\n\nTEST(regression, static_simple_test_3)\n{\n    // Initialize global variables\n    x = 1;\n\n    // Construct input\n    int dx = -1;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = static_simple(dx);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    int expected_x = 1;\n    EXPECT_EQ(expected_x, x);\n}","position":{"start":{"line":1392,"column":1,"offset":28707},"end":{"line":1455,"column":4,"offset":29863},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Qualifiers: const, volatile, restrict etc.","position":{"start":{"line":1458,"column":4,"offset":29869},"end":{"line":1458,"column":46,"offset":29911},"indent":[]}}],"position":{"start":{"line":1458,"column":1,"offset":29866},"end":{"line":1458,"column":46,"offset":29911},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/keywords/qualifiers.c#L49","children":[{"type":"text","value":"Source code example","position":{"start":{"line":1460,"column":2,"offset":29914},"end":{"line":1460,"column":21,"offset":29933},"indent":[]}}],"position":{"start":{"line":1460,"column":1,"offset":29913},"end":{"line":1460,"column":131,"offset":30043},"indent":[]}}],"position":{"start":{"line":1460,"column":1,"offset":29913},"end":{"line":1460,"column":131,"offset":30043},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"const char * const foo_bar(volatile int a) {\n    if (a < 0) {\n        return \"-1\";\n    } else if (a == 0) {\n        return \"0\";\n    } else {\n        return \"1\";\n    }\n}","position":{"start":{"line":1462,"column":1,"offset":30045},"end":{"line":1472,"column":4,"offset":30224},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":1474,"column":8,"offset":30233},"end":{"line":1474,"column":18,"offset":30243},"indent":[]}}],"position":{"start":{"line":1474,"column":1,"offset":30226},"end":{"line":1474,"column":18,"offset":30243},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, foo_bar_test_1)\n{\n    // Construct input\n    int a = 2;\n\n    // Expected output\n    char expected = '1';\n\n    // Trigger the function\n    const char actual = *foo_bar(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, foo_bar_test_2)\n{\n    // Construct input\n    int a = 0;\n\n    // Expected output\n    char expected = '0';\n\n    // Trigger the function\n    const char actual = *foo_bar(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, foo_bar_test_3)\n{\n    // Construct input\n    int a = -1;\n\n    // Expected output\n    char expected = '-';\n\n    // Trigger the function\n    const char actual = *foo_bar(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}","position":{"start":{"line":1476,"column":1,"offset":30245},"end":{"line":1521,"column":4,"offset":30993},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Global variables","position":{"start":{"line":1524,"column":4,"offset":30999},"end":{"line":1524,"column":20,"offset":31015},"indent":[]}}],"position":{"start":{"line":1524,"column":1,"offset":30996},"end":{"line":1524,"column":20,"offset":31015},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/globals.c#L64","children":[{"type":"text","value":"Source code example","position":{"start":{"line":1526,"column":2,"offset":31018},"end":{"line":1526,"column":21,"offset":31037},"indent":[]}}],"position":{"start":{"line":1526,"column":1,"offset":31017},"end":{"line":1526,"column":119,"offset":31135},"indent":[]}}],"position":{"start":{"line":1526,"column":1,"offset":31017},"end":{"line":1526,"column":119,"offset":31135},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"static char* global_mutable_string;\nstatic const char* global_const_string;\n\n\nchar use_global_strings() {\n    if (!global_mutable_string) {\n        return 'M';\n    }\n    if (!global_const_string) {\n        return 'C';\n    }\n    char c = global_const_string[0];\n    char res;\n    if (c >= 'a' && c <= 'z') {\n        res = 'A' + c - 'a';\n    } else {\n        res = c;\n    }\n    global_mutable_string[0] = res;\n    return res;\n}","position":{"start":{"line":1528,"column":1,"offset":31137},"end":{"line":1550,"column":4,"offset":31573},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":1552,"column":8,"offset":31582},"end":{"line":1552,"column":18,"offset":31592},"indent":[]}}],"position":{"start":{"line":1552,"column":1,"offset":31575},"end":{"line":1552,"column":18,"offset":31592},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, use_global_strings_test_1)\n{\n    // Initialize global variables\n    char global_mutable_string_buffer[] = \"ccacccbbbc\";\n    global_mutable_string = global_mutable_string_buffer;\n    char global_const_string_buffer[] = \"{ccaccccc{\";\n    global_const_string = global_const_string_buffer;\n\n\n    // Expected output\n    char expected = '{';\n\n    // Trigger the function\n    char actual = use_global_strings();\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    char expected_global_mutable_string = '{';\n    EXPECT_EQ(expected_global_mutable_string, (*global_mutable_string));\n    char expected_global_const_string = '{';\n    EXPECT_EQ(expected_global_const_string, (*global_const_string));\n}\n\nTEST(regression, use_global_strings_test_2)\n{\n    // Initialize global variables\n    char global_mutable_string_buffer[] = \"ccacccbbbc\";\n    global_mutable_string = global_mutable_string_buffer;\n    char global_const_string_buffer[] = \"cccacccccc\";\n    global_const_string = global_const_string_buffer;\n\n\n    // Expected output\n    char expected = 'C';\n\n    // Trigger the function\n    char actual = use_global_strings();\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    char expected_global_mutable_string = 'C';\n    EXPECT_EQ(expected_global_mutable_string, (*global_mutable_string));\n    char expected_global_const_string = 'c';\n    EXPECT_EQ(expected_global_const_string, (*global_const_string));\n}\n\nTEST(regression, use_global_strings_test_3)\n{\n    // Initialize global variables\n    char global_mutable_string_buffer[] = \"ccacccbbbc\";\n    global_mutable_string = global_mutable_string_buffer;\n    char global_const_string_buffer[] = \"\";\n    global_const_string = global_const_string_buffer;\n\n\n    // Expected output\n    char expected = '\\0';\n\n    // Trigger the function\n    char actual = use_global_strings();\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    char expected_global_mutable_string = '\\0';\n    EXPECT_EQ(expected_global_mutable_string, (*global_mutable_string));\n    char expected_global_const_string = '\\0';\n    EXPECT_EQ(expected_global_const_string, (*global_const_string));\n}","position":{"start":{"line":1554,"column":1,"offset":31594},"end":{"line":1626,"column":4,"offset":33828},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":1630,"column":1,"offset":33832},"end":{"line":1630,"column":31,"offset":33862},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1630,"column":31,"offset":33862}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/unittestbot.github.io/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"supported-c-syntax\"\n    }}>{`Supported C Syntax`}</h1>\n    <p>{`UnitTestBot supports the majority of C language features. Here you can find test cases examples on main syntax\nconstructions. All code snippets below were taken\nfrom `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/\"\n      }}>{`this directory`}</a>{`.`}</p>\n    {\n      /* toc */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#integral-types\"\n        }}>{`Integral types`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#character-types\"\n        }}>{`Character types`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#floating-point-types\"\n        }}>{`Floating-point types`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#_bool-type\"\n        }}>{`_Bool type`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#structs-as-parameters\"\n        }}>{`Structs as parameters`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#structs-as-return-values\"\n        }}>{`Structs as return values`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#unions\"\n        }}>{`Unions`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#pointers-as-parameters-and-return-types\"\n        }}>{`Pointers as parameters and return types`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#pointers-as-struct-fields-members\"\n        }}>{`Pointers as struct fields members`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#pointers-to-functions\"\n        }}>{`Pointers to functions`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#arrays\"\n        }}>{`Arrays`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#multidimensional-arrays-and-pointers\"\n        }}>{`Multidimensional arrays and pointers`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#enums\"\n        }}>{`Enums`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#typedef\"\n        }}>{`Typedef`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#static-functions\"\n        }}>{`Static functions`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#qualifiers-const-volatile-restrict-etc\"\n        }}>{`Qualifiers: const, volatile, restrict etc.`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#global-variables\"\n        }}>{`Global variables`}</a></li>\n    </ul>\n    {\n      /* tocstop */\n    }\n    <h2 {...{\n      \"id\": \"integral-types\"\n    }}>{`Integral types`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`short, unsigned short, int, unsigned int, long, unsigned long, long long, unsigned long long, unsigned char`}</inlineCode></p>\n    </blockquote>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/types.c#L23\"\n      }}>{`Source code example`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`signed long long int max_long(long long a, signed long long b) {\n    if (a > b) {\n        return a;\n    }\n    return b;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, max_long_test_1)\n{\n    // Construct input\n    long long a = 0LL;\n    long long b = -1LL;\n\n    // Expected output\n    long long expected = 0LL;\n\n    // Trigger the function\n    long long actual = max_long(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, max_long_test_2)\n{\n    // Construct input\n    long long a = 0LL;\n    long long b = 0LL;\n\n    // Expected output\n    long long expected = 0LL;\n\n    // Trigger the function\n    long long actual = max_long(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"character-types\"\n    }}>{`Character types`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`char, signed char`}</inlineCode></p>\n    </blockquote>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/types.c#L42\"\n      }}>{`Source code example`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`signed char some_func(char a, unsigned char b) {\n    if (b == 'z' && a > b) return a;\n    if (b != 'z') return b;\n    return '0';\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-1\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, some_func_test_1)\n{\n    // Construct input\n    char a = 'a';\n    unsigned char b = 122;\n\n    // Expected output\n    signed char expected = '0';\n\n    // Trigger the function\n    signed char actual = some_func(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, some_func_test_2)\n{\n    // Construct input\n    char a = 'a';\n    unsigned char b = 120;\n\n    // Expected output\n    signed char expected = 'x';\n\n    // Trigger the function\n    signed char actual = some_func(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, some_func_test_3)\n{\n    // Construct input\n    char a = '{';\n    unsigned char b = 122;\n\n    // Expected output\n    signed char expected = '{';\n\n    // Trigger the function\n    signed char actual = some_func(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(error, some_func_test_4)\n{\n    // Construct input\n    char a = 'a';\n    unsigned char b = 128;\n\n    // Trigger the function\n    some_func(a, b);\n\n    FAIL() << \"Unreachable point. Function was supposed to fail, but actually completed successfully.\";\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"floating-point-types\"\n    }}>{`Floating-point types`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`double, float, long double`}</inlineCode></p>\n    </blockquote>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/floats/floating_point.c#L30\"\n      }}>{`Source code example`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`float long_double_arith(long double x) {\n    x *= 2;\n    x -= 3.21;\n    x *= fabsl(x);\n    if (x == 1.0) {\n        return 1.0;\n    } else {\n        return 3.5;\n    }\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-2\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, long_double_arith_test_1)\n{\n    // Construct input\n    long double x = 2.105000e+00;\n\n    // Expected output\n    float expected = 1.000000e+00;\n\n    // Trigger the function\n    float actual = long_double_arith(x);\n\n    // Check results\n    EXPECT_NEAR(expected, actual, utbot_abs_error);\n}\n\nTEST(regression, long_double_arith_test_2)\n{\n    // Construct input\n    long double x = 0.000000e+00;\n\n    // Expected output\n    float expected = 3.500000e+00;\n\n    // Trigger the function\n    float actual = long_double_arith(x);\n\n    // Check results\n    EXPECT_NEAR(expected, actual, utbot_abs_error);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"_bool-type\"\n    }}>{`_Bool type`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`There is also a type alias bool for _Bool, defined in `}<inlineCode parentName=\"p\">{`<stdbool.h>`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/types.c#L48\"\n      }}>{`Source code example`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`int fun_that_accept_bools(_Bool a, bool b) {\n    if (a && b) return 1;\n    if (a) return 2;\n    if (b) return 3;\n    return 4;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-3\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, fun_that_accept_bools_test_1)\n{\n    // Construct input\n    bool a = true;\n    bool b = false;\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = fun_that_accept_bools(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_2)\n{\n    // Construct input\n    bool a = false;\n    bool b = false;\n\n    // Expected output\n    int expected = 4;\n\n    // Trigger the function\n    int actual = fun_that_accept_bools(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_3)\n{\n    // Construct input\n    bool a = false;\n    bool b = true;\n\n    // Expected output\n    int expected = 3;\n\n    // Trigger the function\n    int actual = fun_that_accept_bools(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_4)\n{\n    // Construct input\n    bool a = true;\n    bool b = true;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = fun_that_accept_bools(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"structs-as-parameters\"\n    }}>{`Structs as parameters`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/types.c#L122\"\n      }}>{`Source code example`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`struct SupportedStruct5 {\n    short b;\n    const int a;\n    char c;\n};\n\nint structWithConstFields(struct SupportedStruct5 st) {\n    if (st.a == 0) {\n        return 1;\n    }\n    return 2;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-4\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, structWithConstFields_test_1)\n{\n    // Construct input\n    struct SupportedStruct5 st = {0, 0, 'c'};\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = structWithConstFields(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, structWithConstFields_test_2)\n{\n    // Construct input\n    struct SupportedStruct5 st = {0, -1, 'c'};\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = structWithConstFields(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"structs-as-return-values\"\n    }}>{`Structs as return values`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/types.c#L84\"\n      }}>{`Source code example`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`struct SupportedStruct4 {\n    char* c;\n};\n\nconst struct SupportedStruct4 structWithConstPointerReturn(int a) {\n    if (a % 2 == 0) {\n        struct SupportedStruct4 res = {.c = \"abcd\"};\n        return res;\n    }\n    struct SupportedStruct4 res = {.c = \"ABCD\"};\n    return res;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-5\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, structWithConstPointerReturn_test_1)\n{\n    // Construct input\n    int a = 1;\n\n    // Expected output\n    struct SupportedStruct4 expected = {NULL};\n\n    // Trigger the function\n    const struct SupportedStruct4 actual = structWithConstPointerReturn(a);\n\n    // Check results\n}\n\nTEST(regression, structWithConstPointerReturn_test_2)\n{\n    // Construct input\n    int a = 0;\n\n    // Expected output\n    struct SupportedStruct4 expected = {NULL};\n\n    // Trigger the function\n    const struct SupportedStruct4 actual = structWithConstPointerReturn(a);\n\n    // Check results\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"unions\"\n    }}>{`Unions`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/structures/simple_unions.c#L56\"\n      }}>{`Source code example`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`union MainUnion {\n    union InnerUnion {\n        union InInnerUnion {\n            unsigned int u;\n            long long l;\n        };\n        char c;\n        union InInnerUnion ininner;\n        short s;\n    } inner;\n\n    int x;\n    long long y;\n};\n\nsigned char operate_with_inner_unions(union MainUnion st) {\n    if (st.x == 5 || st.y == 5 || st.inner.c == '5' ||\n        st.inner.s == 5 || st.inner.ininner.l == 5 || st.inner.ininner.u == 5) {\n        return '5';\n    }\n\n\n    if (st.x == 5 || st.y == 102 || st.inner.s == 15) {\n        return st.inner.c;\n    }\n\n    if ((long long) st.inner.ininner.u == st.inner.ininner.l) {\n        return 'e';\n    }\n    if ((long long) st.inner.ininner.u > st.inner.ininner.l) {\n        return 'g';\n    }\n\n    return 'o';\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-6\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`template<typename T, size_t N>\nT from_bytes(const char (&bytes)[N]) {\n    T result;\n    std::memcpy(&result, bytes, sizeof(result));\n    return result;\n}\n\n\nTEST(regression, operate_with_inner_unions_test_1)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({102, 0, 0, 0, 0, 0, 0, 0});\n\n\n    // Expected output\n    signed char expected = 'f';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_2)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({53, 0, 0, 0, 0, 0, 0, 0});\n\n    // Expected output\n    signed char expected = '5';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_3)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({15, 0, 0, 0, 0, 0, 0, 0});\n\n    // Expected output\n    signed char expected = '\\\\x0f';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_4)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({98, 0, 0, 0, 2, 0, 0, 0});\n\n    // Expected output\n    signed char expected = 'o';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_5)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({5, 0, -1, 0, 0, 0, 0, 0});\n\n    // Expected output\n    signed char expected = '5';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_6)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({104, 0, 0, 0, 0, 0, 0, 0});\n\n    // Expected output\n    signed char expected = 'e';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_7)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({5, 0, 0, 0, 0, 0, 0, 0});\n\n    // Expected output\n    signed char expected = '5';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, operate_with_inner_unions_test_8)\n{\n    // Construct input\n    union MainUnion st = from_bytes<MainUnion>({99, 0, 0, 0, 0, 0, 0, -128});\n\n    // Expected output\n    signed char expected = 'g';\n\n    // Trigger the function\n    signed char actual = operate_with_inner_unions(st);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pointers-as-parameters-and-return-types\"\n    }}>{`Pointers as parameters and return types`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If a pointer is used as a return value, UTBot is not yet capable of determining if it is used as an array, so only value under the pointer itself will be checked in generated tests.`}</p>\n    </blockquote>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib//pointers/pointer_parameters.c#L7\"\n      }}>{`Source code example`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`int c_strcmp(const char* a, const char *b) {\n    for (int i = 0; ; i++) {\n        if (a[i] != b[i]) {\n            return 0;\n        } else {\n            if (a[i] == '\\\\0' || b[i] == '\\\\0') {\n                return a[i] == '\\\\0' && b[i] == '\\\\0';\n            }\n        }\n    }\n}\n\nint void_pointer_char_usage(void *x) {\n    char *a = x;\n    return c_strcmp(a, \"hello\");\n}\n\nint* five_square_numbers(int from) {\n    static int sq[5];\n\n    for (int i = 0; i < 5; i++) {\n        sq[i] = from * from;\n        from++;\n    }\n\n    return sq;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-7\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, c_strcmp_test_1)\n{\n    // Construct input\n    char a_buffer[] = \"\";\n    const char * a = a_buffer;\n    char b_buffer[] = \"\";\n    const char * b = b_buffer;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = c_strcmp(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, c_strcmp_test_2)\n{\n    // Construct input\n    char a_buffer[] = \"cbccccbccc\";\n    const char * a = a_buffer;\n    char b_buffer[] = \"cjcccccccc\";\n    const char * b = b_buffer;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = c_strcmp(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, c_strcmp_test_3)\n{\n    // Construct input\n    char a_buffer[] = \"abccccbcca\";\n    const char * a = a_buffer;\n    char b_buffer[] = \"icccccccci\";\n    const char * b = b_buffer;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = c_strcmp(a, b);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(error, void_pointer_char_usage_test_1)\n{\n    // Construct input\n    __attribute__ ((aligned(128))) unsigned char x = 104;\n\n    // Trigger the function\n    void_pointer_char_usage(&x);\n\n    FAIL() << \"Unreachable point. Function was supposed to fail, but actually completed successfully.\";\n}\n\nTEST(regression, void_pointer_char_usage_test_2)\n{\n    // Construct input\n    __attribute__ ((aligned(128))) unsigned char x = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = void_pointer_char_usage(&x);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, five_square_numbers_test_1)\n{\n    // Construct input\n    int from = 0;\n\n    // Expected output\n    int expected[1] = {0};\n\n    // Trigger the function\n    int * actual = five_square_numbers(from);\n\n    // Check results\n    for (int it_0_0 = 0; it_0_0 < 1; it_0_0 ++) {\n        EXPECT_EQ(expected[it_0_0], actual[it_0_0]);\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pointers-as-struct-fields-members\"\n    }}>{`Pointers as struct fields members`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib//structures/structs/structs_with_pointers.c#L28\"\n      }}>{`Source code example`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`struct List {\n    struct List * next;\n    int val;\n};\n\nint list_sum_sign(struct List *head) {\n    int sum = list_sum(head);\n    if (sum > 0) {\n        return 1;\n    } else if (sum < 0) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-8\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, list_sum_sign_test_1)\n{\n    // Construct input\n    struct List head = {NULL, 0};\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = list_sum_sign(&head);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, list_sum_sign_test_2)\n{\n    // Construct input\n    struct List head = {NULL, -10};\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = list_sum_sign(&head);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, list_sum_sign_test_3)\n{\n    // Construct input\n    struct List head = {NULL, 1};\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = list_sum_sign(&head);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pointers-to-functions\"\n    }}>{`Pointers to functions`}</h2>\n    <blockquote>\n      <ul parentName=\"blockquote\">\n        <li parentName=\"ul\">{`If return type is a pointer to function, UTBot doesn't checking expected value - comparing pointers doesn't make any sense.`}</li>\n        <li parentName=\"ul\">{`We support arrays of pointers to functions also, but 1-dimensional only.`}</li>\n        <li parentName=\"ul\">{`If a function takes pointer to another function as parameter, UTBot generates stub for this parameter.`}</li>\n      </ul>\n    </blockquote>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/pointers/function_pointers.c#L66\"\n      }}>{`Source code example`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`typedef int (*op_func)(int, int);\n\nint f_add(int a, int b) {\n    return a + b;\n}\nint f_sub(int a, int b) {\n    return a - b;\n}\nint f_mul(int a, int b) {\n    return a * b;\n}\n\nop_func return_op(char op) {\n    switch(op) {\n        case '+': return f_add;\n        case '-': return f_sub;\n        case '*': return f_mul;\n    }\n    return NULL;\n}\n\nchar* pointerParam(char* (*f)(int*), int* x) {\n    if (*x == 1) {\n        return f(x);\n    } else{\n        return f(x + 5);\n    }\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-9\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`\nTEST(regression, return_op_test_1)\n{\n// Construct input\nchar op = '*';\n\n// Expected output\n// No output variable check for function returning pointer to function\n\n// Trigger the function\nreturn_op(op);\n\n// Check results\n// No check results for function returning pointer to function\n}\n\nTEST(regression, return_op_test_2)\n{\n// Construct input\nchar op = 'c';\n\n// Expected output\n// No output variable check for function returning pointer to function\n\n// Trigger the function\nreturn_op(op);\n\n// Check results\n// No check results for function returning pointer to function\n}\n\nTEST(regression, return_op_test_3)\n{\n// Construct input\nchar op = '-';\n\n// Expected output\n// No output variable check for function returning pointer to function\n\n// Trigger the function\nreturn_op(op);\n\n// Check results\n// No check results for function returning pointer to function\n}\n\nTEST(regression, return_op_test_4)\n{\n// Construct input\nchar op = '+';\n\n// Expected output\n// No output variable check for function returning pointer to function\n\n// Trigger the function\nreturn_op(op);\n\n// Check results\n// No check results for function returning pointer to function\n}\n\n\ntypedef char * (*pointerParam_f_arg)(int *);\nchar * _pointerParam_f_stub(int * param1) {\nreturn \"\";\n}\n\nTEST(regression, pointerParam_test_1)\n{\n// Construct input\npointerParam_f_arg f = *_pointerParam_f_stub;\nint x = 0;\n\n// Expected output\nchar expected = '\\\\0';\n\n// Trigger the function\nchar actual = *pointerParam(f, &x);\n\n// Check results\nEXPECT_EQ(expected, actual);\n}\n\nTEST(regression, pointerParam_test_2)\n{\n// Construct input\npointerParam_f_arg f = *_pointerParam_f_stub;\nint x = 1;\n\n// Expected output\nchar expected = '\\\\0';\n\n// Trigger the function\nchar actual = *pointerParam(f, &x);\n\n// Check results\nEXPECT_EQ(expected, actual);\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arrays\"\n    }}>{`Arrays`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/structures/struct_arrays.c#L18\"\n      }}>{`Source code example`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`struct Trio {\n    int a;\n    long long b;\n    short c;\n};\n\nint index_of_struct_with_equal_fields(struct Trio arr []) {\n    for (int i = 0; i < 10; i++) {\n        if (arr[i].a == arr[i].b) {\n            if (arr[i].b == arr[i].c) {\n                return i; \n            }\n        }\n    }\n\n    return -1;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-10\"\n    }}>{`Tests code`}</h6>\n    {\n      /*\n      The tag below is used in order to avoid Liquid exception when deploy on gh pages.\n      */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, index_of_struct_with_equal_fields_test_1)\n{\n    // Construct input\n    struct Trio arr[10] = {{0, 1LL, 0}, {0, 4LL, 0}, {0, 1LL, 0}, {0, 2LL, 0}, {0, 8LL, 0}, {0, 8LL, 0}, {0, 4LL, 0}, {0, 4LL, 0}, {0, 1LL, 0}, {0, 1LL, 0}};\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, index_of_struct_with_equal_fields_test_2)\n{\n    // Construct input\n    struct Trio arr[10] = {{0, 1LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}};\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, index_of_struct_with_equal_fields_test_3)\n{\n    // Construct input\n    struct Trio arr[10] = {{0, 1LL, 0}, {8, 8LL, 0}, {2, 2LL, 0}, {0, 2LL, 0}, {1, 1LL, 0}, {1, 1LL, 0}, {0, 4LL, 0}, {1, 1LL, 0}, {0, 1LL, 0}, {2, 2LL, 0}};\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, index_of_struct_with_equal_fields_test_4)\n{\n    // Construct input\n    struct Trio arr[10] = {{2, 2LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}};\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, index_of_struct_with_equal_fields_test_5)\n{\n    // Construct input\n    struct Trio arr[10] = {{0, 1LL, 0}, {0, 4LL, 0}, {0, 1LL, 0}, {2, 2LL, 0}, {0, 8LL, 0}, {0, 8LL, 0}, {0, 4LL, 0}, {0, 4LL, 0}, {2, 2LL, 0}, {2, 2LL, 0}};\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, index_of_struct_with_equal_fields_test_6)\n{\n    // Construct input\n    struct Trio arr[10] = {{0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}, {0, 0LL, 0}};\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = index_of_struct_with_equal_fields(arr);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"multidimensional-arrays-and-pointers\"\n    }}>{`Multidimensional arrays and pointers`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Arrays of any dimensions are supported, but as for pointers, only 1-d and 2-d are supported.`}</p>\n    </blockquote>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/multi_arrays.c#L67\"\n      }}>{`Source code example`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`int some_method(int ** pointer2d) {\n    int x = 2;\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            if (pointer2d[i][j] > 0) {\n                return i * 2 + j;\n            }\n        }\n    }\n    return -1;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-11\"\n    }}>{`Tests code`}</h6>\n    {\n      /*\n      The tag below is used in order to avoid Liquid exception when deploy on gh pages.\n      */\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, some_method_test_1)\n{\n    // Construct input\n    int _pointer2d[2][2] = {{0, 0}, {0, 0}};\n    int ** pointer2d = (int **) calloc(3, sizeof(int *));\n    for (int it_9_0 = 0; it_9_0 < 2; it_9_0 ++) {\n        pointer2d[it_9_0] = _pointer2d[it_9_0];\n    }\n    pointer2d[2] = NULL;\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = some_method(pointer2d);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, some_method_test_2)\n{\n    // Construct input\n    int _pointer2d[2][2] = {{0, 1}, {0, 0}};\n    int ** pointer2d = (int **) calloc(3, sizeof(int *));\n    for (int it_9_0 = 0; it_9_0 < 2; it_9_0 ++) {\n        pointer2d[it_9_0] = _pointer2d[it_9_0];\n    }\n    pointer2d[2] = NULL;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = some_method(pointer2d);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, some_method_test_3)\n{\n    // Construct input\n    int _pointer2d[2][2] = {{0, 0}, {1, 0}};\n    int ** pointer2d = (int **) calloc(3, sizeof(int *));\n    for (int it_9_0 = 0; it_9_0 < 2; it_9_0 ++) {\n        pointer2d[it_9_0] = _pointer2d[it_9_0];\n    }\n    pointer2d[2] = NULL;\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = some_method(pointer2d);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, some_method_test_4)\n{\n    // Construct input\n    int _pointer2d[2][2] = {{1, 0}, {0, 0}};\n    int ** pointer2d = (int **) calloc(3, sizeof(int *));\n    for (int it_9_0 = 0; it_9_0 < 2; it_9_0 ++) {\n        pointer2d[it_9_0] = _pointer2d[it_9_0];\n    }\n    pointer2d[2] = NULL;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = some_method(pointer2d);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enums\"\n    }}>{`Enums`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/structures/enums.c#L9\"\n      }}>{`Source code example`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`enum Sign {\n    NEGATIVE,\n    ZERO,\n    POSITIVE\n};\n\n\nint enumSignToInt(enum Sign s) {\n    if (s == ZERO) {\n      return 0;\n    }\n    if (s == NEGATIVE) {\n        return -1;\n    } else {\n        return 1;\n    } \n}\n\nint enumSignPointerToInt(enum Sign *s) {\n    return enumSignToInt(*s);\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-12\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, enumSignToInt_test_1)\n{\n    // Construct input\n    enum Sign s = POSITIVE;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = enumSignToInt(s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, enumSignToInt_test_2)\n{\n    // Construct input\n    enum Sign s = NEGATIVE;\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = enumSignToInt(s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, enumSignToInt_test_3)\n{\n    // Construct input\n    enum Sign s = ZERO;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = enumSignToInt(s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\n\nTEST(regression, enumSignPointerToInt_test_1)\n{\n    // Construct input\n    enum Sign s = NEGATIVE;\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = enumSignPointerToInt(&s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, enumSignPointerToInt_test_2)\n{\n    // Construct input\n    enum Sign s = POSITIVE;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = enumSignPointerToInt(&s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, enumSignPointerToInt_test_3)\n{\n    // Construct input\n    enum Sign s = ZERO;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = enumSignPointerToInt(&s);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"typedef\"\n    }}>{`Typedef`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/typedefs_1.c#L20\"\n      }}>{`Source code example`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`typedef struct __typeDefStruct {\n    int a;\n} TypeDefStruct2;\n\nint sign_of_typedef_struct2(TypeDefStruct2 x) {\n    if (x.a > 0) {\n        return 1;\n    }\n\n    if (x.a < 0) {\n        return -1;\n    }\n\n    return 0;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-13\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, sign_of_typedef_struct2_test_1)\n{\n    // Construct input\n    TypeDefStruct2 x = {0};\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = sign_of_typedef_struct2(x);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, sign_of_typedef_struct2_test_2)\n{\n    // Construct input\n    TypeDefStruct2 x = {-10};\n\n    // Expected output\n    int expected = -1;\n\n    // Trigger the function\n    int actual = sign_of_typedef_struct2(x);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, sign_of_typedef_struct2_test_3)\n{\n    // Construct input\n    TypeDefStruct2 x = {1};\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = sign_of_typedef_struct2(x);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"static-functions\"\n    }}>{`Static functions`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/static.c#L8\"\n      }}>{`Source code example`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`static int static_simple(int dx)\n{\n    if (x > 0)\n    {\n        return x + dx;\n    }\n    if (x < 0)\n    {\n        return -x + dx;\n    }\n    return 0;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-14\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, static_simple_test_1)\n{\n    // Initialize global variables\n    x = 0;\n\n    // Construct input\n    int dx = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = static_simple(dx);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    int expected_x = 0;\n    EXPECT_EQ(expected_x, x);\n}\n\nTEST(regression, static_simple_test_2)\n{\n    // Initialize global variables\n    x = -10;\n\n    // Construct input\n    int dx = -10;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = static_simple(dx);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    int expected_x = -10;\n    EXPECT_EQ(expected_x, x);\n}\n\nTEST(regression, static_simple_test_3)\n{\n    // Initialize global variables\n    x = 1;\n\n    // Construct input\n    int dx = -1;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = static_simple(dx);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    int expected_x = 1;\n    EXPECT_EQ(expected_x, x);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"qualifiers-const-volatile-restrict-etc\"\n    }}>{`Qualifiers: const, volatile, restrict etc.`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/keywords/qualifiers.c#L49\"\n      }}>{`Source code example`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`const char * const foo_bar(volatile int a) {\n    if (a < 0) {\n        return \"-1\";\n    } else if (a == 0) {\n        return \"0\";\n    } else {\n        return \"1\";\n    }\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-15\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, foo_bar_test_1)\n{\n    // Construct input\n    int a = 2;\n\n    // Expected output\n    char expected = '1';\n\n    // Trigger the function\n    const char actual = *foo_bar(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, foo_bar_test_2)\n{\n    // Construct input\n    int a = 0;\n\n    // Expected output\n    char expected = '0';\n\n    // Trigger the function\n    const char actual = *foo_bar(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, foo_bar_test_3)\n{\n    // Construct input\n    int a = -1;\n\n    // Expected output\n    char expected = '-';\n\n    // Trigger the function\n    const char actual = *foo_bar(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"global-variables\"\n    }}>{`Global variables`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/globals.c#L64\"\n      }}>{`Source code example`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`static char* global_mutable_string;\nstatic const char* global_const_string;\n\n\nchar use_global_strings() {\n    if (!global_mutable_string) {\n        return 'M';\n    }\n    if (!global_const_string) {\n        return 'C';\n    }\n    char c = global_const_string[0];\n    char res;\n    if (c >= 'a' && c <= 'z') {\n        res = 'A' + c - 'a';\n    } else {\n        res = c;\n    }\n    global_mutable_string[0] = res;\n    return res;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-16\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, use_global_strings_test_1)\n{\n    // Initialize global variables\n    char global_mutable_string_buffer[] = \"ccacccbbbc\";\n    global_mutable_string = global_mutable_string_buffer;\n    char global_const_string_buffer[] = \"{ccaccccc{\";\n    global_const_string = global_const_string_buffer;\n\n\n    // Expected output\n    char expected = '{';\n\n    // Trigger the function\n    char actual = use_global_strings();\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    char expected_global_mutable_string = '{';\n    EXPECT_EQ(expected_global_mutable_string, (*global_mutable_string));\n    char expected_global_const_string = '{';\n    EXPECT_EQ(expected_global_const_string, (*global_const_string));\n}\n\nTEST(regression, use_global_strings_test_2)\n{\n    // Initialize global variables\n    char global_mutable_string_buffer[] = \"ccacccbbbc\";\n    global_mutable_string = global_mutable_string_buffer;\n    char global_const_string_buffer[] = \"cccacccccc\";\n    global_const_string = global_const_string_buffer;\n\n\n    // Expected output\n    char expected = 'C';\n\n    // Trigger the function\n    char actual = use_global_strings();\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    char expected_global_mutable_string = 'C';\n    EXPECT_EQ(expected_global_mutable_string, (*global_mutable_string));\n    char expected_global_const_string = 'c';\n    EXPECT_EQ(expected_global_const_string, (*global_const_string));\n}\n\nTEST(regression, use_global_strings_test_3)\n{\n    // Initialize global variables\n    char global_mutable_string_buffer[] = \"ccacccbbbc\";\n    global_mutable_string = global_mutable_string_buffer;\n    char global_const_string_buffer[] = \"\";\n    global_const_string = global_const_string_buffer;\n\n\n    // Expected output\n    char expected = '\\\\0';\n\n    // Trigger the function\n    char actual = use_global_strings();\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n    // Check global variables\n    char expected_global_mutable_string = '\\\\0';\n    EXPECT_EQ(expected_global_mutable_string, (*global_mutable_string));\n    char expected_global_const_string = '\\\\0';\n    EXPECT_EQ(expected_global_const_string, (*global_const_string));\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}