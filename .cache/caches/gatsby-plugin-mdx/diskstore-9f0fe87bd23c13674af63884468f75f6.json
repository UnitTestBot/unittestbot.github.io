{"expireTime":9007200911427599000,"key":"gatsby-plugin-mdx-entire-payload-ddab0bbb515bee156cb2d6bee0628dd9-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/home/runner/work/unittestbot.github.io/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":140,"offset":141},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":143},"end":{"line":5,"column":29,"offset":171},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"UTBotCpp Code Analyzer","position":{"start":{"line":8,"column":3,"offset":176},"end":{"line":8,"column":25,"offset":198},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":174},"end":{"line":8,"column":25,"offset":198},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this section we describe what code analyzer UTBot supports. \nCode analyzer report in SARIF (Static Analysis Results Interchange Format). SARIF format is JSON-based. We can use SARIF reports in products that support showing directly or with plugins.  GitHub or Visual Studio Code are good examples.","position":{"start":{"line":10,"column":1,"offset":200},"end":{"line":11,"column":237,"offset":500},"indent":[1]}}],"position":{"start":{"line":10,"column":1,"offset":200},"end":{"line":11,"column":237,"offset":500},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Using with GitHub","position":{"start":{"line":13,"column":4,"offset":505},"end":{"line":13,"column":21,"offset":522},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":502},"end":{"line":13,"column":21,"offset":522},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can generate code analysis information from UTBotCpp for the entire project or selected folder or set of file, selected by pattern.  The ","position":{"start":{"line":14,"column":1,"offset":523},"end":{"line":14,"column":142,"offset":664},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp-action","children":[{"type":"text","value":"UTBot-Action","position":{"start":{"line":14,"column":143,"offset":665},"end":{"line":14,"column":155,"offset":677},"indent":[]}}],"position":{"start":{"line":14,"column":142,"offset":664},"end":{"line":14,"column":204,"offset":726},"indent":[]}},{"type":"text","value":" makes this generation for you. Code analyzer information and tests are generated in correspondent folders  and stored new project branch with name - ","position":{"start":{"line":14,"column":204,"offset":726},"end":{"line":14,"column":354,"offset":876},"indent":[]}},{"type":"inlineCode","value":"utbot-code-analysis-[short-commit-hash]","position":{"start":{"line":14,"column":354,"offset":876},"end":{"line":14,"column":397,"offset":919},"indent":[]}},{"type":"text","value":". The action makes a pull request to a branch from which you launched the action. ","position":{"start":{"line":14,"column":397,"offset":919},"end":{"line":14,"column":479,"offset":1001},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":523},"end":{"line":14,"column":479,"offset":1001},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"How-to steps:","position":{"start":{"line":16,"column":1,"offset":1003},"end":{"line":16,"column":14,"offset":1016},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1003},"end":{"line":16,"column":14,"offset":1016},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Allow ","position":{"start":{"line":18,"column":3,"offset":1020},"end":{"line":18,"column":9,"offset":1026},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp-action","children":[{"type":"text","value":"UTBot-Action","position":{"start":{"line":18,"column":10,"offset":1027},"end":{"line":18,"column":22,"offset":1039},"indent":[]}}],"position":{"start":{"line":18,"column":9,"offset":1026},"end":{"line":18,"column":71,"offset":1088},"indent":[]}},{"type":"text","value":" to make a pull request in your repository by the ","position":{"start":{"line":18,"column":71,"offset":1088},"end":{"line":18,"column":121,"offset":1138},"indent":[]}},{"type":"inlineCode","value":"Settings > Actions > Allow GitHub Actions to create and approve pull requests","position":{"start":{"line":18,"column":121,"offset":1138},"end":{"line":18,"column":202,"offset":1219},"indent":[]}},{"type":"text","value":" command:","position":{"start":{"line":18,"column":202,"offset":1219},"end":{"line":18,"column":211,"offset":1228},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":1020},"end":{"line":18,"column":211,"offset":1228},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1018},"end":{"line":18,"column":211,"offset":1228},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1018},"end":{"line":18,"column":211,"offset":1228},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/utbot-cpp-wiki/cpp-ca-PermissionForCreatingAndApprovingPullRequest.png","alt":"Permission","position":{"start":{"line":20,"column":1,"offset":1230},"end":{"line":20,"column":167,"offset":1396},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1230},"end":{"line":20,"column":167,"offset":1396},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Make a folder ","position":{"start":{"line":22,"column":3,"offset":1400},"end":{"line":22,"column":17,"offset":1414},"indent":[]}},{"type":"inlineCode","value":".github/workflows","position":{"start":{"line":22,"column":17,"offset":1414},"end":{"line":22,"column":36,"offset":1433},"indent":[]}},{"type":"text","value":" in your GitHub repository and create a file with ","position":{"start":{"line":22,"column":36,"offset":1433},"end":{"line":22,"column":86,"offset":1483},"indent":[]}},{"type":"inlineCode","value":".yml","position":{"start":{"line":22,"column":86,"offset":1483},"end":{"line":22,"column":92,"offset":1489},"indent":[]}},{"type":"text","value":" extension, for example ","position":{"start":{"line":22,"column":92,"offset":1489},"end":{"line":22,"column":116,"offset":1513},"indent":[]}},{"type":"inlineCode","value":"run-utbot.yml","position":{"start":{"line":22,"column":116,"offset":1513},"end":{"line":22,"column":131,"offset":1528},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":1400},"end":{"line":22,"column":131,"offset":1528},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1398},"end":{"line":23,"column":1,"offset":1529},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In created YML file you have to add one more permission  ","position":{"start":{"line":24,"column":3,"offset":1532},"end":{"line":24,"column":60,"offset":1589},"indent":[]}},{"type":"inlineCode","value":"permissions: write-all","position":{"start":{"line":24,"column":60,"offset":1589},"end":{"line":24,"column":84,"offset":1613},"indent":[]}},{"type":"text","value":" and after that you can use UTBot Action in your repository action. Here is  an example that runs UTBotCpp analysis for a whole project: ","position":{"start":{"line":24,"column":84,"offset":1613},"end":{"line":24,"column":221,"offset":1750},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":1532},"end":{"line":24,"column":221,"offset":1750},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1530},"end":{"line":24,"column":221,"offset":1750},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1398},"end":{"line":24,"column":221,"offset":1750},"indent":[1,1]}},{"type":"code","lang":"yml","meta":null,"value":"name: \"UTBot code analysis\"\n\non:\n  workflow_dispatch:\n    \njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions: write-all\n    steps:\n    - name: UTBot code analysis\n      uses: UnitTestBot/UTBotCpp-action@v2022.06.0\n      with:\n        add_tests: 'true'\n        refresh_tests: 'false'\n        utbot_version: '2022.06.0'\n        scope: 'project'","position":{"start":{"line":25,"column":1,"offset":1751},"end":{"line":43,"column":4,"offset":2113},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Newly created action  runs on ","position":{"start":{"line":44,"column":1,"offset":2114},"end":{"line":44,"column":31,"offset":2144},"indent":[]}},{"type":"inlineCode","value":"workflow_dispatch","position":{"start":{"line":44,"column":31,"offset":2144},"end":{"line":44,"column":52,"offset":2165},"indent":[]}},{"type":"text","value":",  so for launching the action push the\n","position":{"start":{"line":44,"column":52,"offset":2165},"end":{"line":45,"column":1,"offset":2205},"indent":[1]}},{"type":"inlineCode","value":"Actions > Select workflow > UTBot code analysis (or your workflow name) > Run workflow > Run workflow","position":{"start":{"line":45,"column":1,"offset":2205},"end":{"line":45,"column":106,"offset":2310},"indent":[]}},{"type":"text","value":" button in GitHub UI:","position":{"start":{"line":45,"column":106,"offset":2310},"end":{"line":45,"column":127,"offset":2331},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":2114},"end":{"line":45,"column":127,"offset":2331},"indent":[1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/utbot-cpp-wiki/cpp-ca-RunAction.png","alt":"RunAction","position":{"start":{"line":47,"column":1,"offset":2333},"end":{"line":47,"column":131,"offset":2463},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":2333},"end":{"line":47,"column":131,"offset":2463},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"As a result, the ","position":{"start":{"line":49,"column":3,"offset":2467},"end":{"line":49,"column":20,"offset":2484},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp-action","children":[{"type":"text","value":"UTBot-Action","position":{"start":{"line":49,"column":21,"offset":2485},"end":{"line":49,"column":33,"offset":2497},"indent":[]}}],"position":{"start":{"line":49,"column":20,"offset":2484},"end":{"line":49,"column":82,"offset":2546},"indent":[]}},{"type":"text","value":" action creates  a pull request from new ","position":{"start":{"line":49,"column":82,"offset":2546},"end":{"line":49,"column":123,"offset":2587},"indent":[]}},{"type":"inlineCode","value":"utbot-code-analysis-[short-commit-hash]","position":{"start":{"line":49,"column":123,"offset":2587},"end":{"line":49,"column":166,"offset":2630},"indent":[]}},{"type":"text","value":" branch to a branch from which you run. In action-created branch there are two new folders. The first folder contains generated tests, the second - analysis results. The structure of the folder with analysis information  repeats the structure of project source folder and contains SARIF file report for each source file in corresponded sub folder. Additionally an aggregated SARIF report is created for a whole project (","position":{"start":{"line":49,"column":166,"offset":2630},"end":{"line":49,"column":586,"offset":3050},"indent":[]}},{"type":"inlineCode","value":"project_code_analysis.sarif","position":{"start":{"line":49,"column":586,"offset":3050},"end":{"line":49,"column":615,"offset":3079},"indent":[]}},{"type":"text","value":")  . This aggregated report contains information about all project files and can be used for highlighting errors in the project scope.","position":{"start":{"line":49,"column":615,"offset":3079},"end":{"line":49,"column":749,"offset":3213},"indent":[]}}],"position":{"start":{"line":49,"column":3,"offset":2467},"end":{"line":49,"column":749,"offset":3213},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":2465},"end":{"line":50,"column":1,"offset":3214},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To view the result of code analysis you have to go to the ","position":{"start":{"line":51,"column":3,"offset":3217},"end":{"line":51,"column":61,"offset":3275},"indent":[]}},{"type":"inlineCode","value":"Security > Code scanning alerts","position":{"start":{"line":51,"column":61,"offset":3275},"end":{"line":51,"column":96,"offset":3310},"indent":[]}},{"type":"text","value":" tab.  By selection of security report item, you see the trace of detected problem, which starts from a test case.","position":{"start":{"line":51,"column":96,"offset":3310},"end":{"line":51,"column":210,"offset":3424},"indent":[]}}],"position":{"start":{"line":51,"column":3,"offset":3217},"end":{"line":51,"column":210,"offset":3424},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":3215},"end":{"line":51,"column":210,"offset":3424},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":2465},"end":{"line":51,"column":210,"offset":3424},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/utbot-cpp-wiki/cpp-ca-ShowAllerts.png","alt":"ShowAllerts","position":{"start":{"line":53,"column":1,"offset":3426},"end":{"line":53,"column":135,"offset":3560},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":3426},"end":{"line":53,"column":135,"offset":3560},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Using with Visual Studio Code","position":{"start":{"line":55,"column":4,"offset":3565},"end":{"line":55,"column":33,"offset":3594},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":3562},"end":{"line":55,"column":33,"offset":3594},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We are suggest that you are have properly installed UTBot plugin.","position":{"start":{"line":57,"column":1,"offset":3596},"end":{"line":57,"column":66,"offset":3661},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":3596},"end":{"line":57,"column":66,"offset":3661},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":" How-to steps:","position":{"start":{"line":59,"column":1,"offset":3663},"end":{"line":59,"column":15,"offset":3677},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":3663},"end":{"line":59,"column":15,"offset":3677},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To use UTBot Code Analyzer you have to run the ","position":{"start":{"line":61,"column":3,"offset":3681},"end":{"line":61,"column":50,"offset":3728},"indent":[]}},{"type":"inlineCode","value":"File > Preferences > Settings (or Ctrl + ,)","position":{"start":{"line":61,"column":50,"offset":3728},"end":{"line":61,"column":97,"offset":3775},"indent":[]}},{"type":"text","value":" page, then navigate to the ","position":{"start":{"line":61,"column":97,"offset":3775},"end":{"line":61,"column":125,"offset":3803},"indent":[]}},{"type":"inlineCode","value":"Extensions > UnitTestBot","position":{"start":{"line":61,"column":125,"offset":3803},"end":{"line":61,"column":153,"offset":3831},"indent":[]}},{"type":"text","value":" tab and turn on SARIF generation.\n","position":{"start":{"line":61,"column":153,"offset":3831},"end":{"line":62,"column":1,"offset":3866},"indent":[1]}},{"type":"image","title":null,"url":"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/utbot-cpp-wiki/cpp-ca-TurnOnSarifGeneration.png","alt":"TurnOnSarifGeneration","position":{"start":{"line":62,"column":1,"offset":3866},"end":{"line":62,"column":155,"offset":4020},"indent":[]}}],"position":{"start":{"line":61,"column":3,"offset":3681},"end":{"line":62,"column":155,"offset":4020},"indent":[1]}}],"position":{"start":{"line":61,"column":1,"offset":3679},"end":{"line":62,"column":155,"offset":4020},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"After ","position":{"start":{"line":63,"column":3,"offset":4023},"end":{"line":63,"column":9,"offset":4029},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/wiki/generating-tests","children":[{"type":"text","value":"generating tests","position":{"start":{"line":63,"column":10,"offset":4030},"end":{"line":63,"column":26,"offset":4046},"indent":[]}}],"position":{"start":{"line":63,"column":9,"offset":4029},"end":{"line":63,"column":90,"offset":4110},"indent":[]}},{"type":"text","value":" in your project there are two new folders. The first folder contains generated tests, the second - analysis results. The structure of the folder with analysis information  repeats the structure of project source folder and contains SARIF file report for each source file in corresponded sub folder. Additionally an aggregated SARIF report is created for a whole project (","position":{"start":{"line":63,"column":90,"offset":4110},"end":{"line":63,"column":462,"offset":4482},"indent":[]}},{"type":"inlineCode","value":"project_code_analysis.sarif","position":{"start":{"line":63,"column":462,"offset":4482},"end":{"line":63,"column":491,"offset":4511},"indent":[]}},{"type":"text","value":")  . This aggregated report contains information about all project files and can be used for highlighting errors in the project scope.","position":{"start":{"line":63,"column":491,"offset":4511},"end":{"line":63,"column":625,"offset":4645},"indent":[]}}],"position":{"start":{"line":63,"column":3,"offset":4023},"end":{"line":63,"column":625,"offset":4645},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":4021},"end":{"line":63,"column":625,"offset":4645},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"To view the result of code analysis you have to install the ","position":{"start":{"line":64,"column":3,"offset":4648},"end":{"line":64,"column":63,"offset":4708},"indent":[]}},{"type":"link","title":null,"url":"https://marketplace.visualstudio.com/items?itemName=MS-SarifVSCode.sarif-viewer","children":[{"type":"text","value":"Sarif Viewer","position":{"start":{"line":64,"column":64,"offset":4709},"end":{"line":64,"column":76,"offset":4721},"indent":[]}}],"position":{"start":{"line":64,"column":63,"offset":4708},"end":{"line":64,"column":158,"offset":4803},"indent":[]}},{"type":"text","value":" extension and run the ","position":{"start":{"line":64,"column":158,"offset":4803},"end":{"line":64,"column":181,"offset":4826},"indent":[]}},{"type":"inlineCode","value":"Ctrl + Shift + P > Sarif: Show Panel > Open SARIF log","position":{"start":{"line":64,"column":181,"offset":4826},"end":{"line":64,"column":238,"offset":4883},"indent":[]}},{"type":"text","value":"  command. Then choose the ","position":{"start":{"line":64,"column":238,"offset":4883},"end":{"line":64,"column":265,"offset":4910},"indent":[]}},{"type":"inlineCode","value":"project_code_analysis.sarif","position":{"start":{"line":64,"column":265,"offset":4910},"end":{"line":64,"column":294,"offset":4939},"indent":[]}},{"type":"text","value":" file to show all discovered problems.\n","position":{"start":{"line":64,"column":294,"offset":4939},"end":{"line":65,"column":1,"offset":4978},"indent":[1]}},{"type":"image","title":null,"url":"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/utbot-cpp-wiki/cpp-ca-VSCODEResult.png","alt":"VSCODEResult","position":{"start":{"line":65,"column":1,"offset":4978},"end":{"line":65,"column":137,"offset":5114},"indent":[]}}],"position":{"start":{"line":64,"column":3,"offset":4648},"end":{"line":65,"column":137,"offset":5114},"indent":[1]}}],"position":{"start":{"line":64,"column":1,"offset":4646},"end":{"line":65,"column":137,"offset":5114},"indent":[1]}}],"position":{"start":{"line":61,"column":1,"offset":3679},"end":{"line":65,"column":137,"offset":5114},"indent":[1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":68,"column":1,"offset":5117},"end":{"line":68,"column":31,"offset":5147},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":68,"column":31,"offset":5147}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/unittestbot.github.io/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"utbotcpp-code-analyzer\"\n    }}>{`UTBotCpp Code Analyzer`}</h1>\n    <p>{`In this section we describe what code analyzer UTBot supports.\nCode analyzer report in SARIF (Static Analysis Results Interchange Format). SARIF format is JSON-based. We can use SARIF reports in products that support showing directly or with plugins.  GitHub or Visual Studio Code are good examples.`}</p>\n    <h2 {...{\n      \"id\": \"using-with-github\"\n    }}>{`Using with GitHub`}</h2>\n    <p>{`You can generate code analysis information from UTBotCpp for the entire project or selected folder or set of file, selected by pattern.  The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp-action\"\n      }}>{`UTBot-Action`}</a>{` makes this generation for you. Code analyzer information and tests are generated in correspondent folders  and stored new project branch with name - `}<inlineCode parentName=\"p\">{`utbot-code-analysis-[short-commit-hash]`}</inlineCode>{`. The action makes a pull request to a branch from which you launched the action. `}</p>\n    <p>{`How-to steps:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Allow `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp-action\"\n        }}>{`UTBot-Action`}</a>{` to make a pull request in your repository by the `}<inlineCode parentName=\"li\">{`Settings > Actions > Allow GitHub Actions to create and approve pull requests`}</inlineCode>{` command:`}</li>\n    </ul>\n    <p><img alt=\"Permission\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/utbot-cpp-wiki/cpp-ca-PermissionForCreatingAndApprovingPullRequest.png\" /></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Make a folder `}<inlineCode parentName=\"p\">{`.github/workflows`}</inlineCode>{` in your GitHub repository and create a file with `}<inlineCode parentName=\"p\">{`.yml`}</inlineCode>{` extension, for example `}<inlineCode parentName=\"p\">{`run-utbot.yml`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`In created YML file you have to add one more permission  `}<inlineCode parentName=\"p\">{`permissions: write-all`}</inlineCode>{` and after that you can use UTBot Action in your repository action. Here is  an example that runs UTBotCpp analysis for a whole project: `}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yml\"\n      }}>{`name: \"UTBot code analysis\"\n\non:\n  workflow_dispatch:\n    \njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions: write-all\n    steps:\n    - name: UTBot code analysis\n      uses: UnitTestBot/UTBotCpp-action@v2022.06.0\n      with:\n        add_tests: 'true'\n        refresh_tests: 'false'\n        utbot_version: '2022.06.0'\n        scope: 'project'\n`}</code></pre>\n    <p>{`Newly created action  runs on `}<inlineCode parentName=\"p\">{`workflow_dispatch`}</inlineCode>{`,  so for launching the action push the\n`}<inlineCode parentName=\"p\">{`Actions > Select workflow > UTBot code analysis (or your workflow name) > Run workflow > Run workflow`}</inlineCode>{` button in GitHub UI:`}</p>\n    <p><img alt=\"RunAction\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/utbot-cpp-wiki/cpp-ca-RunAction.png\" /></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`As a result, the `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/UnitTestBot/UTBotCpp-action\"\n          }}>{`UTBot-Action`}</a>{` action creates  a pull request from new `}<inlineCode parentName=\"p\">{`utbot-code-analysis-[short-commit-hash]`}</inlineCode>{` branch to a branch from which you run. In action-created branch there are two new folders. The first folder contains generated tests, the second - analysis results. The structure of the folder with analysis information  repeats the structure of project source folder and contains SARIF file report for each source file in corresponded sub folder. Additionally an aggregated SARIF report is created for a whole project (`}<inlineCode parentName=\"p\">{`project_code_analysis.sarif`}</inlineCode>{`)  . This aggregated report contains information about all project files and can be used for highlighting errors in the project scope.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`To view the result of code analysis you have to go to the `}<inlineCode parentName=\"p\">{`Security > Code scanning alerts`}</inlineCode>{` tab.  By selection of security report item, you see the trace of detected problem, which starts from a test case.`}</p>\n      </li>\n    </ul>\n    <p><img alt=\"ShowAllerts\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/utbot-cpp-wiki/cpp-ca-ShowAllerts.png\" /></p>\n    <h2 {...{\n      \"id\": \"using-with-visual-studio-code\"\n    }}>{`Using with Visual Studio Code`}</h2>\n    <p>{`We are suggest that you are have properly installed UTBot plugin.`}</p>\n    <p>{` How-to steps:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`To use UTBot Code Analyzer you have to run the `}<inlineCode parentName=\"li\">{`File > Preferences > Settings (or Ctrl + ,)`}</inlineCode>{` page, then navigate to the `}<inlineCode parentName=\"li\">{`Extensions > UnitTestBot`}</inlineCode>{` tab and turn on SARIF generation.\n`}<img alt=\"TurnOnSarifGeneration\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/utbot-cpp-wiki/cpp-ca-TurnOnSarifGeneration.png\" /></li>\n      <li parentName=\"ul\">{`After `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/wiki/generating-tests\"\n        }}>{`generating tests`}</a>{` in your project there are two new folders. The first folder contains generated tests, the second - analysis results. The structure of the folder with analysis information  repeats the structure of project source folder and contains SARIF file report for each source file in corresponded sub folder. Additionally an aggregated SARIF report is created for a whole project (`}<inlineCode parentName=\"li\">{`project_code_analysis.sarif`}</inlineCode>{`)  . This aggregated report contains information about all project files and can be used for highlighting errors in the project scope.`}</li>\n      <li parentName=\"ul\">{`To view the result of code analysis you have to install the `}<a parentName=\"li\" {...{\n          \"href\": \"https://marketplace.visualstudio.com/items?itemName=MS-SarifVSCode.sarif-viewer\"\n        }}>{`Sarif Viewer`}</a>{` extension and run the `}<inlineCode parentName=\"li\">{`Ctrl + Shift + P > Sarif: Show Panel > Open SARIF log`}</inlineCode>{`  command. Then choose the `}<inlineCode parentName=\"li\">{`project_code_analysis.sarif`}</inlineCode>{` file to show all discovered problems.\n`}<img alt=\"VSCODEResult\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/utbot-cpp-wiki/cpp-ca-VSCODEResult.png\" /></li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}