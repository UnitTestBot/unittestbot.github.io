{"expireTime":9007200910765525000,"key":"gatsby-plugin-mdx-entire-payload-7606b2d8dbea33f16301225ab4add63c-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/home/runner/work/unittestbot.github.io/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":140,"offset":141},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":143},"end":{"line":5,"column":29,"offset":171},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Supported C++ Syntax","position":{"start":{"line":8,"column":3,"offset":176},"end":{"line":8,"column":23,"offset":196},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":174},"end":{"line":8,"column":23,"offset":196},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Support of C++ language features is very limited. Here you can find test cases examples. All code snippets below were\ntaken from ","position":{"start":{"line":10,"column":1,"offset":198},"end":{"line":11,"column":12,"offset":327},"indent":[1]}},{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/cpp-example/","children":[{"type":"text","value":"this directory","position":{"start":{"line":11,"column":13,"offset":328},"end":{"line":11,"column":27,"offset":342},"indent":[]}}],"position":{"start":{"line":11,"column":12,"offset":327},"end":{"line":11,"column":110,"offset":425},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":11,"column":110,"offset":425},"end":{"line":11,"column":111,"offset":426},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":198},"end":{"line":11,"column":111,"offset":426},"indent":[1]}},{"type":"jsx","value":"<!-- toc -->","position":{"start":{"line":13,"column":1,"offset":428},"end":{"line":13,"column":13,"offset":440},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#reference-parameters","children":[{"type":"text","value":"Reference parameters","position":{"start":{"line":15,"column":4,"offset":445},"end":{"line":15,"column":24,"offset":465},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":444},"end":{"line":15,"column":48,"offset":489},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":444},"end":{"line":15,"column":48,"offset":489},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":442},"end":{"line":15,"column":48,"offset":489},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#class-as-parameters","children":[{"type":"text","value":"Class as parameters","position":{"start":{"line":16,"column":4,"offset":493},"end":{"line":16,"column":23,"offset":512},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":492},"end":{"line":16,"column":46,"offset":535},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":492},"end":{"line":16,"column":46,"offset":535},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":490},"end":{"line":16,"column":46,"offset":535},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#class-as-return-values","children":[{"type":"text","value":"Class as return values","position":{"start":{"line":17,"column":4,"offset":539},"end":{"line":17,"column":26,"offset":561},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":538},"end":{"line":17,"column":52,"offset":587},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":538},"end":{"line":17,"column":52,"offset":587},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":536},"end":{"line":17,"column":52,"offset":587},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#class-methods","children":[{"type":"text","value":"Class methods","position":{"start":{"line":18,"column":4,"offset":591},"end":{"line":18,"column":17,"offset":604},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":590},"end":{"line":18,"column":34,"offset":621},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":590},"end":{"line":18,"column":34,"offset":621},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":588},"end":{"line":18,"column":34,"offset":621},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#operators","children":[{"type":"text","value":"Operators","position":{"start":{"line":19,"column":4,"offset":625},"end":{"line":19,"column":13,"offset":634},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":624},"end":{"line":19,"column":26,"offset":647},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":624},"end":{"line":19,"column":26,"offset":647},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":622},"end":{"line":19,"column":26,"offset":647},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"#private","children":[{"type":"text","value":"Private","position":{"start":{"line":20,"column":4,"offset":651},"end":{"line":20,"column":11,"offset":658},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":650},"end":{"line":20,"column":22,"offset":669},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":650},"end":{"line":20,"column":22,"offset":669},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":648},"end":{"line":20,"column":22,"offset":669},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":442},"end":{"line":20,"column":22,"offset":669},"indent":[1,1,1,1,1]}},{"type":"jsx","value":"<!-- tocstop -->","position":{"start":{"line":22,"column":1,"offset":671},"end":{"line":22,"column":17,"offset":687},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Reference parameters","position":{"start":{"line":24,"column":4,"offset":692},"end":{"line":24,"column":24,"offset":712},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":689},"end":{"line":24,"column":24,"offset":712},"indent":[]}},{"type":"jsx","value":"<!---\n> `additional info`\n\n[Source code example](https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/types.c#L23)\n--->","position":{"start":{"line":26,"column":1,"offset":714},"end":{"line":30,"column":5,"offset":868},"indent":[1,1,1,1]}},{"type":"code","lang":"cpp","meta":null,"value":"int double_abs_lvalue_reference(int& a) {\n    if (a < 0) {\n        a *= -2;\n    }\n    return a;\n}\n\nint double_abs_const_lvalue_reference(const int& a) {\n    if (a < 0) {\n        return -2 * a;\n    }\n    return a;\n}","position":{"start":{"line":32,"column":1,"offset":870},"end":{"line":46,"column":4,"offset":1095},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":48,"column":8,"offset":1104},"end":{"line":48,"column":18,"offset":1114},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1097},"end":{"line":48,"column":18,"offset":1114},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, double_abs_lvalue_reference_test_1)\n{\n    // Construct input\n    int a = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = double_abs_lvalue_reference(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n\n    // Check function parameters\n    int expected_a = 0;\n    EXPECT_EQ(expected_a, a);\n}\n\nTEST(regression, double_abs_lvalue_reference_test_2)\n{\n    // Construct input\n    int a = -1;\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = double_abs_lvalue_reference(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n\n    // Check function parameters\n    int expected_a = 2;\n    EXPECT_EQ(expected_a, a);\n}\n\nTEST(regression, double_abs_const_lvalue_reference_test_1)\n{\n    // Construct input\n    int a = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = double_abs_const_lvalue_reference(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, double_abs_const_lvalue_reference_test_2)\n{\n    // Construct input\n    int a = -1;\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = double_abs_const_lvalue_reference(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}","position":{"start":{"line":50,"column":1,"offset":1116},"end":{"line":118,"column":4,"offset":2427},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Class as parameters","position":{"start":{"line":121,"column":4,"offset":2433},"end":{"line":121,"column":23,"offset":2452},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":2430},"end":{"line":121,"column":23,"offset":2452},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"For class as parameter class should be construct from initializer list of class members and has default constructor","position":{"start":{"line":123,"column":3,"offset":2456},"end":{"line":123,"column":118,"offset":2571},"indent":[]}}],"position":{"start":{"line":123,"column":3,"offset":2456},"end":{"line":123,"column":118,"offset":2571},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":2454},"end":{"line":123,"column":118,"offset":2571},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"class Point_2d {\npublic:\n  int x;\n  int y;\n\n  Point_2d();\n  Point_2d(const int& x, const int& y);\n}\n\n\nvoid set_abs_by_ref(Point_2d& point) {\n   if (point.x < 0) {\n       point.x = -1 * point.x;\n   }\n   if (point.y < 0) {\n       point.y *= -1;\n   }\n}","position":{"start":{"line":125,"column":1,"offset":2573},"end":{"line":144,"column":4,"offset":2833},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":146,"column":8,"offset":2842},"end":{"line":146,"column":18,"offset":2852},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":2835},"end":{"line":146,"column":18,"offset":2852},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, set_abs_by_ref_test_1)\n{\n    // Construct input\n    class Point_2d point = {-1, -1};\n\n    // Expected output\n    // No output variable for void function\n\n    // Trigger the function\n    set_abs_by_ref(point);\n\n    // Check results\n    // No check results for void function\n\n    // Check function parameters\n    class Point_2d expected_point = {1, 1};\n    EXPECT_EQ(expected_point.x, point.x);\n    EXPECT_EQ(expected_point.y, point.y);\n}\n\nTEST(regression, set_abs_by_ref_test_2)\n{\n    // Construct input\n    class Point_2d point = {0, -1};\n\n    // Expected output\n    // No output variable for void function\n\n    // Trigger the function\n    set_abs_by_ref(point);\n\n    // Check results\n    // No check results for void function\n\n    // Check function parameters\n    class Point_2d expected_point = {0, 1};\n    EXPECT_EQ(expected_point.x, point.x);\n    EXPECT_EQ(expected_point.y, point.y);\n}\n\nTEST(regression, set_abs_by_ref_test_3)\n{\n    // Construct input\n    class Point_2d point = {-1, 0};\n\n    // Expected output\n    // No output variable for void function\n\n    // Trigger the function\n    set_abs_by_ref(point);\n\n    // Check results\n    // No check results for void function\n\n    // Check function parameters\n    class Point_2d expected_point = {1, 0};\n    EXPECT_EQ(expected_point.x, point.x);\n    EXPECT_EQ(expected_point.y, point.y);\n}\n\nTEST(regression, set_abs_by_ref_test_4)\n{\n    // Construct input\n    class Point_2d point = {0, 0};\n\n    // Expected output\n    // No output variable for void function\n\n    // Trigger the function\n    set_abs_by_ref(point);\n\n    // Check results\n    // No check results for void function\n\n    // Check function parameters\n    class Point_2d expected_point = {0, 0};\n    EXPECT_EQ(expected_point.x, point.x);\n    EXPECT_EQ(expected_point.y, point.y);\n}","position":{"start":{"line":148,"column":1,"offset":2854},"end":{"line":228,"column":4,"offset":4679},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Class as return values","position":{"start":{"line":231,"column":4,"offset":4685},"end":{"line":231,"column":26,"offset":4707},"indent":[]}}],"position":{"start":{"line":231,"column":1,"offset":4682},"end":{"line":231,"column":26,"offset":4707},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"void set_abs_by_ref(Point_2d& point) {\n   if (point.x < 0) {\n       point.x = -1 * point.x;\n   }\n   if (point.y < 0) {\n       point.y *= -1;\n   }\n}\n\nPoint_2d abs_point(Point_2d point) {\n    set_abs_by_ref(point);\n    return point;\n}","position":{"start":{"line":233,"column":1,"offset":4709},"end":{"line":247,"column":4,"offset":4952},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":249,"column":8,"offset":4961},"end":{"line":249,"column":18,"offset":4971},"indent":[]}}],"position":{"start":{"line":249,"column":1,"offset":4954},"end":{"line":249,"column":18,"offset":4971},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, abs_point_test_1)\n{\n    // Construct input\n    class Point_2d point = {-1, 0};\n\n    // Expected output\n    class Point_2d expected = {1, 0};\n\n    // Trigger the function\n    class Point_2d actual = abs_point(point);\n\n    // Check results\n    EXPECT_EQ(expected.x, actual.x);\n    EXPECT_EQ(expected.y, actual.y);\n}\n\nTEST(regression, abs_point_test_2)\n{\n    // Construct input\n    class Point_2d point = {-1, -1};\n\n    // Expected output\n    class Point_2d expected = {1, 1};\n\n    // Trigger the function\n    class Point_2d actual = abs_point(point);\n\n    // Check results\n    EXPECT_EQ(expected.x, actual.x);\n    EXPECT_EQ(expected.y, actual.y);\n}\n\nTEST(regression, abs_point_test_3)\n{\n    // Construct input\n    class Point_2d point = {0, -1};\n\n    // Expected output\n    class Point_2d expected = {0, 1};\n\n    // Trigger the function\n    class Point_2d actual = abs_point(point);\n\n    // Check results\n    EXPECT_EQ(expected.x, actual.x);\n    EXPECT_EQ(expected.y, actual.y);\n}","position":{"start":{"line":251,"column":1,"offset":4973},"end":{"line":299,"column":4,"offset":5979},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Class methods","position":{"start":{"line":302,"column":4,"offset":5985},"end":{"line":302,"column":17,"offset":5998},"indent":[]}}],"position":{"start":{"line":302,"column":1,"offset":5982},"end":{"line":302,"column":17,"offset":5998},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"For genetating method tests UTBot need default constructor of class","position":{"start":{"line":304,"column":3,"offset":6002},"end":{"line":304,"column":70,"offset":6069},"indent":[]}}],"position":{"start":{"line":304,"column":3,"offset":6002},"end":{"line":304,"column":70,"offset":6069},"indent":[]}}],"position":{"start":{"line":304,"column":1,"offset":6000},"end":{"line":304,"column":70,"offset":6069},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"class Point_2d {\npublic:\n  int x;\n  int y;\n\n  Point_2d();\n  Point_2d(const int& x, const int& y);\n}\n\nint Point_2d::get_x() const {\n    return x;\n}","position":{"start":{"line":306,"column":1,"offset":6071},"end":{"line":319,"column":4,"offset":6228},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":321,"column":8,"offset":6237},"end":{"line":321,"column":18,"offset":6247},"indent":[]}}],"position":{"start":{"line":321,"column":1,"offset":6230},"end":{"line":321,"column":18,"offset":6247},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, Point_2d_get_x_test_1)\n{\n    Point_2d Point_2d_obj;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = Point_2d_obj.get_x();\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}","position":{"start":{"line":323,"column":1,"offset":6249},"end":{"line":337,"column":4,"offset":6499},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Operators","position":{"start":{"line":340,"column":4,"offset":6505},"end":{"line":340,"column":13,"offset":6514},"indent":[]}}],"position":{"start":{"line":340,"column":1,"offset":6502},"end":{"line":340,"column":13,"offset":6514},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"class Point_2d {\npublic:\n  int x;\n  int y;\n\n  Point_2d();\n  Point_2d(const int& x, const int& y);\n  Point_2d operator-=(const Point_2d& rhs);\n  friend Point_2d operator-(Point_2d lhs, const Point_2d& rhs);\n}\n\nPoint_2d Point_2d::operator-=(const Point_2d& rhs) {\n   this->x -= rhs.x;\n   this->y -= rhs.y;\n   return *this;\n}\n\nPoint_2d operator-(Point_2d lhs, const Point_2d& rhs) {\n    lhs -= rhs;\n    return lhs;\n}","position":{"start":{"line":342,"column":1,"offset":6516},"end":{"line":364,"column":4,"offset":6940},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":366,"column":8,"offset":6949},"end":{"line":366,"column":18,"offset":6959},"indent":[]}}],"position":{"start":{"line":366,"column":1,"offset":6942},"end":{"line":366,"column":18,"offset":6959},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, Point_2d_operator_minus_equal_test_1)\n{\n    // Construct input\n    Point_2d Point_2d_obj;\n    class Point_2d rhs = {0, 0};\n\n    // Expected output\n    class Point_2d expected = {0, 0};\n\n    // Trigger the function\n    class Point_2d actual = Point_2d_obj.operator-=(rhs);\n\n    // Check results\n    EXPECT_EQ(expected.x, actual.x);\n    EXPECT_EQ(expected.y, actual.y);\n}\n\nTEST(regression, operator_minus_test_1)\n{\n    // Construct input\n    class Point_2d lhs = {0, 0};\n    class Point_2d rhs = {0, 0};\n\n    // Expected output\n    class Point_2d expected = {0, 0};\n\n    // Trigger the function\n    class Point_2d actual = operator-(lhs, rhs);\n\n    // Check results\n    EXPECT_EQ(expected.x, actual.x);\n    EXPECT_EQ(expected.y, actual.y);\n}","position":{"start":{"line":368,"column":1,"offset":6961},"end":{"line":402,"column":4,"offset":7728},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Private","position":{"start":{"line":405,"column":4,"offset":7734},"end":{"line":405,"column":11,"offset":7741},"indent":[]}}],"position":{"start":{"line":405,"column":1,"offset":7731},"end":{"line":405,"column":11,"offset":7741},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"For test private UTBot use ","position":{"start":{"line":407,"column":3,"offset":7745},"end":{"line":407,"column":30,"offset":7772},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/martong/access_private.git","children":[{"type":"text","value":"martong/access_private.git","position":{"start":{"line":407,"column":31,"offset":7773},"end":{"line":407,"column":57,"offset":7799},"indent":[]}}],"position":{"start":{"line":407,"column":30,"offset":7772},"end":{"line":407,"column":105,"offset":7847},"indent":[]}}],"position":{"start":{"line":407,"column":3,"offset":7745},"end":{"line":407,"column":105,"offset":7847},"indent":[]}}],"position":{"start":{"line":407,"column":1,"offset":7743},"end":{"line":407,"column":105,"offset":7847},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"class Private {\nprivate:\n    int x;\npublic:\n    Private();\n    Private(int x);\n    friend Private get_abs_value(Private p);\n};\n\nPrivate get_abs_value(Private p) {\n    if (p.x < 0) {\n        return -1 * p.x;\n    }\n    return p;\n}","position":{"start":{"line":409,"column":1,"offset":7849},"end":{"line":425,"column":4,"offset":8088},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":6,"children":[{"type":"text","value":"Tests code","position":{"start":{"line":427,"column":8,"offset":8097},"end":{"line":427,"column":18,"offset":8107},"indent":[]}}],"position":{"start":{"line":427,"column":1,"offset":8090},"end":{"line":427,"column":18,"offset":8107},"indent":[]}},{"type":"code","lang":"cpp","meta":null,"value":"TEST(regression, get_abs_value_test_1)\n{\n    // Construct input\n    class Private p = {-1};\n\n    // Expected output\n    class Private expected = {1};\n\n    // Trigger the function\n    class Private actual = get_abs_value(p);\n\n    // Check results\n    EXPECT_EQ(access_private::x(expected), access_private::x(actual));\n}\n\nTEST(regression, get_abs_value_test_2)\n{\n    // Construct input\n    class Private p = {0};\n\n    // Expected output\n    class Private expected = {0};\n\n    // Trigger the function\n    class Private actual = get_abs_value(p);\n\n    // Check results\n    EXPECT_EQ(access_private::x(expected), access_private::x(actual));\n}","position":{"start":{"line":429,"column":1,"offset":8109},"end":{"line":459,"column":4,"offset":8757},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":462,"column":1,"offset":8760},"end":{"line":462,"column":31,"offset":8790},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":462,"column":31,"offset":8790}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/unittestbot.github.io/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"supported-c-syntax\"\n    }}>{`Supported C++ Syntax`}</h1>\n    <p>{`Support of C++ language features is very limited. Here you can find test cases examples. All code snippets below were\ntaken from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/cpp-example/\"\n      }}>{`this directory`}</a>{`.`}</p>\n    {\n      /* toc */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#reference-parameters\"\n        }}>{`Reference parameters`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#class-as-parameters\"\n        }}>{`Class as parameters`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#class-as-return-values\"\n        }}>{`Class as return values`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#class-methods\"\n        }}>{`Class methods`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#operators\"\n        }}>{`Operators`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#private\"\n        }}>{`Private`}</a></li>\n    </ul>\n    {\n      /* tocstop */\n    }\n    <h2 {...{\n      \"id\": \"reference-parameters\"\n    }}>{`Reference parameters`}</h2>\n    {\n      /*-\n      > `additional info`\n      [Source code example](https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/types.c#L23)\n      -*/\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`int double_abs_lvalue_reference(int& a) {\n    if (a < 0) {\n        a *= -2;\n    }\n    return a;\n}\n\nint double_abs_const_lvalue_reference(const int& a) {\n    if (a < 0) {\n        return -2 * a;\n    }\n    return a;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, double_abs_lvalue_reference_test_1)\n{\n    // Construct input\n    int a = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = double_abs_lvalue_reference(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n\n    // Check function parameters\n    int expected_a = 0;\n    EXPECT_EQ(expected_a, a);\n}\n\nTEST(regression, double_abs_lvalue_reference_test_2)\n{\n    // Construct input\n    int a = -1;\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = double_abs_lvalue_reference(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n\n    // Check function parameters\n    int expected_a = 2;\n    EXPECT_EQ(expected_a, a);\n}\n\nTEST(regression, double_abs_const_lvalue_reference_test_1)\n{\n    // Construct input\n    int a = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = double_abs_const_lvalue_reference(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, double_abs_const_lvalue_reference_test_2)\n{\n    // Construct input\n    int a = -1;\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = double_abs_const_lvalue_reference(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"class-as-parameters\"\n    }}>{`Class as parameters`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`For class as parameter class should be construct from initializer list of class members and has default constructor`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`class Point_2d {\npublic:\n  int x;\n  int y;\n\n  Point_2d();\n  Point_2d(const int& x, const int& y);\n}\n\n\nvoid set_abs_by_ref(Point_2d& point) {\n   if (point.x < 0) {\n       point.x = -1 * point.x;\n   }\n   if (point.y < 0) {\n       point.y *= -1;\n   }\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-1\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, set_abs_by_ref_test_1)\n{\n    // Construct input\n    class Point_2d point = {-1, -1};\n\n    // Expected output\n    // No output variable for void function\n\n    // Trigger the function\n    set_abs_by_ref(point);\n\n    // Check results\n    // No check results for void function\n\n    // Check function parameters\n    class Point_2d expected_point = {1, 1};\n    EXPECT_EQ(expected_point.x, point.x);\n    EXPECT_EQ(expected_point.y, point.y);\n}\n\nTEST(regression, set_abs_by_ref_test_2)\n{\n    // Construct input\n    class Point_2d point = {0, -1};\n\n    // Expected output\n    // No output variable for void function\n\n    // Trigger the function\n    set_abs_by_ref(point);\n\n    // Check results\n    // No check results for void function\n\n    // Check function parameters\n    class Point_2d expected_point = {0, 1};\n    EXPECT_EQ(expected_point.x, point.x);\n    EXPECT_EQ(expected_point.y, point.y);\n}\n\nTEST(regression, set_abs_by_ref_test_3)\n{\n    // Construct input\n    class Point_2d point = {-1, 0};\n\n    // Expected output\n    // No output variable for void function\n\n    // Trigger the function\n    set_abs_by_ref(point);\n\n    // Check results\n    // No check results for void function\n\n    // Check function parameters\n    class Point_2d expected_point = {1, 0};\n    EXPECT_EQ(expected_point.x, point.x);\n    EXPECT_EQ(expected_point.y, point.y);\n}\n\nTEST(regression, set_abs_by_ref_test_4)\n{\n    // Construct input\n    class Point_2d point = {0, 0};\n\n    // Expected output\n    // No output variable for void function\n\n    // Trigger the function\n    set_abs_by_ref(point);\n\n    // Check results\n    // No check results for void function\n\n    // Check function parameters\n    class Point_2d expected_point = {0, 0};\n    EXPECT_EQ(expected_point.x, point.x);\n    EXPECT_EQ(expected_point.y, point.y);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"class-as-return-values\"\n    }}>{`Class as return values`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`void set_abs_by_ref(Point_2d& point) {\n   if (point.x < 0) {\n       point.x = -1 * point.x;\n   }\n   if (point.y < 0) {\n       point.y *= -1;\n   }\n}\n\nPoint_2d abs_point(Point_2d point) {\n    set_abs_by_ref(point);\n    return point;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-2\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, abs_point_test_1)\n{\n    // Construct input\n    class Point_2d point = {-1, 0};\n\n    // Expected output\n    class Point_2d expected = {1, 0};\n\n    // Trigger the function\n    class Point_2d actual = abs_point(point);\n\n    // Check results\n    EXPECT_EQ(expected.x, actual.x);\n    EXPECT_EQ(expected.y, actual.y);\n}\n\nTEST(regression, abs_point_test_2)\n{\n    // Construct input\n    class Point_2d point = {-1, -1};\n\n    // Expected output\n    class Point_2d expected = {1, 1};\n\n    // Trigger the function\n    class Point_2d actual = abs_point(point);\n\n    // Check results\n    EXPECT_EQ(expected.x, actual.x);\n    EXPECT_EQ(expected.y, actual.y);\n}\n\nTEST(regression, abs_point_test_3)\n{\n    // Construct input\n    class Point_2d point = {0, -1};\n\n    // Expected output\n    class Point_2d expected = {0, 1};\n\n    // Trigger the function\n    class Point_2d actual = abs_point(point);\n\n    // Check results\n    EXPECT_EQ(expected.x, actual.x);\n    EXPECT_EQ(expected.y, actual.y);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"class-methods\"\n    }}>{`Class methods`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`For genetating method tests UTBot need default constructor of class`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`class Point_2d {\npublic:\n  int x;\n  int y;\n\n  Point_2d();\n  Point_2d(const int& x, const int& y);\n}\n\nint Point_2d::get_x() const {\n    return x;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-3\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, Point_2d_get_x_test_1)\n{\n    Point_2d Point_2d_obj;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = Point_2d_obj.get_x();\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"operators\"\n    }}>{`Operators`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`class Point_2d {\npublic:\n  int x;\n  int y;\n\n  Point_2d();\n  Point_2d(const int& x, const int& y);\n  Point_2d operator-=(const Point_2d& rhs);\n  friend Point_2d operator-(Point_2d lhs, const Point_2d& rhs);\n}\n\nPoint_2d Point_2d::operator-=(const Point_2d& rhs) {\n   this->x -= rhs.x;\n   this->y -= rhs.y;\n   return *this;\n}\n\nPoint_2d operator-(Point_2d lhs, const Point_2d& rhs) {\n    lhs -= rhs;\n    return lhs;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-4\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, Point_2d_operator_minus_equal_test_1)\n{\n    // Construct input\n    Point_2d Point_2d_obj;\n    class Point_2d rhs = {0, 0};\n\n    // Expected output\n    class Point_2d expected = {0, 0};\n\n    // Trigger the function\n    class Point_2d actual = Point_2d_obj.operator-=(rhs);\n\n    // Check results\n    EXPECT_EQ(expected.x, actual.x);\n    EXPECT_EQ(expected.y, actual.y);\n}\n\nTEST(regression, operator_minus_test_1)\n{\n    // Construct input\n    class Point_2d lhs = {0, 0};\n    class Point_2d rhs = {0, 0};\n\n    // Expected output\n    class Point_2d expected = {0, 0};\n\n    // Trigger the function\n    class Point_2d actual = operator-(lhs, rhs);\n\n    // Check results\n    EXPECT_EQ(expected.x, actual.x);\n    EXPECT_EQ(expected.y, actual.y);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"private\"\n    }}>{`Private`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`For test private UTBot use `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/martong/access_private.git\"\n        }}>{`martong/access_private.git`}</a></p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`class Private {\nprivate:\n    int x;\npublic:\n    Private();\n    Private(int x);\n    friend Private get_abs_value(Private p);\n};\n\nPrivate get_abs_value(Private p) {\n    if (p.x < 0) {\n        return -1 * p.x;\n    }\n    return p;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-5\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, get_abs_value_test_1)\n{\n    // Construct input\n    class Private p = {-1};\n\n    // Expected output\n    class Private expected = {1};\n\n    // Trigger the function\n    class Private actual = get_abs_value(p);\n\n    // Check results\n    EXPECT_EQ(access_private::x(expected), access_private::x(actual));\n}\n\nTEST(regression, get_abs_value_test_2)\n{\n    // Construct input\n    class Private p = {0};\n\n    // Expected output\n    class Private expected = {0};\n\n    // Trigger the function\n    class Private actual = get_abs_value(p);\n\n    // Check results\n    EXPECT_EQ(access_private::x(expected), access_private::x(actual));\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}