{"expireTime":9007200910765525000,"key":"gatsby-plugin-mdx-entire-payload-d9ca00b85bbf2713cc423c5cc04a63d7-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/home/runner/work/unittestbot.github.io/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":140,"offset":141},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":143},"end":{"line":5,"column":29,"offset":171},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"How UTBot Works","position":{"start":{"line":8,"column":3,"offset":176},"end":{"line":8,"column":18,"offset":191},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":174},"end":{"line":8,"column":18,"offset":191},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"UTBot uses KLEE symbolic execution engine to obtain information about program branches. C/C++ projects usually consist\nof source files and headers, which are compiled and linked into libraries and executable files (while libraries can also\nbe linked to one another or other executables, forming a directed acyclic graph of project linkage). Executables and\nlibraries can be considered as the artifacts of project building. KLEE operates with ","position":{"start":{"line":10,"column":1,"offset":193},"end":{"line":13,"column":86,"offset":635},"indent":[1,1,1]}},{"type":"link","title":null,"url":"???","children":[{"type":"text","value":"LLVM IR","position":{"start":{"line":13,"column":87,"offset":636},"end":{"line":13,"column":94,"offset":643},"indent":[]}}],"position":{"start":{"line":13,"column":86,"offset":635},"end":{"line":13,"column":100,"offset":649},"indent":[]}},{"type":"text","value":" so, to symbolically\nexecute code from a given product, UTBot needs the information about how the project is compiled and linked in order to\nbe able to recompile it into LLVM IR. UTBot is able to get this information from project build system via Bear\ntool ","position":{"start":{"line":13,"column":100,"offset":649},"end":{"line":16,"column":6,"offset":906},"indent":[1,1,1]}},{"type":"link","title":null,"url":"compile-databasse","children":[{"type":"text","value":"more info","position":{"start":{"line":16,"column":7,"offset":907},"end":{"line":16,"column":16,"offset":916},"indent":[]}}],"position":{"start":{"line":16,"column":6,"offset":906},"end":{"line":16,"column":36,"offset":936},"indent":[]}},{"type":"text","value":". UTBot supports CMake and Makefile build systems.","position":{"start":{"line":16,"column":36,"offset":936},"end":{"line":16,"column":86,"offset":986},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":193},"end":{"line":16,"column":86,"offset":986},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then, UTBot analyses given sources using ","position":{"start":{"line":18,"column":1,"offset":988},"end":{"line":18,"column":42,"offset":1029},"indent":[]}},{"type":"link","title":null,"url":"https://clang.llvm.org/docs/HowToSetupToolingForLLVM.html","children":[{"type":"text","value":"clang-tooling","position":{"start":{"line":18,"column":43,"offset":1030},"end":{"line":18,"column":56,"offset":1043},"indent":[]}}],"position":{"start":{"line":18,"column":42,"offset":1029},"end":{"line":18,"column":116,"offset":1103},"indent":[]}},{"type":"text","value":" to\nobtain C/C++ AST of files under test. Note that clang-tooling requires a compilation database to work. Essentially, a\ncompilation database is a structural representation of compile commands used to obtain C/C++ object files from project\nsources, and it is also retrieved from the build system by UTBot. UTBot treats functions as structural units of the\nproject and generates tests for them. In order to achieve this, UTBot creates symbolic wrappers called KLEE files for\nevery project source file, ","position":{"start":{"line":18,"column":116,"offset":1103},"end":{"line":23,"column":28,"offset":1605},"indent":[1,1,1,1,1]}},{"type":"link","title":null,"url":"preparing-sources-for-klee","children":[{"type":"text","value":"more info","position":{"start":{"line":23,"column":29,"offset":1606},"end":{"line":23,"column":38,"offset":1615},"indent":[]}}],"position":{"start":{"line":23,"column":28,"offset":1605},"end":{"line":23,"column":67,"offset":1644},"indent":[]}},{"type":"text","value":", that use symbolic variables concept for symbolic\nexecution. Symbolic variables can be treated as logical constraints for variables, which are transformed into concrete\nvalues as the result of symbolic execution. Symbolic variables are the core of symbolic execution approach to software\nverification, and they are used in many successful tools for software verification and test generation.","position":{"start":{"line":23,"column":67,"offset":1644},"end":{"line":26,"column":104,"offset":2036},"indent":[1,1,1]}}],"position":{"start":{"line":18,"column":1,"offset":988},"end":{"line":26,"column":104,"offset":2036},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then, UTBot uses information about project compilation and linkage to rebuild the project in LLVM\nbitcode ","position":{"start":{"line":28,"column":1,"offset":2038},"end":{"line":29,"column":9,"offset":2144},"indent":[1]}},{"type":"link","title":null,"url":"linking-bitcode","children":[{"type":"text","value":"more info","position":{"start":{"line":29,"column":10,"offset":2145},"end":{"line":29,"column":19,"offset":2154},"indent":[]}}],"position":{"start":{"line":29,"column":9,"offset":2144},"end":{"line":29,"column":37,"offset":2172},"indent":[]}},{"type":"text","value":". This is done to pass the linkage result (.bc file) to KLEE. If a function calls\nother functions from the project, UTBot can provide KLEE with their bitcode as well, or, depending on user preferences,\nuse generated symbolic stubs for them ","position":{"start":{"line":29,"column":37,"offset":2172},"end":{"line":31,"column":39,"offset":2412},"indent":[1,1]}},{"type":"link","title":null,"url":"stubs","children":[{"type":"text","value":"stubs","position":{"start":{"line":31,"column":40,"offset":2413},"end":{"line":31,"column":45,"offset":2418},"indent":[]}}],"position":{"start":{"line":31,"column":39,"offset":2412},"end":{"line":31,"column":53,"offset":2426},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":31,"column":53,"offset":2426},"end":{"line":31,"column":54,"offset":2427},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":2038},"end":{"line":31,"column":54,"offset":2427},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"KLEE produces files that represent test cases for a given function, and UTBot parses and transforms them to C++ test\nfiles (For supported C/C++ features, see ","position":{"start":{"line":33,"column":1,"offset":2429},"end":{"line":34,"column":42,"offset":2587},"indent":[1]}},{"type":"link","title":null,"url":"c-syntax","children":[{"type":"text","value":"c syntax","position":{"start":{"line":34,"column":43,"offset":2588},"end":{"line":34,"column":51,"offset":2596},"indent":[]}}],"position":{"start":{"line":34,"column":42,"offset":2587},"end":{"line":34,"column":62,"offset":2607},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":34,"column":62,"offset":2607},"end":{"line":34,"column":64,"offset":2609},"indent":[]}},{"type":"link","title":null,"url":"cpp-syntax","children":[{"type":"text","value":"c++ syntax","position":{"start":{"line":34,"column":65,"offset":2610},"end":{"line":34,"column":75,"offset":2620},"indent":[]}}],"position":{"start":{"line":34,"column":64,"offset":2609},"end":{"line":34,"column":88,"offset":2633},"indent":[]}},{"type":"text","value":"), which present the test cases\nwith ","position":{"start":{"line":34,"column":88,"offset":2633},"end":{"line":35,"column":6,"offset":2670},"indent":[1]}},{"type":"link","title":null,"url":"https://google.github.io/googletest/","children":[{"type":"text","value":"GoogleTest","position":{"start":{"line":35,"column":7,"offset":2671},"end":{"line":35,"column":17,"offset":2681},"indent":[]}}],"position":{"start":{"line":35,"column":6,"offset":2670},"end":{"line":35,"column":56,"offset":2720},"indent":[]}},{"type":"text","value":" framework. UTBot also provides its users with a build system for\ngenerated tests, automatically compiling and linking them with project files. Users can run\ntests ","position":{"start":{"line":35,"column":56,"offset":2720},"end":{"line":37,"column":7,"offset":2884},"indent":[1,1]}},{"type":"link","title":null,"url":"generating-and-running-tests","children":[{"type":"text","value":"more info","position":{"start":{"line":37,"column":8,"offset":2885},"end":{"line":37,"column":17,"offset":2894},"indent":[]}}],"position":{"start":{"line":37,"column":7,"offset":2884},"end":{"line":37,"column":48,"offset":2925},"indent":[]}},{"type":"text","value":" with a single click and see the results and coverage information in\nVSCode Panel. UTBot uses Makefiles for test runs ","position":{"start":{"line":37,"column":48,"offset":2925},"end":{"line":38,"column":50,"offset":3043},"indent":[1]}},{"type":"link","title":null,"url":"incrementality","children":[{"type":"text","value":"more info","position":{"start":{"line":38,"column":51,"offset":3044},"end":{"line":38,"column":60,"offset":3053},"indent":[]}}],"position":{"start":{"line":38,"column":50,"offset":3043},"end":{"line":38,"column":77,"offset":3070},"indent":[]}},{"type":"text","value":", so UTBot tests can be used in continuous\nintegration.","position":{"start":{"line":38,"column":77,"offset":3070},"end":{"line":39,"column":13,"offset":3125},"indent":[1]}}],"position":{"start":{"line":33,"column":1,"offset":2429},"end":{"line":39,"column":13,"offset":3125},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/pipelineUtbot.png","alt":"UTBotCpp pipeline","position":{"start":{"line":41,"column":1,"offset":3127},"end":{"line":41,"column":121,"offset":3247},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":3127},"end":{"line":41,"column":121,"offset":3247},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The most important things are described below in sequential order.","position":{"start":{"line":43,"column":1,"offset":3249},"end":{"line":43,"column":67,"offset":3315},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":3249},"end":{"line":43,"column":67,"offset":3315},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Tests Generation","position":{"start":{"line":45,"column":4,"offset":3320},"end":{"line":45,"column":20,"offset":3336},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":3317},"end":{"line":45,"column":20,"offset":3336},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"install-vscode-plugin","children":[{"type":"text","value":"Client","position":{"start":{"line":47,"column":5,"offset":3342},"end":{"line":47,"column":11,"offset":3348},"indent":[]}}],"position":{"start":{"line":47,"column":4,"offset":3341},"end":{"line":47,"column":35,"offset":3372},"indent":[]}},{"type":"text","value":" sends request (one of ","position":{"start":{"line":47,"column":35,"offset":3372},"end":{"line":47,"column":58,"offset":3395},"indent":[]}},{"type":"link","title":null,"url":"generating-tests","children":[{"type":"text","value":"types","position":{"start":{"line":47,"column":59,"offset":3396},"end":{"line":47,"column":64,"offset":3401},"indent":[]}}],"position":{"start":{"line":47,"column":58,"offset":3395},"end":{"line":47,"column":83,"offset":3420},"indent":[]}},{"type":"text","value":")\nto ","position":{"start":{"line":47,"column":83,"offset":3420},"end":{"line":48,"column":7,"offset":3428},"indent":[4]}},{"type":"link","title":null,"url":"install-server","children":[{"type":"text","value":"server","position":{"start":{"line":48,"column":8,"offset":3429},"end":{"line":48,"column":14,"offset":3435},"indent":[]}}],"position":{"start":{"line":48,"column":7,"offset":3428},"end":{"line":48,"column":31,"offset":3452},"indent":[]}},{"type":"text","value":".\nThe ","position":{"start":{"line":48,"column":31,"offset":3452},"end":{"line":49,"column":8,"offset":3461},"indent":[4]}},{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/testgens","children":[{"type":"text","value":"corresponding","position":{"start":{"line":49,"column":9,"offset":3462},"end":{"line":49,"column":22,"offset":3475},"indent":[]}}],"position":{"start":{"line":49,"column":8,"offset":3461},"end":{"line":49,"column":94,"offset":3547},"indent":[]}},{"type":"text","value":" object aggregates\nrequests' information.","position":{"start":{"line":49,"column":94,"offset":3547},"end":{"line":50,"column":26,"offset":3591},"indent":[4]}}],"position":{"start":{"line":47,"column":4,"offset":3341},"end":{"line":50,"column":26,"offset":3591},"indent":[4,4,4]}}],"position":{"start":{"line":47,"column":1,"offset":3338},"end":{"line":50,"column":26,"offset":3591},"indent":[1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/blob/main/server/src/fetchers/Fetcher.cpp","children":[{"type":"text","value":"Fetcher","position":{"start":{"line":51,"column":5,"offset":3596},"end":{"line":51,"column":12,"offset":3603},"indent":[]}}],"position":{"start":{"line":51,"column":4,"offset":3595},"end":{"line":51,"column":96,"offset":3687},"indent":[]}},{"type":"text","value":" fetches types, methods,\nglobal variable usages, array usages, includes for all files in request. It\nuses ","position":{"start":{"line":51,"column":96,"offset":3687},"end":{"line":53,"column":9,"offset":3799},"indent":[4,4]}},{"type":"link","title":null,"url":"https://clang.llvm.org/docs/LibTooling.html","children":[{"type":"text","value":"LibTooling","position":{"start":{"line":53,"column":10,"offset":3800},"end":{"line":53,"column":20,"offset":3810},"indent":[]}}],"position":{"start":{"line":53,"column":9,"offset":3799},"end":{"line":53,"column":66,"offset":3856},"indent":[]}},{"type":"text","value":" for parsing source code, traversing types, etc.","position":{"start":{"line":53,"column":66,"offset":3856},"end":{"line":53,"column":114,"offset":3904},"indent":[]}}],"position":{"start":{"line":51,"column":4,"offset":3595},"end":{"line":53,"column":114,"offset":3904},"indent":[4,4]}}],"position":{"start":{"line":51,"column":1,"offset":3592},"end":{"line":53,"column":114,"offset":3904},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/clang-utils/SourceToHeaderRewriter.cpp","children":[{"type":"text","value":"SourceToHeaderRewriter","position":{"start":{"line":54,"column":5,"offset":3909},"end":{"line":54,"column":27,"offset":3931},"indent":[]}}],"position":{"start":{"line":54,"column":4,"offset":3908},"end":{"line":54,"column":129,"offset":4033},"indent":[]}},{"type":"text","value":"\ngenerates headers (.h files) based on source (.c files).","position":{"start":{"line":54,"column":129,"offset":4033},"end":{"line":55,"column":60,"offset":4093},"indent":[4]}}],"position":{"start":{"line":54,"column":4,"offset":3908},"end":{"line":55,"column":60,"offset":4093},"indent":[4]}}],"position":{"start":{"line":54,"column":1,"offset":3905},"end":{"line":55,"column":60,"offset":4093},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/FeaturesFilter.cpp","children":[{"type":"text","value":"FeaturesFilter","position":{"start":{"line":56,"column":5,"offset":4098},"end":{"line":56,"column":19,"offset":4112},"indent":[]}}],"position":{"start":{"line":56,"column":4,"offset":4097},"end":{"line":56,"column":101,"offset":4194},"indent":[]}},{"type":"text","value":" filters out all\nmethods except the ones listed in ","position":{"start":{"line":56,"column":101,"offset":4194},"end":{"line":57,"column":38,"offset":4248},"indent":[4]}},{"type":"link","title":null,"url":"c-syntax","children":[{"type":"text","value":"supported syntax","position":{"start":{"line":57,"column":39,"offset":4249},"end":{"line":57,"column":55,"offset":4265},"indent":[]}}],"position":{"start":{"line":57,"column":38,"offset":4248},"end":{"line":57,"column":66,"offset":4276},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":57,"column":66,"offset":4276},"end":{"line":57,"column":67,"offset":4277},"indent":[]}}],"position":{"start":{"line":56,"column":4,"offset":4097},"end":{"line":57,"column":67,"offset":4277},"indent":[4]}}],"position":{"start":{"line":56,"column":1,"offset":4094},"end":{"line":57,"column":67,"offset":4277},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/Synchronizer.cpp","children":[{"type":"text","value":"Synchronizer","position":{"start":{"line":58,"column":5,"offset":4282},"end":{"line":58,"column":17,"offset":4294},"indent":[]}}],"position":{"start":{"line":58,"column":4,"offset":4281},"end":{"line":58,"column":97,"offset":4374},"indent":[]}},{"type":"text","value":"\nsynchronizes ","position":{"start":{"line":58,"column":97,"offset":4374},"end":{"line":59,"column":17,"offset":4391},"indent":[4]}},{"type":"link","title":null,"url":"stubs","children":[{"type":"text","value":"stubs","position":{"start":{"line":59,"column":18,"offset":4392},"end":{"line":59,"column":23,"offset":4397},"indent":[]}}],"position":{"start":{"line":59,"column":17,"offset":4391},"end":{"line":59,"column":31,"offset":4405},"indent":[]}},{"type":"text","value":" and wrappers for all files\nin ","position":{"start":{"line":59,"column":31,"offset":4405},"end":{"line":60,"column":7,"offset":4439},"indent":[4]}},{"type":"link","title":null,"url":"https://clang.llvm.org/docs/JSONCompilationDatabase.html","children":[{"type":"text","value":"compile_commands.json","position":{"start":{"line":60,"column":8,"offset":4440},"end":{"line":60,"column":29,"offset":4461},"indent":[]}}],"position":{"start":{"line":60,"column":7,"offset":4439},"end":{"line":60,"column":88,"offset":4520},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":60,"column":88,"offset":4520},"end":{"line":60,"column":89,"offset":4521},"indent":[]}}],"position":{"start":{"line":58,"column":4,"offset":4281},"end":{"line":60,"column":89,"offset":4521},"indent":[4,4]}}],"position":{"start":{"line":58,"column":1,"offset":4278},"end":{"line":60,"column":89,"offset":4521},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/KleeGenerator.cpp","children":[{"type":"text","value":"KleeGenerator","position":{"start":{"line":61,"column":5,"offset":4526},"end":{"line":61,"column":18,"offset":4539},"indent":[]}}],"position":{"start":{"line":61,"column":4,"offset":4525},"end":{"line":61,"column":99,"offset":4620},"indent":[]}},{"type":"text","value":" generates klee files\nas well as source files, also builds them in ","position":{"start":{"line":61,"column":99,"offset":4620},"end":{"line":62,"column":49,"offset":4690},"indent":[4]}},{"type":"link","title":null,"url":"https://llvm.org/docs/BitCodeFormat.html","children":[{"type":"text","value":"bitcode","position":{"start":{"line":62,"column":50,"offset":4691},"end":{"line":62,"column":57,"offset":4698},"indent":[]}}],"position":{"start":{"line":62,"column":49,"offset":4690},"end":{"line":62,"column":100,"offset":4741},"indent":[]}},{"type":"text","value":" files.","position":{"start":{"line":62,"column":100,"offset":4741},"end":{"line":62,"column":107,"offset":4748},"indent":[]}}],"position":{"start":{"line":61,"column":4,"offset":4525},"end":{"line":62,"column":107,"offset":4748},"indent":[4]}}],"position":{"start":{"line":61,"column":1,"offset":4522},"end":{"line":62,"column":107,"offset":4748},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/building/Linker.cpp","children":[{"type":"text","value":"Linker","position":{"start":{"line":63,"column":5,"offset":4753},"end":{"line":63,"column":11,"offset":4759},"indent":[]}}],"position":{"start":{"line":63,"column":4,"offset":4752},"end":{"line":63,"column":94,"offset":4842},"indent":[]}},{"type":"text","value":" links bitcode files\ntogether into module.","position":{"start":{"line":63,"column":94,"offset":4842},"end":{"line":64,"column":25,"offset":4887},"indent":[4]}}],"position":{"start":{"line":63,"column":4,"offset":4752},"end":{"line":64,"column":25,"offset":4887},"indent":[4]}}],"position":{"start":{"line":63,"column":1,"offset":4749},"end":{"line":64,"column":25,"offset":4887},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/building/Linker.cpp","children":[{"type":"text","value":"Linker","position":{"start":{"line":65,"column":5,"offset":4892},"end":{"line":65,"column":11,"offset":4898},"indent":[]}}],"position":{"start":{"line":65,"column":4,"offset":4891},"end":{"line":65,"column":94,"offset":4981},"indent":[]}},{"type":"text","value":"\nwrites ","position":{"start":{"line":65,"column":94,"offset":4981},"end":{"line":66,"column":11,"offset":4992},"indent":[4]}},{"type":"link","title":null,"url":"makefiles","children":[{"type":"text","value":"Makefiles","position":{"start":{"line":66,"column":12,"offset":4993},"end":{"line":66,"column":21,"offset":5002},"indent":[]}}],"position":{"start":{"line":66,"column":11,"offset":4992},"end":{"line":66,"column":33,"offset":5014},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":66,"column":33,"offset":5014},"end":{"line":66,"column":34,"offset":5015},"indent":[]}}],"position":{"start":{"line":65,"column":4,"offset":4891},"end":{"line":66,"column":34,"offset":5015},"indent":[4]}}],"position":{"start":{"line":65,"column":1,"offset":4888},"end":{"line":66,"column":34,"offset":5015},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/KleeRunner.cpp","children":[{"type":"text","value":"KleeRunner","position":{"start":{"line":67,"column":5,"offset":5020},"end":{"line":67,"column":15,"offset":5030},"indent":[]}}],"position":{"start":{"line":67,"column":4,"offset":5019},"end":{"line":67,"column":93,"offset":5108},"indent":[]}},{"type":"text","value":"\nruns ","position":{"start":{"line":67,"column":93,"offset":5108},"end":{"line":68,"column":9,"offset":5117},"indent":[4]}},{"type":"link","title":null,"url":"https://klee.github.io/","children":[{"type":"text","value":"KLEE","position":{"start":{"line":68,"column":10,"offset":5118},"end":{"line":68,"column":14,"offset":5122},"indent":[]}}],"position":{"start":{"line":68,"column":9,"offset":5117},"end":{"line":68,"column":40,"offset":5148},"indent":[]}},{"type":"text","value":" on module consecutively for each method from request.","position":{"start":{"line":68,"column":40,"offset":5148},"end":{"line":68,"column":94,"offset":5202},"indent":[]}}],"position":{"start":{"line":67,"column":4,"offset":5019},"end":{"line":68,"column":94,"offset":5202},"indent":[4]}}],"position":{"start":{"line":67,"column":1,"offset":5016},"end":{"line":68,"column":94,"offset":5202},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/KleeGenerator.cpp","children":[{"type":"text","value":"KleeGenerator","position":{"start":{"line":69,"column":6,"offset":5208},"end":{"line":69,"column":19,"offset":5221},"indent":[]}}],"position":{"start":{"line":69,"column":5,"offset":5207},"end":{"line":69,"column":100,"offset":5302},"indent":[]}},{"type":"text","value":" parses output of\nKLEE and writes files of ","position":{"start":{"line":69,"column":100,"offset":5302},"end":{"line":70,"column":30,"offset":5349},"indent":[5]}},{"type":"link","title":null,"url":"https://github.com/google/googletest","children":[{"type":"text","value":"GoogleTest","position":{"start":{"line":70,"column":31,"offset":5350},"end":{"line":70,"column":41,"offset":5360},"indent":[]}}],"position":{"start":{"line":70,"column":30,"offset":5349},"end":{"line":70,"column":80,"offset":5399},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":70,"column":80,"offset":5399},"end":{"line":70,"column":81,"offset":5400},"indent":[]}}],"position":{"start":{"line":69,"column":5,"offset":5207},"end":{"line":70,"column":81,"offset":5400},"indent":[5]}}],"position":{"start":{"line":69,"column":1,"offset":5203},"end":{"line":70,"column":81,"offset":5400},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"install-server","children":[{"type":"text","value":"Server","position":{"start":{"line":71,"column":6,"offset":5406},"end":{"line":71,"column":12,"offset":5412},"indent":[]}}],"position":{"start":{"line":71,"column":5,"offset":5405},"end":{"line":71,"column":29,"offset":5429},"indent":[]}},{"type":"text","value":" sends final response to client and also transfers generated files for remote scenario.","position":{"start":{"line":71,"column":29,"offset":5429},"end":{"line":71,"column":116,"offset":5516},"indent":[]}}],"position":{"start":{"line":71,"column":5,"offset":5405},"end":{"line":71,"column":116,"offset":5516},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":5401},"end":{"line":71,"column":116,"offset":5516},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":3338},"end":{"line":71,"column":116,"offset":5516},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Tests Running","position":{"start":{"line":73,"column":4,"offset":5521},"end":{"line":73,"column":17,"offset":5534},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":5518},"end":{"line":73,"column":17,"offset":5534},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When user runs the tests, server performs various operations that might depend on the compiler used by the project.","position":{"start":{"line":75,"column":1,"offset":5536},"end":{"line":75,"column":116,"offset":5651},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":5536},"end":{"line":75,"column":116,"offset":5651},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"install-vscode-plugin","children":[{"type":"text","value":"Client","position":{"start":{"line":77,"column":5,"offset":5657},"end":{"line":77,"column":11,"offset":5663},"indent":[]}}],"position":{"start":{"line":77,"column":4,"offset":5656},"end":{"line":77,"column":35,"offset":5687},"indent":[]}},{"type":"text","value":" sends request to ","position":{"start":{"line":77,"column":35,"offset":5687},"end":{"line":77,"column":53,"offset":5705},"indent":[]}},{"type":"link","title":null,"url":"install-server","children":[{"type":"text","value":"server","position":{"start":{"line":77,"column":54,"offset":5706},"end":{"line":77,"column":60,"offset":5712},"indent":[]}}],"position":{"start":{"line":77,"column":53,"offset":5705},"end":{"line":77,"column":77,"offset":5729},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":77,"column":77,"offset":5729},"end":{"line":77,"column":78,"offset":5730},"indent":[]}}],"position":{"start":{"line":77,"column":4,"offset":5656},"end":{"line":77,"column":78,"offset":5730},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":5653},"end":{"line":77,"column":78,"offset":5730},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/coverage/TestRunner.cpp","children":[{"type":"text","value":"TestRunner","position":{"start":{"line":78,"column":5,"offset":5735},"end":{"line":78,"column":15,"offset":5745},"indent":[]}}],"position":{"start":{"line":78,"column":4,"offset":5734},"end":{"line":78,"column":102,"offset":5832},"indent":[]}},{"type":"text","value":" chooses coverage\ntool based on the compiler used by the project. It\nis ","position":{"start":{"line":78,"column":102,"offset":5832},"end":{"line":80,"column":7,"offset":5910},"indent":[4,4]}},{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/coverage/GcovCoverageTool.cpp","children":[{"type":"text","value":"GcovCoverageTool","position":{"start":{"line":80,"column":8,"offset":5911},"end":{"line":80,"column":24,"offset":5927},"indent":[]}}],"position":{"start":{"line":80,"column":7,"offset":5910},"end":{"line":80,"column":117,"offset":6020},"indent":[]}},{"type":"text","value":" in\ncase of ","position":{"start":{"line":80,"column":117,"offset":6020},"end":{"line":81,"column":12,"offset":6035},"indent":[4]}},{"type":"link","title":null,"url":"https://gcc.gnu.org/","children":[{"type":"text","value":"gcc","position":{"start":{"line":81,"column":13,"offset":6036},"end":{"line":81,"column":16,"offset":6039},"indent":[]}}],"position":{"start":{"line":81,"column":12,"offset":6035},"end":{"line":81,"column":39,"offset":6062},"indent":[]}},{"type":"text","value":"\nand ","position":{"start":{"line":81,"column":39,"offset":6062},"end":{"line":82,"column":8,"offset":6070},"indent":[4]}},{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/coverage/LlvmCoverageTool.cpp","children":[{"type":"text","value":"LlvmCoverageTool","position":{"start":{"line":82,"column":9,"offset":6071},"end":{"line":82,"column":25,"offset":6087},"indent":[]}}],"position":{"start":{"line":82,"column":8,"offset":6070},"end":{"line":82,"column":118,"offset":6180},"indent":[]}},{"type":"text","value":"\nin case of ","position":{"start":{"line":82,"column":118,"offset":6180},"end":{"line":83,"column":15,"offset":6195},"indent":[4]}},{"type":"link","title":null,"url":"https://clang.llvm.org/","children":[{"type":"text","value":"clang","position":{"start":{"line":83,"column":16,"offset":6196},"end":{"line":83,"column":21,"offset":6201},"indent":[]}}],"position":{"start":{"line":83,"column":15,"offset":6195},"end":{"line":83,"column":47,"offset":6227},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":83,"column":47,"offset":6227},"end":{"line":83,"column":48,"offset":6228},"indent":[]}}],"position":{"start":{"line":78,"column":4,"offset":5734},"end":{"line":83,"column":48,"offset":6228},"indent":[4,4,4,4,4]}}],"position":{"start":{"line":78,"column":1,"offset":5731},"end":{"line":83,"column":48,"offset":6228},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/coverage/TestRunner.cpp","children":[{"type":"text","value":"TestRunner","position":{"start":{"line":84,"column":5,"offset":6233},"end":{"line":84,"column":15,"offset":6243},"indent":[]}}],"position":{"start":{"line":84,"column":4,"offset":6232},"end":{"line":84,"column":102,"offset":6330},"indent":[]}},{"type":"text","value":" collects list of\ntuples (file path, suite name, test name) based on the information from the ","position":{"start":{"line":84,"column":102,"offset":6330},"end":{"line":85,"column":80,"offset":6427},"indent":[4]}},{"type":"link","title":null,"url":"install-vscode-plugin","children":[{"type":"text","value":"client","position":{"start":{"line":85,"column":81,"offset":6428},"end":{"line":85,"column":87,"offset":6434},"indent":[]}}],"position":{"start":{"line":85,"column":80,"offset":6427},"end":{"line":85,"column":111,"offset":6458},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":85,"column":111,"offset":6458},"end":{"line":85,"column":112,"offset":6459},"indent":[]}}],"position":{"start":{"line":84,"column":4,"offset":6232},"end":{"line":85,"column":112,"offset":6459},"indent":[4]}}],"position":{"start":{"line":84,"column":1,"offset":6229},"end":{"line":85,"column":112,"offset":6459},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/coverage/TestRunner.cpp","children":[{"type":"text","value":"TestRunner","position":{"start":{"line":86,"column":5,"offset":6464},"end":{"line":86,"column":15,"offset":6474},"indent":[]}}],"position":{"start":{"line":86,"column":4,"offset":6463},"end":{"line":86,"column":102,"offset":6561},"indent":[]}},{"type":"text","value":" incrementally\nbuilds tests with instrumented options (coverage and sanitizer). To achieve this ","position":{"start":{"line":86,"column":102,"offset":6561},"end":{"line":87,"column":85,"offset":6660},"indent":[4]}},{"type":"link","title":null,"url":"makefiles","children":[{"type":"text","value":"Makefiles","position":{"start":{"line":87,"column":86,"offset":6661},"end":{"line":87,"column":95,"offset":6670},"indent":[]}}],"position":{"start":{"line":87,"column":85,"offset":6660},"end":{"line":87,"column":107,"offset":6682},"indent":[]}},{"type":"text","value":" are used.","position":{"start":{"line":87,"column":107,"offset":6682},"end":{"line":87,"column":117,"offset":6692},"indent":[]}}],"position":{"start":{"line":86,"column":4,"offset":6463},"end":{"line":87,"column":117,"offset":6692},"indent":[4]}}],"position":{"start":{"line":86,"column":1,"offset":6460},"end":{"line":87,"column":117,"offset":6692},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/coverage/TestRunner.cpp","children":[{"type":"text","value":"TestRunner","position":{"start":{"line":88,"column":5,"offset":6697},"end":{"line":88,"column":15,"offset":6707},"indent":[]}}],"position":{"start":{"line":88,"column":4,"offset":6696},"end":{"line":88,"column":102,"offset":6794},"indent":[]}},{"type":"text","value":" runs tests by\ncalling ","position":{"start":{"line":88,"column":102,"offset":6794},"end":{"line":89,"column":12,"offset":6820},"indent":[4]}},{"type":"link","title":null,"url":"https://www.gnu.org/software/make/manual/make.html","children":[{"type":"text","value":"make","position":{"start":{"line":89,"column":13,"offset":6821},"end":{"line":89,"column":17,"offset":6825},"indent":[]}}],"position":{"start":{"line":89,"column":12,"offset":6820},"end":{"line":89,"column":70,"offset":6878},"indent":[]}},{"type":"text","value":" on makefiles that correspond to the given sources.","position":{"start":{"line":89,"column":70,"offset":6878},"end":{"line":89,"column":121,"offset":6929},"indent":[]}}],"position":{"start":{"line":88,"column":4,"offset":6696},"end":{"line":89,"column":121,"offset":6929},"indent":[4]}}],"position":{"start":{"line":88,"column":1,"offset":6693},"end":{"line":89,"column":121,"offset":6929},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/blob/main/server/src/coverage/CoverageAndResultsGenerator.cpp","children":[{"type":"text","value":"CoverageAndResultsGenerator","position":{"start":{"line":90,"column":5,"offset":6934},"end":{"line":90,"column":32,"offset":6961},"indent":[]}}],"position":{"start":{"line":90,"column":4,"offset":6933},"end":{"line":90,"column":136,"offset":7065},"indent":[]}},{"type":"text","value":"\ncollects coverage information using previously chosen tool.","position":{"start":{"line":90,"column":136,"offset":7065},"end":{"line":91,"column":63,"offset":7128},"indent":[4]}}],"position":{"start":{"line":90,"column":4,"offset":6933},"end":{"line":91,"column":63,"offset":7128},"indent":[4]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/coverage/GcovCoverageTool.cpp","children":[{"type":"text","value":"GcovCoverageTool","position":{"start":{"line":92,"column":8,"offset":7136},"end":{"line":92,"column":24,"offset":7152},"indent":[]}}],"position":{"start":{"line":92,"column":7,"offset":7135},"end":{"line":92,"column":117,"offset":7245},"indent":[]}},{"type":"text","value":"\nruns ","position":{"start":{"line":92,"column":117,"offset":7245},"end":{"line":93,"column":12,"offset":7257},"indent":[7]}},{"type":"link","title":null,"url":"https://gcc.gnu.org/onlinedocs/gcc/Gcov.html","children":[{"type":"text","value":"gcov","position":{"start":{"line":93,"column":13,"offset":7258},"end":{"line":93,"column":17,"offset":7262},"indent":[]}}],"position":{"start":{"line":93,"column":12,"offset":7257},"end":{"line":93,"column":64,"offset":7309},"indent":[]}},{"type":"text","value":"\non ","position":{"start":{"line":93,"column":64,"offset":7309},"end":{"line":94,"column":10,"offset":7319},"indent":[7]}},{"type":"link","title":null,"url":"https://gcc.gnu.org/onlinedocs/gcc/Gcov-Data-Files.html","children":[{"type":"text","value":".gcno and .gcda","position":{"start":{"line":94,"column":11,"offset":7320},"end":{"line":94,"column":26,"offset":7335},"indent":[]}}],"position":{"start":{"line":94,"column":10,"offset":7319},"end":{"line":94,"column":84,"offset":7393},"indent":[]}},{"type":"text","value":" files. It provides a report\nin ","position":{"start":{"line":94,"column":84,"offset":7393},"end":{"line":95,"column":10,"offset":7431},"indent":[7]}},{"type":"inlineCode","value":".json","position":{"start":{"line":95,"column":10,"offset":7431},"end":{"line":95,"column":17,"offset":7438},"indent":[]}},{"type":"text","value":" format.","position":{"start":{"line":95,"column":17,"offset":7438},"end":{"line":95,"column":25,"offset":7446},"indent":[]}}],"position":{"start":{"line":92,"column":7,"offset":7135},"end":{"line":95,"column":25,"offset":7446},"indent":[7,7,7]}}],"position":{"start":{"line":92,"column":4,"offset":7132},"end":{"line":95,"column":25,"offset":7446},"indent":[4,4,4]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/coverage/LlvmCoverageTool.cpp","children":[{"type":"text","value":"LlvmCoverageTool","position":{"start":{"line":96,"column":8,"offset":7454},"end":{"line":96,"column":24,"offset":7470},"indent":[]}}],"position":{"start":{"line":96,"column":7,"offset":7453},"end":{"line":96,"column":117,"offset":7563},"indent":[]}},{"type":"text","value":"\nruns ","position":{"start":{"line":96,"column":117,"offset":7563},"end":{"line":97,"column":12,"offset":7575},"indent":[7]}},{"type":"link","title":null,"url":"https://llvm.org/docs/CommandGuide/llvm-profdata.html","children":[{"type":"text","value":"llvm-profdata","position":{"start":{"line":97,"column":13,"offset":7576},"end":{"line":97,"column":26,"offset":7589},"indent":[]}}],"position":{"start":{"line":97,"column":12,"offset":7575},"end":{"line":97,"column":82,"offset":7645},"indent":[]}},{"type":"text","value":" to merge several .profraw files into\none. It provides a report in ","position":{"start":{"line":97,"column":82,"offset":7645},"end":{"line":98,"column":36,"offset":7718},"indent":[7]}},{"type":"inlineCode","value":".json","position":{"start":{"line":98,"column":36,"offset":7718},"end":{"line":98,"column":43,"offset":7725},"indent":[]}},{"type":"text","value":" format using ","position":{"start":{"line":98,"column":43,"offset":7725},"end":{"line":98,"column":57,"offset":7739},"indent":[]}},{"type":"link","title":null,"url":"https://llvm.org/docs/CommandGuide/llvm-cov.html","children":[{"type":"text","value":"llvm-cov","position":{"start":{"line":98,"column":58,"offset":7740},"end":{"line":98,"column":66,"offset":7748},"indent":[]}}],"position":{"start":{"line":98,"column":57,"offset":7739},"end":{"line":98,"column":117,"offset":7799},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":98,"column":117,"offset":7799},"end":{"line":98,"column":118,"offset":7800},"indent":[]}}],"position":{"start":{"line":96,"column":7,"offset":7453},"end":{"line":98,"column":118,"offset":7800},"indent":[7,7]}}],"position":{"start":{"line":96,"column":4,"offset":7450},"end":{"line":98,"column":118,"offset":7800},"indent":[4,4]}}],"position":{"start":{"line":92,"column":4,"offset":7132},"end":{"line":98,"column":118,"offset":7800},"indent":[4,4,4,4,4,4]}}],"position":{"start":{"line":90,"column":1,"offset":6930},"end":{"line":98,"column":118,"offset":7800},"indent":[1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Both ","position":{"start":{"line":99,"column":4,"offset":7804},"end":{"line":99,"column":9,"offset":7809},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/coverage/GcovCoverageTool.cpp","children":[{"type":"text","value":"GcovCoverageTool","position":{"start":{"line":99,"column":10,"offset":7810},"end":{"line":99,"column":26,"offset":7826},"indent":[]}}],"position":{"start":{"line":99,"column":9,"offset":7809},"end":{"line":99,"column":119,"offset":7919},"indent":[]}},{"type":"text","value":"\nand ","position":{"start":{"line":99,"column":119,"offset":7919},"end":{"line":100,"column":8,"offset":7927},"indent":[4]}},{"type":"link","title":null,"url":"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/coverage/LlvmCoverageTool.cpp","children":[{"type":"text","value":"LlvmCoverageTool","position":{"start":{"line":100,"column":9,"offset":7928},"end":{"line":100,"column":25,"offset":7944},"indent":[]}}],"position":{"start":{"line":100,"column":8,"offset":7927},"end":{"line":100,"column":118,"offset":8037},"indent":[]}},{"type":"text","value":"\nread generated ","position":{"start":{"line":100,"column":118,"offset":8037},"end":{"line":101,"column":19,"offset":8056},"indent":[4]}},{"type":"inlineCode","value":".json","position":{"start":{"line":101,"column":19,"offset":8056},"end":{"line":101,"column":26,"offset":8063},"indent":[]}},{"type":"text","value":" file and determine set of covered lines.","position":{"start":{"line":101,"column":26,"offset":8063},"end":{"line":101,"column":67,"offset":8104},"indent":[]}}],"position":{"start":{"line":99,"column":4,"offset":7804},"end":{"line":101,"column":67,"offset":8104},"indent":[4,4]}}],"position":{"start":{"line":99,"column":1,"offset":7801},"end":{"line":101,"column":67,"offset":8104},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Finally, ","position":{"start":{"line":102,"column":4,"offset":8108},"end":{"line":102,"column":13,"offset":8117},"indent":[]}},{"type":"link","title":null,"url":"install-server","children":[{"type":"text","value":"Server","position":{"start":{"line":102,"column":14,"offset":8118},"end":{"line":102,"column":20,"offset":8124},"indent":[]}}],"position":{"start":{"line":102,"column":13,"offset":8117},"end":{"line":102,"column":37,"offset":8141},"indent":[]}},{"type":"text","value":" sends response to the client.","position":{"start":{"line":102,"column":37,"offset":8141},"end":{"line":102,"column":67,"offset":8171},"indent":[]}}],"position":{"start":{"line":102,"column":4,"offset":8108},"end":{"line":102,"column":67,"offset":8171},"indent":[]}}],"position":{"start":{"line":102,"column":1,"offset":8105},"end":{"line":102,"column":67,"offset":8171},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":5653},"end":{"line":102,"column":67,"offset":8171},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":105,"column":1,"offset":8174},"end":{"line":105,"column":31,"offset":8204},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":105,"column":31,"offset":8204}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/unittestbot.github.io/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"how-utbot-works\"\n    }}>{`How UTBot Works`}</h1>\n    <p>{`UTBot uses KLEE symbolic execution engine to obtain information about program branches. C/C++ projects usually consist\nof source files and headers, which are compiled and linked into libraries and executable files (while libraries can also\nbe linked to one another or other executables, forming a directed acyclic graph of project linkage). Executables and\nlibraries can be considered as the artifacts of project building. KLEE operates with `}<a parentName=\"p\" {...{\n        \"href\": \"???\"\n      }}>{`LLVM IR`}</a>{` so, to symbolically\nexecute code from a given product, UTBot needs the information about how the project is compiled and linked in order to\nbe able to recompile it into LLVM IR. UTBot is able to get this information from project build system via Bear\ntool `}<a parentName=\"p\" {...{\n        \"href\": \"compile-databasse\"\n      }}>{`more info`}</a>{`. UTBot supports CMake and Makefile build systems.`}</p>\n    <p>{`Then, UTBot analyses given sources using `}<a parentName=\"p\" {...{\n        \"href\": \"https://clang.llvm.org/docs/HowToSetupToolingForLLVM.html\"\n      }}>{`clang-tooling`}</a>{` to\nobtain C/C++ AST of files under test. Note that clang-tooling requires a compilation database to work. Essentially, a\ncompilation database is a structural representation of compile commands used to obtain C/C++ object files from project\nsources, and it is also retrieved from the build system by UTBot. UTBot treats functions as structural units of the\nproject and generates tests for them. In order to achieve this, UTBot creates symbolic wrappers called KLEE files for\nevery project source file, `}<a parentName=\"p\" {...{\n        \"href\": \"preparing-sources-for-klee\"\n      }}>{`more info`}</a>{`, that use symbolic variables concept for symbolic\nexecution. Symbolic variables can be treated as logical constraints for variables, which are transformed into concrete\nvalues as the result of symbolic execution. Symbolic variables are the core of symbolic execution approach to software\nverification, and they are used in many successful tools for software verification and test generation.`}</p>\n    <p>{`Then, UTBot uses information about project compilation and linkage to rebuild the project in LLVM\nbitcode `}<a parentName=\"p\" {...{\n        \"href\": \"linking-bitcode\"\n      }}>{`more info`}</a>{`. This is done to pass the linkage result (.bc file) to KLEE. If a function calls\nother functions from the project, UTBot can provide KLEE with their bitcode as well, or, depending on user preferences,\nuse generated symbolic stubs for them `}<a parentName=\"p\" {...{\n        \"href\": \"stubs\"\n      }}>{`stubs`}</a>{`.`}</p>\n    <p>{`KLEE produces files that represent test cases for a given function, and UTBot parses and transforms them to C++ test\nfiles (For supported C/C++ features, see `}<a parentName=\"p\" {...{\n        \"href\": \"c-syntax\"\n      }}>{`c syntax`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"cpp-syntax\"\n      }}>{`c++ syntax`}</a>{`), which present the test cases\nwith `}<a parentName=\"p\" {...{\n        \"href\": \"https://google.github.io/googletest/\"\n      }}>{`GoogleTest`}</a>{` framework. UTBot also provides its users with a build system for\ngenerated tests, automatically compiling and linking them with project files. Users can run\ntests `}<a parentName=\"p\" {...{\n        \"href\": \"generating-and-running-tests\"\n      }}>{`more info`}</a>{` with a single click and see the results and coverage information in\nVSCode Panel. UTBot uses Makefiles for test runs `}<a parentName=\"p\" {...{\n        \"href\": \"incrementality\"\n      }}>{`more info`}</a>{`, so UTBot tests can be used in continuous\nintegration.`}</p>\n    <p><img alt=\"UTBotCpp pipeline\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/pipelineUtbot.png\" /></p>\n    <p>{`The most important things are described below in sequential order.`}</p>\n    <h2 {...{\n      \"id\": \"tests-generation\"\n    }}>{`Tests Generation`}</h2>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"install-vscode-plugin\"\n        }}>{`Client`}</a>{` sends request (one of `}<a parentName=\"li\" {...{\n          \"href\": \"generating-tests\"\n        }}>{`types`}</a>{`)\nto `}<a parentName=\"li\" {...{\n          \"href\": \"install-server\"\n        }}>{`server`}</a>{`.\nThe `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/testgens\"\n        }}>{`corresponding`}</a>{` object aggregates\nrequests' information.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/blob/main/server/src/fetchers/Fetcher.cpp\"\n        }}>{`Fetcher`}</a>{` fetches types, methods,\nglobal variable usages, array usages, includes for all files in request. It\nuses `}<a parentName=\"li\" {...{\n          \"href\": \"https://clang.llvm.org/docs/LibTooling.html\"\n        }}>{`LibTooling`}</a>{` for parsing source code, traversing types, etc.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/clang-utils/SourceToHeaderRewriter.cpp\"\n        }}>{`SourceToHeaderRewriter`}</a>{`\ngenerates headers (.h files) based on source (.c files).`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/FeaturesFilter.cpp\"\n        }}>{`FeaturesFilter`}</a>{` filters out all\nmethods except the ones listed in `}<a parentName=\"li\" {...{\n          \"href\": \"c-syntax\"\n        }}>{`supported syntax`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/Synchronizer.cpp\"\n        }}>{`Synchronizer`}</a>{`\nsynchronizes `}<a parentName=\"li\" {...{\n          \"href\": \"stubs\"\n        }}>{`stubs`}</a>{` and wrappers for all files\nin `}<a parentName=\"li\" {...{\n          \"href\": \"https://clang.llvm.org/docs/JSONCompilationDatabase.html\"\n        }}>{`compile_commands.json`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/KleeGenerator.cpp\"\n        }}>{`KleeGenerator`}</a>{` generates klee files\nas well as source files, also builds them in `}<a parentName=\"li\" {...{\n          \"href\": \"https://llvm.org/docs/BitCodeFormat.html\"\n        }}>{`bitcode`}</a>{` files.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/building/Linker.cpp\"\n        }}>{`Linker`}</a>{` links bitcode files\ntogether into module.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/building/Linker.cpp\"\n        }}>{`Linker`}</a>{`\nwrites `}<a parentName=\"li\" {...{\n          \"href\": \"makefiles\"\n        }}>{`Makefiles`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/KleeRunner.cpp\"\n        }}>{`KleeRunner`}</a>{`\nruns `}<a parentName=\"li\" {...{\n          \"href\": \"https://klee.github.io/\"\n        }}>{`KLEE`}</a>{` on module consecutively for each method from request.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/KleeGenerator.cpp\"\n        }}>{`KleeGenerator`}</a>{` parses output of\nKLEE and writes files of `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/google/googletest\"\n        }}>{`GoogleTest`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"install-server\"\n        }}>{`Server`}</a>{` sends final response to client and also transfers generated files for remote scenario.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"tests-running\"\n    }}>{`Tests Running`}</h2>\n    <p>{`When user runs the tests, server performs various operations that might depend on the compiler used by the project.`}</p>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"install-vscode-plugin\"\n        }}>{`Client`}</a>{` sends request to `}<a parentName=\"li\" {...{\n          \"href\": \"install-server\"\n        }}>{`server`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/coverage/TestRunner.cpp\"\n        }}>{`TestRunner`}</a>{` chooses coverage\ntool based on the compiler used by the project. It\nis `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/coverage/GcovCoverageTool.cpp\"\n        }}>{`GcovCoverageTool`}</a>{` in\ncase of `}<a parentName=\"li\" {...{\n          \"href\": \"https://gcc.gnu.org/\"\n        }}>{`gcc`}</a>{`\nand `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/coverage/LlvmCoverageTool.cpp\"\n        }}>{`LlvmCoverageTool`}</a>{`\nin case of `}<a parentName=\"li\" {...{\n          \"href\": \"https://clang.llvm.org/\"\n        }}>{`clang`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/coverage/TestRunner.cpp\"\n        }}>{`TestRunner`}</a>{` collects list of\ntuples (file path, suite name, test name) based on the information from the `}<a parentName=\"li\" {...{\n          \"href\": \"install-vscode-plugin\"\n        }}>{`client`}</a>{`.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/coverage/TestRunner.cpp\"\n        }}>{`TestRunner`}</a>{` incrementally\nbuilds tests with instrumented options (coverage and sanitizer). To achieve this `}<a parentName=\"li\" {...{\n          \"href\": \"makefiles\"\n        }}>{`Makefiles`}</a>{` are used.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/coverage/TestRunner.cpp\"\n        }}>{`TestRunner`}</a>{` runs tests by\ncalling `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.gnu.org/software/make/manual/make.html\"\n        }}>{`make`}</a>{` on makefiles that correspond to the given sources.`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/blob/main/server/src/coverage/CoverageAndResultsGenerator.cpp\"\n        }}>{`CoverageAndResultsGenerator`}</a>{`\ncollects coverage information using previously chosen tool.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/coverage/GcovCoverageTool.cpp\"\n            }}>{`GcovCoverageTool`}</a>{`\nruns `}<a parentName=\"li\" {...{\n              \"href\": \"https://gcc.gnu.org/onlinedocs/gcc/Gcov.html\"\n            }}>{`gcov`}</a>{`\non `}<a parentName=\"li\" {...{\n              \"href\": \"https://gcc.gnu.org/onlinedocs/gcc/Gcov-Data-Files.html\"\n            }}>{`.gcno and .gcda`}</a>{` files. It provides a report\nin `}<inlineCode parentName=\"li\">{`.json`}</inlineCode>{` format.`}</li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/coverage/LlvmCoverageTool.cpp\"\n            }}>{`LlvmCoverageTool`}</a>{`\nruns `}<a parentName=\"li\" {...{\n              \"href\": \"https://llvm.org/docs/CommandGuide/llvm-profdata.html\"\n            }}>{`llvm-profdata`}</a>{` to merge several .profraw files into\none. It provides a report in `}<inlineCode parentName=\"li\">{`.json`}</inlineCode>{` format using `}<a parentName=\"li\" {...{\n              \"href\": \"https://llvm.org/docs/CommandGuide/llvm-cov.html\"\n            }}>{`llvm-cov`}</a>{`.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`Both `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/coverage/GcovCoverageTool.cpp\"\n        }}>{`GcovCoverageTool`}</a>{`\nand `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/server/src/coverage/LlvmCoverageTool.cpp\"\n        }}>{`LlvmCoverageTool`}</a>{`\nread generated `}<inlineCode parentName=\"li\">{`.json`}</inlineCode>{` file and determine set of covered lines.`}</li>\n      <li parentName=\"ol\">{`Finally, `}<a parentName=\"li\" {...{\n          \"href\": \"install-server\"\n        }}>{`Server`}</a>{` sends response to the client.`}</li>\n    </ol>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}