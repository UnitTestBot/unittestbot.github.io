"use strict";(self.webpackChunkunittestbot_web=self.webpackChunkunittestbot_web||[]).push([[2056],{81109:function(t,n,e){e.r(n),e.d(n,{_frontmatter:function(){return u},default:function(){return _}});var s=e(87462),r=e(63366),i=(e(15007),e(64983)),c=e(23017),d=(e(8156),["components"]),u={};void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!Object.prototype.hasOwnProperty.call(u,"__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/advanced/symbolic-stdin.md"}});var a={_frontmatter:u},o=c.Z;function _(t){var n=t.components,e=(0,r.Z)(t,d);return(0,i.kt)(o,(0,s.Z)({},a,e,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"symbolic-stdin"},"Symbolic stdin"),(0,i.kt)("p",null,"UTBot is able to generate tests for C code that reads values from ",(0,i.kt)("strong",{parentName:"p"},"stdin"),", ",(0,i.kt)("strong",{parentName:"p"},"file descriptor")," or ",(0,i.kt)("strong",{parentName:"p"},"STDIN_FILENO"),".\nUTBot marks read values as symbolic, generates tests, puts the needed data into a C-string buffer and redirects ",(0,i.kt)("strong",{parentName:"p"},"\nstdin")," to the buffer so tests can be executed properly."),(0,i.kt)("p",null,"Here is an example of a function that reads values from stdin:"),(0,i.kt)("h6",{id:"source-code-example"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/UnitTestBot/UTBotCpp/blob/main/integration-tests/c-example/lib/symbolic_stdin.c"},"Source code example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"int check_password(int fd) {\n  char buf[5];\n  if (read(fd, buf, 5) != -1) {\n    if (buf[0] == 'h' && buf[1] == 'e' &&\n    buf[2] == 'l' && buf[3] == 'l' &&\n    buf[4] == 'o')\n      return 1;\n  }\n  return 0;\n}\n")),(0,i.kt)("h6",{id:"redirecting-stdin"},"Redirecting stdin"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void utbot_redirect_stdin(const char* buf, int &res) {\n    int fds[2];\n    if (pipe(fds) == -1) {\n        res = -1;\n        return;\n    }\n    close(STDIN_FILENO);\n    dup2(fds[0], STDIN_FILENO);\n    write(fds[1], buf, 64);\n    close(fds[1]);\n}\n")),(0,i.kt)("h6",{id:"tests-code-example"},"Tests code example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'TEST(regression, check_password_test_1)\n{\n    // Redirect stdin\n    char stdin_buf[] = "hello";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << "Unable to redirect stdin.";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_2)\n{\n    // Construct input\n    int fd = 1;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_3)\n{\n    // Construct input\n    int fd = 3;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_4)\n{\n    // Redirect stdin\n    char stdin_buf[] = "\\x97""\\x97""\\x97""\\x97""\\x97""";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << "Unable to redirect stdin.";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_5)\n{\n    // Redirect stdin\n    char stdin_buf[] = "he\\0""hh";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << "Unable to redirect stdin.";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_6)\n{\n    // Redirect stdin\n    char stdin_buf[] = "hell\\0""";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << "Unable to redirect stdin.";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_7)\n{\n    // Construct input\n    int fd = 1024;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_8)\n{\n    // Redirect stdin\n    char stdin_buf[] = "h\\0""hhh";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << "Unable to redirect stdin.";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_9)\n{\n    // Construct input\n    int fd = -1;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_10)\n{\n    // Redirect stdin\n    char stdin_buf[] = "hel\\0""h";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() << "Unable to redirect stdin.";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n')))}_&&_===Object(_)&&Object.isExtensible(_)&&!Object.prototype.hasOwnProperty.call(_,"__filemeta")&&Object.defineProperty(_,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/advanced/symbolic-stdin.md"}}),_.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-advanced-symbolic-stdin-md-22bc0df7cdbdd9f55d3b.js.map