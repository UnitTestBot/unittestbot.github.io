{"componentChunkName":"component---src-templates-docs-page-jsx","path":"/docs/cpp/usage/generating","result":{"data":{"markdownRemark":{"html":"<h1>Generating Tests</h1>\n<p>In this section we describe various tests generation scenarios that UTBot supports.</p>\n<h2>Generating Tests for Project</h2>\n<p>You can generate tests for the entire project.</p>\n<p><strong>How-to steps</strong>:</p>\n<ol>\n<li>Right mouse click on VS Code Explorer;</li>\n<li>Select <code>UTBot: Generate Tests for Project</code>.</li>\n</ol>\n<p><img src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/gifs/project.gif\" alt=\"projectGif\"></p>\n<blockquote>\n<p>üìù<strong>Note</strong></p>\n<p>It can take some time to analyze a big project. If you see a pop-up message at the right bottom corner of the IDE window, it means analysis is still in progress.\nOnce code analysis is completed, a test folder will be created.</p>\n</blockquote>\n<h2>Generating Tests for Folder</h2>\n<p>You can generate tests for the folder.</p>\n<p><strong>How-to steps</strong>:</p>\n<ol>\n<li>Right mouse click on VS Code Explorer;</li>\n<li>Select <code>UTBot: Generate Tests for Folder</code>;</li>\n<li>Specify the path to the folder you want to generate tests for.</li>\n</ol>\n<p><img src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/gifs/folder.gif\" alt=\"folderGif\"></p>\n<h2>Generating Tests for File</h2>\n<p>You can generate tests for a <code>'*.c'</code> file.</p>\n<blockquote>\n<p>üìù<strong>Note</strong></p>\n<p>It's worth to note only public functions (declared in a corresponding header file) are considered as targets for tests.</p>\n</blockquote>\n<p><strong>How-to steps</strong>:</p>\n<ol>\n<li>Right mouse click to a target source file;</li>\n<li>Select <code>UTBot: Generate Tests... for Current File</code>.</li>\n</ol>\n<p><img src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/gifs/file.gif\" alt=\"file.Gif\"></p>\n<p>Once code analysis is completed, a test folder with test named according convention <code>test_%filename%.cpp</code> will be\ncreated. Now you can sync local and remote environments, recompile the project and run tests.</p>\n<h2>Generating Tests for Function</h2>\n<p>Generate tests for a particular function is also possible.</p>\n<p><strong>How-to steps</strong>:</p>\n<ol>\n<li>Move the caret inside function body;</li>\n<li>Right mouse click to a text editor;</li>\n<li>Select <code>UTBot: Generate Tests... > for Current Function</code>.</li>\n</ol>\n<p><img src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/gifs/function.gif\" alt=\"functionGif\"></p>\n<p>Once code analysis is completed, a test folder with test named according convention <code>test_%filename%.cpp</code> will be\ncreated. Now you can sync local and remote environments, recompile the project and run tests.</p>\n<h2>Generating Tests for Line</h2>\n<p>It's even possible to cover a particular branch instead of entire function.</p>\n<p><strong>How-to steps</strong>:</p>\n<ol>\n<li>Move the caret to a line you're going to cover by a test;</li>\n<li>Right mouse click to a text editor;</li>\n<li>Select <code>UTBot: Generate Tests... > for Current Line</code>.</li>\n</ol>\n<p><img src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/gifs/line.gif\" alt=\"lineGif\"></p>\n<p>Once code analysis is completed, a test folder with a test file named according convention <code>test_%filename%.cpp</code> will be\ncreated. Now you can sync local and remote environments, recompile the project and the run test.</p>\n<h2>Generating Tests with Prompted Result</h2>\n<p>If you need to find parameters for which a function returns a specific output, you may find this UTBot feature extremely\nuseful.</p>\n<blockquote>\n<p>üìù<strong>Note</strong></p>\n<p>In general, UTBot <strong>is not able to solve NP-hard problems</strong>, that's why it is meaningless to use this feature on, for example, hash functions.</p>\n</blockquote>\n<p><strong>How-to steps</strong>:</p>\n<ol>\n<li>Move the caret inside a function body;</li>\n<li>Right mouse click to a text editor;</li>\n<li>Select <code>UTBot: Generate Tests... > with a Prompted Result</code>.</li>\n</ol>\n<p><img src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/gifs/result.gif\" alt=\"resultGif\"></p>\n<p>Set up a condition (as an inequation or as an equation) the target output satisfies:\nan operator (in C syntax), a value (constants supported only).</p>\n<h2>Generating Tests that Fail Assertion</h2>\n<p>If some code blocks in your project are guarded by asserts (means, classic C-language asserts provided by \"assert.h\")\nyou probably want to know which parameters break them. With UnitTestBot you can generate tests to find such parameters.</p>\n<p><strong>How-to steps</strong>:</p>\n<ol>\n<li>Move the caret to a line with <code>assert(...)</code> statement you're going to break;</li>\n<li>Right mouse click to a text editor;</li>\n<li>Select <code>UTBot: Generate Tests... > that Fail an Assertion</code>.</li>\n</ol>\n<p><img src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/gifs/assert.gif\" alt=\"assertGif\"></p>\n<p>Once code analysis is completed, a test folder with a test file named according convention <code>test_%filename%.cpp</code> will be\ncreated.</p>\n<blockquote>\n<p>‚ö†Ô∏è<strong>Be advised</strong></p>\n<p>It's not recommended to include assert-failures tests to a common test suite with regular checks as a failure triggers the engine to terminate tests execution.</p>\n</blockquote>","frontmatter":{"path":"/docs/cpp/usage/generating"}}},"pageContext":{}},"staticQueryHashes":["1550867996","2819311301","63159454"]}