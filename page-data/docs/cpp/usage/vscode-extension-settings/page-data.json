{"componentChunkName":"component---src-templates-docs-page-jsx","path":"/docs/cpp/usage/vscode-extension-settings","result":{"data":{"markdownRemark":{"html":"<h1>VS Code Extension Settings</h1>\n<p>UnitTestBot extension for VSCode provides flexibility in its configuration. Extension settings might be accessed as\nfollows: <code>File > Preferences > Settings  (or Ctrl + ,)</code>, then navigate to <code>Extensions > UnitTestBot</code>.</p>\n<p>In case you are looking for some specific setting(s), search bar might be used.</p>\n<p><img src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/gifs/settings.gif\" alt=\"settingsGif\"></p>\n<p>For convenience, all the settings are divided into the following groups:</p>\n<ul>\n<li>Deployment</li>\n<li>Paths</li>\n<li>Generation</li>\n<li>Stubs</li>\n<li>Visual</li>\n<li>Advanced</li>\n</ul>\n<h2>Deployment</h2>\n<h4>UTBot Host</h4>\n<p><strong>Expected value format</strong>: <code>string, that represents host address</code>;</p>\n<p><strong>Default value</strong>: <code>127.0.0.1</code>;</p>\n<p><strong>JSON identifier</strong>: <code>unittestbot.deployment.utbotHost</code>.</p>\n<h4>UTBot Port</h4>\n<p>Address of the host UTBot Server is running on. Learn more about UTBot Server installation.</p>\n<p><strong>Expected value format</strong>: <code>number, that represents a port</code>;</p>\n<p><strong>Default value</strong>: <code>2121</code>;</p>\n<p><strong>JSON identifier</strong>: <code>unittestbot.deployment.utbotPort</code>.</p>\n<p>The port used by the client to connect to UTBot Server via a gRPC channel. This field should be filled accordingly to\nthe UTBot Server Port parameter specified during the UTBot Server installation.</p>\n<h4>Remote Path</h4>\n<p><strong>Expected value format</strong>: <code>UNIX path</code>;</p>\n<p><strong>Default value</strong>: <code>&#x3C;empty string></code>;</p>\n<p><strong>JSON identifier</strong>: <code>unittestbot.deployment.remotePath</code>.</p>\n<p>Remote path configuration specifies the path to the project on a remote host.</p>\n<p>When VSCode Remote Scenario is used, Remote Path matches the workspace path and it can be automatically determined by\nUnitTestBot extension. In case you work via SFTP scenario (or any equivalent) Remote Path should be set manually and\ncorrespond to the location of the project on a remote host.</p>\n<h2>Paths</h2>\n<h4>Build Directory</h4>\n<p><strong>Expected value format</strong>: <code>UNIX path</code>;</p>\n<p><strong>Default value</strong>: <code>build</code>;</p>\n<p><strong>JSON identifier</strong>: <code>unittestbot.paths.buildDirectory</code>.</p>\n<p>Relative path to the build directory. File <code>compile_commands.json</code> (as well as link_commands.json) should be located in\nthe build folder.</p>\n<h4>CMake options</h4>\n<p><strong>Expected value format</strong>: <code>string, that represents valid CMake flags</code>;</p>\n<p><strong>Default value</strong>: <code>-DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_EXPORT_LINK_COMMANDS=ON</code>;</p>\n<p><strong>JSON identifier</strong>: <code>unittestbot.paths.cmakeOptions.description</code>.</p>\n<p>Options passed to CMake command when auto build your project first time you open it.</p>\n<h4>Source Directories</h4>\n<p><strong>Expected value format</strong>: <code>UNIX paths, separated by commas</code>;</p>\n<p><strong>Default value</strong>: <code>&#x3C;empty></code>;</p>\n<p><strong>JSON identifier</strong>: <code>unittestbot.paths.sourceDirectories</code>.</p>\n<p>Relative paths to the directories, that are marked as source directories. UTBot looks for source file in specified\ndirectories.</p>\n<blockquote>\n<p>üìù<strong>Note</strong></p>\n<p>Please, prefer using UTBot Explorer View instead of raw settings. UTBot Explorer View makes it possible to mark/unmark directories as \"source directories\".</p>\n</blockquote>\n<h4>Tests Directory</h4>\n<p><strong>Expected value format</strong>: <code>UNIX path</code>;</p>\n<p><strong>Default value</strong>: <code>tests</code>;</p>\n<p><strong>JSON identifier</strong>: <code>unittestbot.paths.testsDirectory</code>.</p>\n<p>Relative path to the directory where generated tests will be placed.</p>\n<h2>Tests Generation</h2>\n<h4>Generate for Static Functions</h4>\n<p><strong>Expected value format</strong>: <code>boolean (checkbox)</code>;</p>\n<p><strong>Default value</strong>: <code>True</code>;</p>\n<p><strong>JSON identifier</strong>: <code>unittestbot.testsGeneration.generateForStaticFunctions</code>.</p>\n<p>When set to <code>True</code>, UnitTestBot generates tests for C static functions, otherwise such functions won't be proceeded.</p>\n<blockquote>\n<p>üìù<strong>Note</strong></p>\n<p>In C, a static function is not visible outside of its translation unit, which is the object file it is compiled into. In other words, making a function static limits its scope. Due to this, you can think of a static function as of  \"private\" function in other programming languages. It's commonly believed, that such functions shouldn't be tested, as they are not visible outside and can't be called elsewhere. However, as some projects (e.g. GNU Coreutils) tend to implement the main functionality inside static functions, UnitTestBot gives an opportunity to test them as well.</p>\n</blockquote>\n<h2>Verbose formatting</h2>\n<p><strong>Expected value format</strong>: <code>boolean (checkbox)</code>;</p>\n<p><strong>Default value</strong>:  <code>False</code>;</p>\n<p><strong>JSON identifier</strong>: <code>unittestbot.testsGeneration.verboseFormatting</code>.</p>\n<p>When set to <code>True</code> UnitTestBot generates tests in accordance verbose formatting,\notherwise the tests are generated in a simpler form and take less space (lines of code).</p>\n<h2>Stubs</h2>\n<h4>Implicitly Generate Stubs</h4>\n<p><strong>Expected value format</strong>: <code>boolean (checkbox)</code>;</p>\n<p><strong>Default value</strong>:  <code>False</code>;</p>\n<p><strong>JSON identifier</strong>: <code>unittestbot.stubs.implicitlyGenerateStubs</code>.</p>\n<p>When set to <code>True</code>, UTBot will generate stubs for the functions from external modules automatically.</p>\n<p>The function is a part of external module with respect to function (or file) the tests are generated for if it's a part\nof different linking unit. UTBot detects linking units via link_commands.json.</p>\n<h4>Use Stubs</h4>\n<p><strong>Expected value format</strong>: <code>boolean (checkbox)</code>;</p>\n<p><strong>Default value</strong>: <code>False</code>;</p>\n<p><strong>JSON identifier</strong>: <code>unittestbot.stubs.useStubs</code>.</p>\n<p>When set to <code>True</code>, UTBot will use generated stubs from <code>&#x3C;testsDir>/stubs</code> folder instead of real files.</p>\n<h2>Visual</h2>\n<h4>Show Test Results</h4>\n<p><strong>Expected value format</strong>: <code>boolean (checkbox)</code>;</p>\n<p><strong>Default value</strong>: <code>True</code>;</p>\n<p><strong>JSON identifier</strong>: <code>unittestbot.visual.showTestResults</code>.</p>\n<p>When set to <code>True</code>, the results of the run tests are displayed on the left side of the test headers.</p>\n<blockquote>\n<p>‚úîÔ∏è <strong>Recommendation</strong></p>\n<p>It's recommended to set given preference to <code>False</code> in case you use a separate test runner extension for Visual Studio Code.</p>\n</blockquote>\n<h2>Advanced</h2>\n<h4>Enable Developer Mode</h4>\n<p><strong>Expected value format</strong>: <code>boolean (checkbox)</code>;</p>\n<p><strong>Default value</strong>:  <code>False</code>;</p>\n<p><strong>JSON identifier</strong>: <code>unittestbot.advanced.enableDeveloperMode</code>.</p>\n<p>Enables hidden developer commands useful for debug.</p>\n<h4>Use Deterministic Searcher</h4>\n<p><strong>Expected value format</strong>: <code>boolean (checkbox)</code>;</p>\n<p><strong>Default value</strong>:  <code>False</code>;</p>\n<p><strong>JSON identifier</strong>: <code>unittestbot.advanced.useDeterministicSearcher</code>.</p>\n<p>Use deterministic searcher to traverse bitcode in the same way every time. It may significantly slow down tests\ngeneration.</p>\n<h4>Timeout Per Function</h4>\n<p><strong>Expected value format</strong>: <code>number, that represents seconds</code>;</p>\n<p><strong>Default value</strong>: <code>30</code>;</p>\n<p><strong>JSON identifier</strong>: <code>unittestbot.advanced.timeoutPerFunction</code>.</p>\n<p>Maximum time (in seconds) is allowed for generation tests per function. Set to <code>0</code> to disable it.</p>\n<h4>Timeout Per Test</h4>\n<p><strong>Expected value format</strong>: <code>number, that represents seconds</code>;</p>\n<p><strong>Default value</strong>: <code>0</code>;</p>\n<p><strong>JSON identifier</strong>: <code>unittestbot.advanced.timeoutPerTest</code>.</p>\n<p>Maximum time (in seconds) allowed for a single test being run. After that, the test is automatically cancelled. The\noption can be used if some of the generated tests force the user code to hang; in such a\ncase, <a href=\"run-generated-tests\">Run All Tests and Show Coverage</a> option will also hang. However, if the timeout for test is\nspecified, hanging tests will be cancelled silently and the coverage will be shown. Set to <code>0</code> to disable it.</p>","frontmatter":{"path":"/docs/cpp/usage/vscode-extension-settings"}}},"pageContext":{}},"staticQueryHashes":["1550867996","2819311301","63159454"]}