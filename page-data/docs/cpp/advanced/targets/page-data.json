{"componentChunkName":"component---src-templates-docs-page-jsx","path":"/docs/cpp/advanced/targets","result":{"data":{"markdownRemark":{"html":"<h1>Targets</h1>\n<p>The <strong>target</strong> is either an executable or root library, which is not <em>related</em> to any executable. Depending on the\nstructure of the project, the same file may be related to different targets and be linked with different function\nimplementations. For instance, stubs may or may not be used to link with tests (see <a href=\"stubs\">stubs</a>). For ease of\nunderstanding, UnitTestBot chooses target with stubs in one case and without them in another one, while the code of\ntests remains the same.</p>\n<h2>Start</h2>\n<p>Let us consider <code>coreutils</code> project. When you open the project and go to UTBot Explorer, UTBot Targets view appears at\nthe top. By default, the target with the largest number of files within is chosen. It is <code>bench-sha224</code> in that case.\nYou may change that to your preferred target. For example, pick <code>cat</code> if you primarily develop <code>cat</code> tool.</p>\n<p><img src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/targetsExplorerView.png\" alt=\"targetsExplorerViewImg\"></p>\n<p>It is all right to have many targets in project. However, the default choice may not fit you. Anyway, you may always\njust run test generation and rely on UnitTestBot's hints.</p>\n<h2>File is presented in compile/link commands for chosen target, but not included in target's artifact...</h2>\n<p>Let's see what happens when you run test generation for function <code>parse_datetime</code> in <code>lib\\parse-datetime.c</code> file with\ndefault target.</p>\n<p><img src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/targetsFileNotPresentedInArtifact.png\" alt=\"targetsFileNotPresentedInArtifactImg\"></p>\n<p>It happens very rarely, but it does happen for a reason. Even though current file is presented in compile/link commands\nfor chosen target, it is not included in target's artifact. More specifically, the library <code>libcoreutils.a</code> with\nfunction <code>parse_datetime</code> is thrown out by linker. So, it doesn't make sense to test particular function as part of\ntarget <code>bench-sha224</code>.</p>\n<p>Let us see what happens next if you click <code>Choose target</code> and choose <code>date</code> target instead. Great! Tests were generated\nsuccessfully.</p>\n<p><img src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/targetsTestsForDateGenerated.png\" alt=\"targetsTestsForDateGeneratedImg\"></p>\n<h2>File is not presented in compile/link commands for chosen target...</h2>\n<p>Let's see what happens when you run test generation for function <code>usage</code> in <code>src\\cat.c</code> file with default target.</p>\n<p><img src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/targetsFileNotPresentedInCommands.png\" alt=\"targetsFileNotPresentedInCommandsImg\"></p>\n<p>It happens more often, but it also does happen for a reason. Function could not be a part of target <code>bench-sha224</code> in\nany case, because it is not used by compile and link commands for chosen target.</p>\n<p>Let us see what happens next if you click <code>Choose target</code> and choose <code>cat</code> target instead. Great! Tests were generated\nsuccessfully.</p>\n<p><img src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/targetsTestsForCatGenerated.png\" alt=\"targetsTestsForCatGeneratedImg\"></p>","frontmatter":{"path":"/docs/cpp/advanced/targets"}}},"pageContext":{}},"staticQueryHashes":["1550867996","2819311301","63159454"]}