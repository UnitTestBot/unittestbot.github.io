{"componentChunkName":"component---src-templates-docs-page-jsx","path":"/docs/cpp/advanced/symbolic-stdin","result":{"data":{"markdownRemark":{"html":"<h1>Symbolic stdin</h1>\n<p>UTBot is able to generate tests for C code that reads values from <strong>stdin</strong>, <strong>file descriptor</strong> or <strong>STDIN_FILENO</strong>.\nUTBot marks read values as symbolic, generates tests, puts the needed data into a C-string buffer and redirects **\nstdin** to the buffer so tests can be executed properly.</p>\n<p>Here is an example of a function that reads values from stdin:</p>\n<h6><a href=\"https://github.com/UnitTestBot/UTBotCpp/blob/main/integration-tests/c-example/lib/symbolic_stdin.c\">Source code example</a></h6>\n<pre><code class=\"language-cpp\">int check_password(int fd) {\n  char buf[5];\n  if (read(fd, buf, 5) != -1) {\n    if (buf[0] == 'h' &#x26;&#x26; buf[1] == 'e' &#x26;&#x26;\n\tbuf[2] == 'l' &#x26;&#x26; buf[3] == 'l' &#x26;&#x26;\n\tbuf[4] == 'o')\n      return 1;\n  }\n  return 0;\n}\n</code></pre>\n<h6>Redirecting stdin</h6>\n<pre><code class=\"language-cpp\">void utbot_redirect_stdin(const char* buf, int &#x26;res) {\n    int fds[2];\n    if (pipe(fds) == -1) {\n        res = -1;\n        return;\n    }\n    close(STDIN_FILENO);\n    dup2(fds[0], STDIN_FILENO);\n    write(fds[1], buf, 64);\n    close(fds[1]);\n}\n</code></pre>\n<h6>Tests code example</h6>\n<pre><code class=\"language-cpp\">TEST(regression, check_password_test_1)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"hello\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() &#x3C;&#x3C; \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 1;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_2)\n{\n    // Construct input\n    int fd = 1;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_3)\n{\n    // Construct input\n    int fd = 3;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_4)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"\\x97\"\"\\x97\"\"\\x97\"\"\\x97\"\"\\x97\"\"\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() &#x3C;&#x3C; \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_5)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"he\\0\"\"hh\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() &#x3C;&#x3C; \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_6)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"hell\\0\"\"\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() &#x3C;&#x3C; \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_7)\n{\n    // Construct input\n    int fd = 1024;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_8)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"h\\0\"\"hhh\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() &#x3C;&#x3C; \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_9)\n{\n    // Construct input\n    int fd = -1;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, check_password_test_10)\n{\n    // Redirect stdin\n    char stdin_buf[] = \"hel\\0\"\"h\";\n    int utbot_redirect_stdin_status = 0;\n    utbot_redirect_stdin(stdin_buf, utbot_redirect_stdin_status);\n    if (utbot_redirect_stdin_status != 0) {\n        FAIL() &#x3C;&#x3C; \"Unable to redirect stdin.\";\n    }\n    // Construct input\n    int fd = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = check_password(fd);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n</code></pre>","frontmatter":{"path":"/docs/cpp/advanced/symbolic-stdin"}}},"pageContext":{}},"staticQueryHashes":["1550867996","2819311301","63159454"]}