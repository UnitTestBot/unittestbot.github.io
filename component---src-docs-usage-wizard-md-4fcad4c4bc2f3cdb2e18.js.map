{"version":3,"file":"component---src-docs-usage-wizard-md-4fcad4c4bc2f3cdb2e18.js","mappings":"4RAQaA,EAAe,Q,gOAC5B,IAAMC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,cACE,GAAM,gCADR,iCAGA,oQAEA,cACE,GAAM,sBADR,uBAGA,cACE,GAAM,uBADR,wBAGA,iKACiB,sBAAYC,WAAW,KAAvB,WADjB,oFAEA,kBAAG,eAAKC,IAAI,wBAAwBC,IAAI,8GACxC,2BACE,aAAGF,WAAW,cAAd,MAAiC,kBAAQA,WAAW,KAAnB,UACjC,aAAGA,WAAW,cAAd,0IAEF,cACE,GAAM,cADR,eAGA,8FACA,2BACE,aAAGA,WAAW,cAAd,MAAiC,kBAAQA,WAAW,KAAnB,UACjC,aAAGA,WAAW,cAAd,+KAGF,kBAAG,eAAKC,IAAI,sBAAsBC,IAAI,4GACtC,2BACE,aAAGF,WAAW,cAAd,MAAiC,kBAAQA,WAAW,KAAnB,UACjC,aAAGA,WAAW,cAAd,iFAEF,cACE,GAAM,eADR,gBAGA,gSAGA,2BACE,aAAGA,WAAW,cAAd,MAAiC,kBAAQA,WAAW,KAAnB,UACjC,aAAGA,WAAW,cAAd,8SAGF,kBAAG,eAAKC,IAAI,sBAAsBC,IAAI,4GACtC,cACE,GAAM,qCADR,sCAGA,kIACA,kBAAG,eAAKD,IAAI,sBAAsBC,IAAI,4GACtC,cACE,GAAM,gCADR,iCAGA,kBAAG,eAAKD,IAAI,YAAYC,IAAI,gG,uNAKhCN,EAAWO,gBAAiB","sources":["webpack://unittestbot-web/./src/docs/usage/wizard.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/unittestbot.github.io/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"quickstart-with-utbot-wizard\"\n    }}>{`Quickstart with UTBot Wizard`}</h1>\n    <p>{`When you first time open your C project in Visual Studio Code with UnitTestBot extension installed, UTBot Wizard will be\nopened. UTbot Quickstart Wizard will help you to initialize the extension settings specifically for current project.`}</p>\n    <h2 {...{\n      \"id\": \"utbot-wizard-steps\"\n    }}>{`UTBot Wizard Steps`}</h2>\n    <h3 {...{\n      \"id\": \"server-installation\"\n    }}>{`Server installation`}</h3>\n    <p>{`Firstly, if you are using Linux, UTBot Wizard will offer you to install UnitTestBot Server. In case you haven't done it\nyet, you may click `}<inlineCode parentName=\"p\">{`Install`}</inlineCode>{` button. UTBot will run the installation script in Visual Studio Code Terminal.`}</p>\n    <p><img alt=\"wizardInstallationImg\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/wizardInstallation.png\" /></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`üìù`}<strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`It only makes sense to install UnitTestBot Server if Visual Studio Code is opened on the machine that you are using as a remote one.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"connection\"\n    }}>{`Connection`}</h3>\n    <p>{`Then, you will be asked to enter UTBot server host address and its port.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`üìù`}<strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`In case server is unreachable, UTBot will warn you about it.\nHowever, even if you fail to connect, you may skip this step and set up correct server host and port later.`}</p>\n    </blockquote>\n    <p><img alt=\"wizardConnectionImg\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/wizardConnection.png\" /></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`üìù`}<strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`You won't be able to generate tests without connection to the UTBot Server.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"remote-path\"\n    }}>{`Remote Path`}</h3>\n    <p>{`On the next step UTBot Wizard will ask you to specify the path to the project on a remote host. If you are on Linux\nmachine, UTBot assumes that you use this machine also as remote and fills in the remote path with current project path\nopened in Visual Studio Code.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`üìù`}<strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`When VSCode Remote Scenario is used, Remote Path matches the workspace path, and it can be automatically determined by UnitTestBot extension.\nIn case you work via SFTP scenario (or any equivalent) Remote Path should be set manually and correspond to the location of the project on a remote host.`}</p>\n    </blockquote>\n    <p><img alt=\"wizardRemotePathImg\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/wizardRemotePath.png\" /></p>\n    <h3 {...{\n      \"id\": \"build-directory-and-cmake-options\"\n    }}>{`Build Directory and CMake Options`}</h3>\n    <p>{`In the end, UTBot will ask you to specify relative path to the build directory and set custom CMake options.`}</p>\n    <p><img alt=\"wizardBuildCmakeImg\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/wizardBuildCmake.png\" /></p>\n    <h2 {...{\n      \"id\": \"utbot-quickstart-wizard-demo\"\n    }}>{`UTBot Quickstart Wizard Demo`}</h2>\n    <p><img alt=\"wizardGif\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/gifs/wizard.gif\" /></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","isMDXComponent"],"sourceRoot":""}