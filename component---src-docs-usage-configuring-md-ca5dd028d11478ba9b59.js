"use strict";(self.webpackChunkunittestbot_web=self.webpackChunkunittestbot_web||[]).push([[2933],{78566:function(e,t,o){o.r(t),o.d(t,{_frontmatter:function(){return c},default:function(){return p}});var n=o(87462),i=o(63366),r=(o(15007),o(64983)),a=o(23017),l=(o(8156),["components"]),c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!Object.prototype.hasOwnProperty.call(c,"__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/usage/configuring.md"}});var s={_frontmatter:c},u=a.Z;function p(e){var t=e.components,o=(0,i.Z)(e,l);return(0,r.kt)(u,(0,n.Z)({},s,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"configuring-project"},"Configuring Project"),(0,r.kt)("p",null,"When you initialize your C project with UTBot Wizard, extension will suggest you to configure project. Also, you may\nconfigure project afterwards using command ",(0,r.kt)("inlineCode",{parentName:"p"},"UTBot: Configure project")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"UTBot: Reset cache and configure project")," in\npallet."),(0,r.kt)("h2",{id:"project-configuration-steps"},"Project Configuration Steps"),(0,r.kt)("h3",{id:"check-build-folder-for-exist"},"Check Build Folder for exist"),(0,r.kt)("p",null,"Firstly, if build folder is missing, extension will offer you to create that. In case you haven't done it yet, you may\nclick ",(0,r.kt)("inlineCode",{parentName:"p"},"Create build folder")," button. UTBot will create that on host machine (as well as ",(0,r.kt)("inlineCode",{parentName:"p"},"bear.sh")," script within)."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"configureCheckBuildFolderImg",src:"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/configureCheckBuildFolder.png"})),(0,r.kt)("h3",{id:"export-project-model"},"Export Project Model"),(0,r.kt)("p",null,"Then, you will be asked to configure project. In case you haven't done it yet, you may click 'Configure' button. UTBot\nwill call ",(0,r.kt)("inlineCode",{parentName:"p"},"cmake")," command for CMake project. It also will pass root directory and CMake options specified in wizard.\nNext, regardless of project's type UTBot will try to call ",(0,r.kt)("inlineCode",{parentName:"p"},"./bear.sh make")," from build directory. If everything is\nsuccessful, two files will be created in build directory ",(0,r.kt)("inlineCode",{parentName:"p"},"compile_commands.json")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"link_commands.json"),". Or,\nalternatively, you may run ",(0,r.kt)("inlineCode",{parentName:"p"},"./bear.sh")," from create build directory with your build command as argument. For\nexample, ",(0,r.kt)("inlineCode",{parentName:"p"},"./bear.sh make -j8"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"configureExportProjectModelImg",src:"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/configureExportProjectModel.png"})),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"üìù",(0,r.kt)("strong",{parentName:"p"},"Note")),(0,r.kt)("p",{parentName:"blockquote"},"Script ",(0,r.kt)("inlineCode",{parentName:"p"},"bear.sh")," is just a wrapper around ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/UnitTestBot/Bear"},"Bear")," tool.")))}p&&p===Object(p)&&Object.isExtensible(p)&&!Object.prototype.hasOwnProperty.call(p,"__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/usage/configuring.md"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-usage-configuring-md-ca5dd028d11478ba9b59.js.map