"use strict";(self.webpackChunkunittestbot_web=self.webpackChunkunittestbot_web||[]).push([[933],{78566:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return u},default:function(){return d}});var o=n(87462),i=n(63366),r=(n(15007),n(64983)),a=n(23017),l=n(80938),c=n(40103),s=(n(92586),["components"]),u={};void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/usage/configuring.md"}});var p={_frontmatter:u},m=a.Z;function d(e){var t=e.components,n=(0,i.Z)(e,s);return(0,r.kt)(m,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"configuring-project"},"Configuring Project"),(0,r.kt)("p",null,"When you initialize your C project with UTBot Wizard, extension will suggest you to configure project.\nAlso, you may configure project afterwards using command 'UTBot: Configure project' in pallet."),(0,r.kt)("h2",{id:"project-configuration-steps"},"Project Configuration Steps"),(0,r.kt)("h3",{id:"check-build-folder-for-exist"},"Check Build Folder for exist"),(0,r.kt)("p",null,"Firstly, if build folder is missing, extension will offer you to create that.\nIn case you haven't done it yet, you may click ",(0,r.kt)("inlineCode",{parentName:"p"},"Create build folder")," button.\nUTBot will create that on host machine (as well as ",(0,r.kt)("inlineCode",{parentName:"p"},"bear.sh")," script within)."),(0,r.kt)("img",{src:l.Z,className:"demoImg"}),(0,r.kt)("h3",{id:"export-project-model"},"Export Project Model"),(0,r.kt)("p",null,"Then, you will be asked to configure project.\nIn case you haven't done it yet, you may click 'Configure' button.\nUTBot will call ",(0,r.kt)("inlineCode",{parentName:"p"},"cmake")," command for CMake project. It also will pass root directory and CMake options specified in wizard.\nNext, regardless of project's type UTBot will try to call ",(0,r.kt)("inlineCode",{parentName:"p"},"./bear.sh make")," from build directory.\nIf everything is successful, two files will be created in build directory ",(0,r.kt)("inlineCode",{parentName:"p"},"compile_commands.json")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"link_commands.json"),".\nOr, alternatively, you may run ",(0,r.kt)("inlineCode",{parentName:"p"},"./bear.sh")," from create build directory with your build command as argument. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"./bear.sh make -j8"),"."),(0,r.kt)("img",{src:c.Z,className:"demoImg"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"üìù",(0,r.kt)("strong",{parentName:"p"},"Note")),(0,r.kt)("p",{parentName:"blockquote"},"Script ",(0,r.kt)("inlineCode",{parentName:"p"},"bear.sh")," is just a wrapper around ",(0,r.kt)("a",{parentName:"p",href:"https://rnd-gitlab-msc.huawei.com/unittestbot/UnitTestBot/-/tree/master/UTBotCpp/bear"},(0,r.kt)("inlineCode",{parentName:"a"},"bear"))," tool.")))}d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/usage/configuring.md"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-usage-configuring-md-a4733740baded6f28771.js.map