{"version":3,"file":"component---src-docs-usage-format-tests-md-de941427798df4082ce8.js","mappings":"oTAUaA,EAAe,Q,gNAC5B,IAAMC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAI5E,cACE,GAAM,oBADR,qBAGA,qFACA,mBACE,cAAIC,WAAW,OAAK,kBAAQA,WAAW,MAAnB,cAApB,kHACA,cAAIA,WAAW,OAAK,kBAAQA,WAAW,MAAnB,gBAApB,qOAEF,2BACE,aAAGA,WAAW,cAAd,OAAkC,kBAAQA,WAAW,KAAnB,eAClC,aAAGA,WAAW,cAAd,eAA0C,kBAAQA,WAAW,KAAnB,UAA1C,8EAEF,2BACE,aAAGA,WAAW,cAAd,OAAkC,kBAAQA,WAAW,KAAnB,4BAClC,aAAGA,WAAW,cAAd,iJAEF,gJACA,mBACE,cAAIA,WAAW,OACb,aAAGA,WAAW,OAAK,kBAAQA,WAAW,KAAnB,aACzB,eAAKC,IAAKC,EAAAA,EAAiBC,UAAU,eAEjC,cAAIH,WAAW,OACb,aAAGA,WAAW,OAAK,kBAAQA,WAAW,KAAnB,WAC1B,eAAKC,IAAKG,EAAAA,EAAeD,UAAU,gB,uMAOpCP,EAAWS,gBAAiB","sources":["webpack://unittestbot-web/./src/docs/usage/format-tests.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/user/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport VerboseTestsImg from '/resources/images/verbose.png';\nimport ShortTestsImg from '/resources/images/short.png';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"formatting-tests\"\n    }}>{`Formatting Tests`}</h1>\n    <p>{`UnitTestBot supports two formatting styles for generated tests:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Short form`}</strong>{`: so-called \"one-liners\", concise checks that are suitable for utility functions with many branches to cover;`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Verbose form`}</strong>{`: parameters declarations, expected and actual values, the function call are placed on separated lines (aka \"Huawei's Five Rules\"). Tests are easy to read and understand, but they occupy much more space in the code editor.`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`✔️ `}<strong parentName=\"p\">{`Statusbar`}</strong></p>\n      <p parentName=\"blockquote\">{`   You can `}<strong parentName=\"p\">{`switch`}</strong>{` between modes using the corresponding control in the VS Code Statusbar.`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`✔️ `}<strong parentName=\"p\">{`Independent formatting`}</strong></p>\n      <p parentName=\"blockquote\">{`   You can use different formatting for different files, it's not necessary to use the same style for all the source files in your project.`}</p>\n    </blockquote>\n    <p>{`Below we attach the screenshots that show how the same tests look when they are generated with (and without) verbose mode.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Verbose`}</strong></p>\n  <img src={VerboseTestsImg} className=\"usageGif\" />\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Short`}</strong></p>\n <img src={ShortTestsImg} className=\"usageGif\" />\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","src","VerboseTestsImg","className","ShortTestsImg","isMDXComponent"],"sourceRoot":""}