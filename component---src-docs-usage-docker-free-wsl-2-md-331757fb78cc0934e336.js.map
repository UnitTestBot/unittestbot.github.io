{"version":3,"file":"component---src-docs-usage-docker-free-wsl-2-md-331757fb78cc0934e336.js","mappings":"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","sources":["webpack://unittestbot-web/./src/docs/usage/docker-free-wsl2.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/unittestbot.github.io/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"docker-free-utbot-in-wsl2\"\n    }}>{`Docker-free UTBot in WSL2`}</h1>\n    <p>{`If you have a project on Windows you may like to use lightweight solution for the UTBot that is based on WSL2 virtualization approach.`}</p>\n    <p>{`Please, be sure that you have an ability to install the WSL2 in you Windows 10 or 11.\nMaybe you need the upgrade Windows 10 to the latest version\nand the `}<a parentName=\"p\" {...{\n        \"href\": \"https://support.microsoft.com/en-us/topic/windows-10-update-assistant-3550dfb2-a015-7765-12ea-fba2ac36fb3f\"\n      }}>{`Windows 10 Upgrade Assistance`}</a>{`\nis the best way to go.`}</p>\n    <p>{`In the simplest variant you need to create an empty WSL2 container with recommended version of Ubuntu (currently it is `}<strong parentName=\"p\">{`Ubuntu 18.04`}</strong>{`)\nThat can be done by command (may need administrator privileges):`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`PS C:\\\\Users\\\\user>wsl --install -d Ubuntu-18.04\n`}</code></pre>\n    <p>{`After the installation you have initial setup for WSL2 user (just for unification we recommend name it 'utbot'):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`Installing, this may take a few minutes...\nPlease create a default UNIX user account. The username does not need to match your Windows username.\nFor more information visit: https://aka.ms/wslusers\nEnter new UNIX username: utbot\nEnter new UNIX password:\nRetype new UNIX password:\npasswd: password updated successfully\nInstallation successful!\nTo run a command as administrator (user \"root\"), use \"sudo <command>\".\nSee \"man sudo_root\" for details.\n\nutbot@userhwlp:~$\n`}</code></pre>\n    <p>{`At this point the WSL2 initial container installation is finished.\nBy default new UTBot WSL2 container is called `}<strong parentName=\"p\">{`Ubuntu-18.04`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-PowerShell\"\n      }}>{`PS C:\\\\Users\\\\u00663918> wsl --list --verbose\n  NAME                   STATE           VERSION\n  Ubuntu-18.04           Running         2      <---------- Newly installed WSL2 container   \n`}</code></pre>\n    <p>{`Now you need to install the UTBot server in it.`}</p>\n    <p>{`For the common case this step is described in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/wiki/install-server\"\n      }}>{`install server`}</a>{`\ndocument, but this simplified WSL2 installation has some specifics and is described below.`}</p>\n    <h2 {...{\n      \"id\": \"step-by-step-utbot-server-installation-and-the-first-run\"\n    }}>{`Step by step UTBot server installation and the first run`}</h2>\n    <p><strong parentName=\"p\">{`Hint`}</strong>{`: you can skip this section by running the script from home `}<strong parentName=\"p\">{`utbot`}</strong>{` folder:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`#!/bin/bash\n\n#please, change UTBOT_VERSION value to the latest version from https://github.com/UnitTestBot/UTBotCpp/releases\nexport UTBOT_VERSION=\"1.0.167\" \n\nmkdir utbotcpp\ncd utbotcpp\nwget https://github.com/UnitTestBot/UTBotCpp/releases/download/v$UTBOT_VERSION/utbot-release-$UTBOT_VERSION.zip\nsudo apt-get install unzip\nunzip utbot-release-$UTBOT_VERSION.zip\ntar -xvzf utbot_distr.tar.gz\nchmod +x unpack_and_run_utbot.sh \nsudo ./unpack_and_run_utbot.sh\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`You need to check the latest version of UTBot from `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/releases\"\n        }}>{`release artifacts`}</a>{`.\nPlease, find the URL of artifacts that is taken from `}<strong parentName=\"li\">{`Assets`}</strong>{`. As an example: `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/releases/download/v1.0.167/utbot-release-1.0.167.zip\"\n        }}>{`https://github.com/UnitTestBot/UTBotCpp/releases/download/v1.0.167/utbot-release-1.0.167.zip`}</a>{`.\nHere \"1.0.167\" is the latest version at the time of writing.`}</li>\n      <li parentName=\"ul\">{`Make the directory for UTBotCpp `}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`utbot@userhwlp:~$ mkdir utbotcpp \n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">{`Go into created directory utbotcpp`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`utbot@userhwlp:~$ cd utbotcpp \n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">{`Download archive from release artifacts`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`utbot@userhwlp:~/utbotcpp$ wget https://github.com/UnitTestBot/UTBotCpp/releases/download/v1.0.167/utbot-release-1.0.167.zip\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">{`Unarchive downloaded zip (install unzip `}<inlineCode parentName=\"li\">{`sudo apt-get install unzip`}</inlineCode>{` first!)`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`utbot@userhwlp:~/utbotcpp$ unzip utbot-release-1.0.167.zip\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">{`Unpack tar `}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`utbot@userhwlp:~/utbotcpp$ tar -xvzf utbot_distr.tar.gz\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">{`Install and run server under the `}<inlineCode parentName=\"li\">{`root`}</inlineCode>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`utbot@userhwlp:~/utbotcpp$ sudo chmod +x unpack_and_run_utbot.sh && ./unpack_and_run_utbot.sh\n`}</code></pre>\n        <strong parentName=\"li\">{`NB!`}</strong>{` UTBot need to be run under the root to get an access to Windows File System with necessary privileges. `}</li>\n    </ul>\n    <p>{`To run correctly UTBot server needs well-configured build-related and `}<inlineCode parentName=\"p\">{`gcc-9`}</inlineCode>{` packages.\nYou can do it by running the following script:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`#!/bin/bash\n\nsudo apt-get update -y\nsudo apt-get upgrade -y\nsudo apt-get dist-upgrade -y\nsudo apt-get install build-essential software-properties-common -y\nsudo add-apt-repository ppa:ubuntu-toolchain-r/test -y\nsudo apt-get update -y\nsudo apt-get install gcc-9 g++-9 -y\nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-9\nsudo update-alternatives --config gcc\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"restart-utbot-server\"\n    }}>{`Restart UTBot server`}</h2>\n    <p>{`There are several ways to restart the UTBot server:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Restart UTBot server only. You can do it by the command from home directory of `}<inlineCode parentName=\"li\">{`utbot`}</inlineCode>{` user inside WSL2 container:`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`utbot@userhwlp:~$ sudo ~/utbotcpp/utbot_distr/utbot_server_restart.sh\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">{`Restart WSL2 subsystem from PowerShell command line`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-PowerShell\"\n          }}>{`PS C:\\\\Users\\\\u00663918> wsl --terminate Ubuntu-18.04\n`}</code></pre>\n        {`After that you need to run WSL2 container `}<strong parentName=\"li\">{`Ubuntu-18.04`}</strong>{` again and start the server by internal script`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`utbot@userhwlp:~$ sudo ~/utbotcpp/utbot_distr/utbot_server_restart.sh\n`}</code></pre>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"vc-utbot-plugin-setup\"\n    }}>{`VC UTBot plugin setup`}</h2>\n    <p>{`Due to single FS project organization you don't need synchronize the project source on Windows with WSL2 UTBot server.\nAs a result you don't need SFTP plugin.\nWhile mandatory setup of UTBot plugin (Run UTBot: Quickstart wizard) you need `}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Connection`}</inlineCode>{` step:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Type `}<inlineCode parentName=\"li\">{`localhost`}</inlineCode>{` in `}<strong parentName=\"li\">{`Host`}</strong>{`  field (`}<strong parentName=\"li\">{`NB!`}</strong>{` not `}<inlineCode parentName=\"li\">{`127.0.0.1`}</inlineCode>{`, not a temporary IP address that will change each time the WSL2 container is started)`}</li>\n          <li parentName=\"ul\">{`Type `}<inlineCode parentName=\"li\">{`2121`}</inlineCode>{` in `}<strong parentName=\"li\">{`Port`}</strong>{`  field`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Remote Path`}</inlineCode>{` step:\nType `}<inlineCode parentName=\"li\">{`/mnt/d/dev/c-example-my-vc`}</inlineCode>{` for windows project from  `}<inlineCode parentName=\"li\">{`d:\\\\dev\\\\c-example-my-vc`}</inlineCode>{` in `}<strong parentName=\"li\">{`Remote Path`}</strong>{` field`}</li>\n    </ul>\n    <p>{`That is all!\nGood luck!`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}