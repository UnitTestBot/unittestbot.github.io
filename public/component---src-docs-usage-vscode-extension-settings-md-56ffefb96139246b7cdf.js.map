{"version":3,"file":"component---src-docs-usage-vscode-extension-settings-md-56ffefb96139246b7cdf.js","mappings":"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","sources":["webpack://unittestbot-web/./src/docs/usage/vscode-extension-settings.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/user/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport SettingsOpenImg from '/resources/gifs/settings.gif';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"vs-code-extension-settings\"\n    }}>{`VS Code Extension Settings`}</h1>\n    <p>{`UnitTestBot extension for VSCode provides flexibility in its configuration.\nExtension settings might be accessed as follows: `}<inlineCode parentName=\"p\">{`File > Preferences > Settings  (or Ctrl + ,)`}</inlineCode>{`, then navigate to `}<inlineCode parentName=\"p\">{`Extensions > UnitTestBot`}</inlineCode>{`.`}</p>\n    <p>{`In case you are looking for some specific setting(s), search bar might be used.`}</p>\n    <img src={SettingsOpenImg} className=\"usageGif\" />\n    <p>{`For convenience, all the settings are divided into the following groups: `}</p>\n    <ul>\n      <li parentName=\"ul\">{`Deployment`}</li>\n      <li parentName=\"ul\">{`Paths`}</li>\n      <li parentName=\"ul\">{`Generation`}</li>\n      <li parentName=\"ul\">{`Stubs`}</li>\n      <li parentName=\"ul\">{`Visual`}</li>\n      <li parentName=\"ul\">{`Advanced`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"deployment\"\n    }}>{`Deployment`}</h2>\n    <h4 {...{\n      \"id\": \"utbot-host\"\n    }}>{`UTBot Host`}</h4>\n    <p><strong parentName=\"p\">{`Expected value format`}</strong>{`: `}<inlineCode parentName=\"p\">{`string, that represents host address`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`Default value`}</strong>{`: `}<inlineCode parentName=\"p\">{`127.0.0.1`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`JSON identifier`}</strong>{`: `}<inlineCode parentName=\"p\">{`unittestbot.deployment.utbotHost`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"utbot-port\"\n    }}>{`UTBot Port`}</h4>\n    <p>{`Address of the host UTBot Server is running on. Learn more about UTBot Server installation. `}</p>\n    <p><strong parentName=\"p\">{`Expected value format`}</strong>{`: `}<inlineCode parentName=\"p\">{`number, that represents a port`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`Default value`}</strong>{`: `}<inlineCode parentName=\"p\">{`2121`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`JSON identifier`}</strong>{`: `}<inlineCode parentName=\"p\">{`unittestbot.deployment.utbotPort`}</inlineCode>{`.`}</p>\n    <p>{`The port used by the client to connect to UTBot Server via a gRPC channel.\nThis field should be filled accordingly to the UTBot Server Port parameter specified during the UTBot Server installation.`}</p>\n    <h4 {...{\n      \"id\": \"remote-path\"\n    }}>{`Remote Path`}</h4>\n    <p><strong parentName=\"p\">{`Expected value format`}</strong>{`: `}<inlineCode parentName=\"p\">{`UNIX path`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`Default value`}</strong>{`: `}<inlineCode parentName=\"p\">{`<empty string>`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`JSON identifier`}</strong>{`: `}<inlineCode parentName=\"p\">{`unittestbot.deployment.remotePath`}</inlineCode>{`.`}</p>\n    <p>{`Remote path configuration specifies the path to the project on a remote host.`}</p>\n    <p>{`When VSCode Remote Scenario is used, Remote Path matches the workspace path and it can be automatically determined by UnitTestBot extension.\nIn case you work via SFTP scenario (or any equivalent) Remote Path should be set manually and correspond to the location of the project on a remote host.`}</p>\n    <h2 {...{\n      \"id\": \"paths\"\n    }}>{`Paths`}</h2>\n    <h4 {...{\n      \"id\": \"build-directory\"\n    }}>{`Build Directory`}</h4>\n    <p><strong parentName=\"p\">{`Expected value format`}</strong>{`: `}<inlineCode parentName=\"p\">{`UNIX path`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`Default value`}</strong>{`: `}<inlineCode parentName=\"p\">{`build`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`JSON identifier`}</strong>{`: `}<inlineCode parentName=\"p\">{`unittestbot.paths.buildDirectory`}</inlineCode>{`.`}</p>\n    <p>{`Relative path to the build directory. File `}<inlineCode parentName=\"p\">{`compile_commands.json`}</inlineCode>{` (as well as link_commands.json) should be located in the build folder. `}</p>\n    <h4 {...{\n      \"id\": \"cmake-options\"\n    }}>{`CMake options`}</h4>\n    <p><strong parentName=\"p\">{`Expected value format`}</strong>{`: `}<inlineCode parentName=\"p\">{`string, that represents valid CMake flags`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`Default value`}</strong>{`: `}<inlineCode parentName=\"p\">{`-DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_EXPORT_LINK_COMMANDS=ON`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`JSON identifier`}</strong>{`: `}<inlineCode parentName=\"p\">{`unittestbot.paths.cmakeOptions.description`}</inlineCode>{`.`}</p>\n    <p>{`Options passed to CMake command when auto build your project first time you open it.`}</p>\n    <h4 {...{\n      \"id\": \"source-directories\"\n    }}>{`Source Directories`}</h4>\n    <p><strong parentName=\"p\">{`Expected value format`}</strong>{`: `}<inlineCode parentName=\"p\">{`UNIX paths, separated by commas`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`Default value`}</strong>{`: `}<inlineCode parentName=\"p\">{`<empty>`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`JSON identifier`}</strong>{`: `}<inlineCode parentName=\"p\">{`unittestbot.paths.sourceDirectories`}</inlineCode>{`.`}</p>\n    <p>{`Relative paths to the directories, that are marked as source directories. UTBot looks for source file in specified directories.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`📝`}<strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`Please, prefer using UTBot Explorer View instead of raw settings. UTBot Explorer View makes it possible to mark/unmark directories as \"source directories\".`}</p>\n    </blockquote>\n    <h4 {...{\n      \"id\": \"tests-directory\"\n    }}>{`Tests Directory`}</h4>\n    <p><strong parentName=\"p\">{`Expected value format`}</strong>{`: `}<inlineCode parentName=\"p\">{`UNIX path`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`Default value`}</strong>{`: `}<inlineCode parentName=\"p\">{`tests`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`JSON identifier`}</strong>{`: `}<inlineCode parentName=\"p\">{`unittestbot.paths.testsDirectory`}</inlineCode>{`.`}</p>\n    <p>{`Relative path to the directory where generated tests will be placed.`}</p>\n    <h2 {...{\n      \"id\": \"tests-generation\"\n    }}>{`Tests Generation`}</h2>\n    <h4 {...{\n      \"id\": \"generate-for-static-functions\"\n    }}>{`Generate for Static Functions`}</h4>\n    <p><strong parentName=\"p\">{`Expected value format`}</strong>{`: `}<inlineCode parentName=\"p\">{`boolean (checkbox)`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`Default value`}</strong>{`: `}<inlineCode parentName=\"p\">{`True`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`JSON identifier`}</strong>{`: `}<inlineCode parentName=\"p\">{`unittestbot.testsGeneration.generateForStaticFunctions`}</inlineCode>{`.`}</p>\n    <p>{`When set to `}<inlineCode parentName=\"p\">{`True`}</inlineCode>{`, UnitTestBot generates tests for C static functions, otherwise such functions won't be proceeded. `}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`📝`}<strong parentName=\"p\">{`Note`}</strong></p>\n      <p parentName=\"blockquote\">{`In C, a static function is not visible outside of its translation unit, which is the object file it is compiled into. In other words, making a function static limits its scope. Due to this, you can think of a static function as of  \"private\" function in other programming languages. It's commonly believed, that such functions shouldn't be tested, as they are not visible outside and can't be called elsewhere. However, as some projects (e.g. GNU Coreutils) tend to implement the main functionality inside static functions, UnitTestBot gives an opportunity to test them as well. `}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"apply-huaweis-five-step-rule-standard\"\n    }}>{`Apply Huawei's Five Step Rule Standard`}</h2>\n    <p><strong parentName=\"p\">{`Expected value format`}</strong>{`: `}<inlineCode parentName=\"p\">{`boolean (checkbox)`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`Default value`}</strong>{`:  `}<inlineCode parentName=\"p\">{`False`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`JSON identifier`}</strong>{`: `}<inlineCode parentName=\"p\">{`unittestbot.testsGeneration.applyHuawei'sFiveStepRuleStandard`}</inlineCode>{`.`}</p>\n    <p>{`When set to `}<inlineCode parentName=\"p\">{`True`}</inlineCode>{` UnitTestBot generates tests in accordance with Huawei's Five Step Rule Standard (verbose formatting), otherwise the tests are generated in a simpler form and take less space (lines of code).`}</p>\n    <h2 {...{\n      \"id\": \"stubs\"\n    }}>{`Stubs`}</h2>\n    <h4 {...{\n      \"id\": \"implicitly-generate-stubs\"\n    }}>{`Implicitly Generate Stubs`}</h4>\n    <p><strong parentName=\"p\">{`Expected value format`}</strong>{`: `}<inlineCode parentName=\"p\">{`boolean (checkbox)`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`Default value`}</strong>{`:  `}<inlineCode parentName=\"p\">{`False`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`JSON identifier`}</strong>{`: `}<inlineCode parentName=\"p\">{`unittestbot.stubs.implicitlyGenerateStubs`}</inlineCode>{`.`}</p>\n    <p>{`When set to `}<inlineCode parentName=\"p\">{`True`}</inlineCode>{`, UTBot will generate stubs for the functions from external modules automatically.`}</p>\n    <p>{`The function is a part of external module with respect to function (or file) the tests are generated for if it's a part of different linking unit. UTBot detects linking units via link_commands.json.`}</p>\n    <h4 {...{\n      \"id\": \"use-stubs\"\n    }}>{`Use Stubs`}</h4>\n    <p><strong parentName=\"p\">{`Expected value format`}</strong>{`: `}<inlineCode parentName=\"p\">{`boolean (checkbox)`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`Default value`}</strong>{`: `}<inlineCode parentName=\"p\">{`False`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`JSON identifier`}</strong>{`: `}<inlineCode parentName=\"p\">{`unittestbot.stubs.useStubs`}</inlineCode>{`.`}</p>\n    <p>{`When set to `}<inlineCode parentName=\"p\">{`True`}</inlineCode>{`, UTBot will use generated stubs from `}<inlineCode parentName=\"p\">{`<testsDir>/stubs`}</inlineCode>{` folder instead of real files.`}</p>\n    <h2 {...{\n      \"id\": \"visual\"\n    }}>{`Visual`}</h2>\n    <h4 {...{\n      \"id\": \"show-test-results\"\n    }}>{`Show Test Results`}</h4>\n    <p><strong parentName=\"p\">{`Expected value format`}</strong>{`: `}<inlineCode parentName=\"p\">{`boolean (checkbox)`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`Default value`}</strong>{`: `}<inlineCode parentName=\"p\">{`True`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`JSON identifier`}</strong>{`: `}<inlineCode parentName=\"p\">{`unittestbot.visual.showTestResults`}</inlineCode>{`.`}</p>\n    <p>{`When set to `}<inlineCode parentName=\"p\">{`True`}</inlineCode>{`, the results of the run tests are displayed on the left side of the test headers.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`✔️ `}<strong parentName=\"p\">{`Recommendation`}</strong></p>\n      <p parentName=\"blockquote\">{`It's recommended to set given preference to `}<inlineCode parentName=\"p\">{`False`}</inlineCode>{` in case you use a separate test runner extension for Visual Studio Code.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"advanced\"\n    }}>{`Advanced`}</h2>\n    <h4 {...{\n      \"id\": \"enable-developer-mode\"\n    }}>{`Enable Developer Mode`}</h4>\n    <p><strong parentName=\"p\">{`Expected value format`}</strong>{`: `}<inlineCode parentName=\"p\">{`boolean (checkbox)`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`Default value`}</strong>{`:  `}<inlineCode parentName=\"p\">{`False`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`JSON identifier`}</strong>{`: `}<inlineCode parentName=\"p\">{`unittestbot.advanced.enableDeveloperMode`}</inlineCode>{`.`}</p>\n    <p>{`Enables hidden developer commands useful for debug.`}</p>\n    <h4 {...{\n      \"id\": \"use-deterministic-searcher\"\n    }}>{`Use Deterministic Searcher`}</h4>\n    <p><strong parentName=\"p\">{`Expected value format`}</strong>{`: `}<inlineCode parentName=\"p\">{`boolean (checkbox)`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`Default value`}</strong>{`:  `}<inlineCode parentName=\"p\">{`False`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`JSON identifier`}</strong>{`: `}<inlineCode parentName=\"p\">{`unittestbot.advanced.useDeterministicSearcher`}</inlineCode>{`.`}</p>\n    <p>{`Use deterministic searcher to traverse bitcode in the same way every time. It may significantly slow down tests generation.`}</p>\n    <h4 {...{\n      \"id\": \"timeout-per-function\"\n    }}>{`Timeout Per Function`}</h4>\n    <p><strong parentName=\"p\">{`Expected value format`}</strong>{`: `}<inlineCode parentName=\"p\">{`number, that represents seconds`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`Default value`}</strong>{`: `}<inlineCode parentName=\"p\">{`30`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`JSON identifier`}</strong>{`: `}<inlineCode parentName=\"p\">{`unittestbot.advanced.timeoutPerFunction`}</inlineCode>{`.`}</p>\n    <p>{`Maximum time (in seconds) is allowed for generation tests per function.\nSet to `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` to disable it.`}</p>\n    <h4 {...{\n      \"id\": \"timeout-per-test\"\n    }}>{`Timeout Per Test`}</h4>\n    <p><strong parentName=\"p\">{`Expected value format`}</strong>{`: `}<inlineCode parentName=\"p\">{`number, that represents seconds`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`Default value`}</strong>{`: `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`;`}</p>\n    <p><strong parentName=\"p\">{`JSON identifier`}</strong>{`: `}<inlineCode parentName=\"p\">{`unittestbot.advanced.timeoutPerTest`}</inlineCode>{`.`}</p>\n    <p>{`Maximum time (in seconds) allowed for a single test being run. After that, the test is automatically cancelled.\nThe option can be used if some of the generated tests force the user code to hang; in such a case, `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/cpp/usage/run-generated-tests\"\n      }}>{`Run All Tests and Show Coverage`}</a>{` option will also hang. However, if the timeout for test is specified, hanging tests will be cancelled silently and the coverage will be shown.\nSet to `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` to disable it.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","src","SettingsOpenImg","className","isMDXComponent"],"sourceRoot":""}