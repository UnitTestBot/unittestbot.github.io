{"version":3,"file":"component---src-docs-c-standard-support-md-9440a5d1b250db7bb717.js","mappings":"8RAQaA,EAAe,Q,sOAC5B,IAAMC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,cACE,GAAM,cADR,eAGA,mBACE,cAAIC,WAAW,MAAf,SACE,cAAIA,WAAW,OACb,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,iDADQ,gBAGlB,cAAIA,WAAW,OACb,cAAIA,WAAW,MAAf,YAAgC,aAAGA,WAAW,KAC1C,KAAQ,SADoB,gBAGhC,cAAIA,WAAW,MAAf,uBAA2C,aAAGA,WAAW,KACrD,KAAQ,mBAD+B,gBAG3C,cAAIA,WAAW,OAAK,kBAAQA,WAAW,MAAnB,cAApB,KAAwE,kBAAQA,WAAW,MAAnB,aAAxE,aACA,cAAIA,WAAW,MAAf,aAAiC,aAAGA,WAAW,KAC3C,KAAQ,eADqB,gBAGjC,cAAIA,WAAW,MAAf,4BAAgD,aAAGA,WAAW,KAC1D,KAAQ,yBADoC,kBAKpD,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,iDADQ,SAApB,QAE0B,aAAGA,WAAW,KACpC,KAAQ,UADc,gBAG1B,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,kDADQ,WAGlB,cAAIA,WAAW,OACb,cAAIA,WAAW,MAAf,kCACA,cAAIA,WAAW,MAAf,0BACA,cAAIA,WAAW,MAAf,2BACA,cAAIA,WAAW,MAAf,8BAGJ,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,mDADQ,YAGlB,cAAIA,WAAW,OACb,cAAIA,WAAW,MAAf,sBACA,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,sDADQ,cAApB,OAE8B,aAAGA,WAAW,KACxC,KAAQ,sDADkB,oBAKlC,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,kDADQ,WAGlB,cAAIA,WAAW,OACb,cAAIA,WAAW,MAAf,sBAGJ,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,oDADQ,aAGlB,cAAIA,WAAW,OACb,cAAIA,WAAW,MAAf,0BACA,cAAIA,WAAW,MAAf,uBAA2C,aAAGA,WAAW,KACrD,KAAQ,0EAD+B,kBAG3C,cAAIA,WAAW,MAAf,gCAGJ,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,mDADQ,oBAKxB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,sDADQ,cAGlB,cAAIA,WAAW,OACb,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,qDADQ,wBAGpB,cAAIA,WAAW,MAAf,qBACA,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,mDADQ,wBAKxB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,uDADQ,yBAGlB,cAAIA,WAAW,OACb,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,+CADQ,QAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,mDADQ,UAApB,MAGA,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,gDADQ,SAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,kDADQ,WAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,+CADQ,cAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,qDADQ,cAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,kDADQ,WAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,iDADQ,UAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,gFADQ,sCAKxB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,oDADQ,cAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,6DADQ,6BAGlB,cAAIA,WAAW,OACb,cAAIA,WAAW,MAAf,qBACA,cAAIA,WAAW,MAAf,uBAGJ,cAAIA,WAAW,MAAf,cACE,cAAIA,WAAW,OACb,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,kDADQ,WAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,qDADQ,cAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,qDADQ,gBAKxB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,6DADQ,uBAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,2CADQ,+BAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,yCADQ,mBAGlB,cAAIA,WAAW,OACb,cAAIA,WAAW,MAAf,UACA,cAAIA,WAAW,MAAf,aAGJ,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,0CADQ,+BAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,sCADQ,kBAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,6CADQ,gBAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,kDADQ,qCAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,mDADQ,+BAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,0CADQ,iBAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,oDADQ,wBAItB,oBACA,cACE,GAAM,kBADR,mBAGA,2BACE,aAAGA,WAAW,eAAa,kBAAQA,WAAW,KAAnB,QAA3B,iDAAoH,aAAGA,WAAW,IAC9H,KAAQ,qFADwG,QAApH,MAGA,cAAIA,WAAW,aACb,GAAM,eADR,gBAGA,cAAIA,WAAW,aACb,GAAM,QADR,SAGA,eAAKA,WAAW,eAAa,gBAAMA,WAAW,MAC1C,UAAa,gBADY,oIAW/B,oBAAK,gBAAMA,WAAW,OAAjB,iDAKL,uBACA,oBAAK,gBAAMA,WAAW,OAAjB,odA4BL,cACE,GAAM,kBADR,mBAGA,2BACE,aAAGA,WAAW,eAAa,sBAAYA,WAAW,KAAvB,+HAE7B,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,sIASL,cACE,GAAM,mBADR,oBAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,6OAcL,cACE,GAAM,cADR,eAGA,2BACE,aAAGA,WAAW,cAAd,0DAAqF,sBAAYA,WAAW,KAAvB,eAArF,OAEF,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,6IASL,cACE,GAAM,qBADR,oBAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,wiBA0BL,cACE,GAAM,wBADR,yBAGA,2BACE,aAAGA,WAAW,eAAa,sBAAYA,WAAW,KAAvB,iCAE7B,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,wLAaL,cACE,GAAM,qBADR,oBAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,wUAcL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,mHAUL,cACE,GAAM,qBADR,oBAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,uOAcL,cACE,GAAM,SADR,UAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,iTAqBL,cACE,GAAM,qBADR,oBAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,4VAoBL,oBACA,cACE,GAAM,oBADR,qBAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,gCAIL,cACE,GAAM,qBADR,oBAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,gC,6NAQTJ,EAAWK,gBAAiB","sources":["webpack://unittestbot-web/./src/docs/C-standard-support.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/unittestbot.github.io/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"c-features\"\n    }}>{`C features`}</h1>\n    <ul>\n      <li parentName=\"ul\">{`Types`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/type\"\n            }}>{`Basic types`}</a>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`char ✔️ `}<a parentName=\"li\" {...{\n                  \"href\": \"#char\"\n                }}>{`[examples]`}</a></li>\n              <li parentName=\"ul\">{`integral types ✔️  `}<a parentName=\"li\" {...{\n                  \"href\": \"#integral-types\"\n                }}>{`[examples]`}</a></li>\n              <li parentName=\"ul\"><strong parentName=\"li\">{`[extended]`}</strong>{` `}<strong parentName=\"li\">{`int128 / `}</strong>{`uint128 `}</li>\n              <li parentName=\"ul\">{`_Bool ✔️ `}<a parentName=\"li\" {...{\n                  \"href\": \"#_bool-type\"\n                }}>{`[examples]`}</a></li>\n              <li parentName=\"ul\">{`floating-point types ✔️ `}<a parentName=\"li\" {...{\n                  \"href\": \"#floating-point-types\"\n                }}>{`[examples]`}</a></li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/enum\"\n            }}>{`Enums`}</a>{` ✔️ `}<a parentName=\"li\" {...{\n              \"href\": \"#enums\"\n            }}>{`[examples]`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/array\"\n            }}>{`Arrays`}</a>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`arrays of constant known size`}</li>\n              <li parentName=\"ul\">{`variable-length array`}</li>\n              <li parentName=\"ul\">{`arrays of unknown size`}</li>\n              <li parentName=\"ul\">{`multidimensional arrays`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/struct\"\n            }}>{`Structs`}</a>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`anonymous structs`}</li>\n              <li parentName=\"ul\"><a parentName=\"li\" {...{\n                  \"href\": \"https://en.cppreference.com/w/c/language/bit_field\"\n                }}>{`bit fields`}</a>{` ❌ `}<a parentName=\"li\" {...{\n                  \"href\": \"https://github.com/UnitTestBot/UTBotCpp/issues/237\"\n                }}>{`[discussion]`}</a></li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/union\"\n            }}>{`Unions`}</a>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`anonymous union`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/pointer\"\n            }}>{`Pointers`}</a>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`pointers to functions`}</li>\n              <li parentName=\"ul\">{`pointers to void ❌ `}<a parentName=\"li\" {...{\n                  \"href\": \"https://github.com/UnitTestBot/UTBotCpp/pull/221#discussion_r861876337\"\n                }}>{`[discussion]`}</a></li>\n              <li parentName=\"ul\">{`multidimensional pointers`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/atomic\"\n            }}>{`Atomic types`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/language/functions\"\n        }}>{`Functions`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/variadic\"\n            }}>{`variadic arguments`}</a></li>\n          <li parentName=\"ul\">{`static functions`}</li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/inline\"\n            }}>{`inline functions`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/language/statements\"\n        }}>{`Statements and loops`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/if\"\n            }}>{`if`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/switch\"\n            }}>{`switch`}</a>{` `}</li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/for\"\n            }}>{`for`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/while\"\n            }}>{`while`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/do\"\n            }}>{`do-while`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/continue\"\n            }}>{`continue`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/break\"\n            }}>{`break`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/goto\"\n            }}>{`goto`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/operator_other#Conditional_operator\"\n            }}>{`conditional (ternary) operator`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/language/typedef\"\n        }}>{`Typedefs`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/language/storage_duration\"\n        }}>{`Storage-class specifiers`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`static variables`}</li>\n          <li parentName=\"ul\">{`extern variables`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Qualifiers`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/const\"\n            }}>{`const`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/volatile\"\n            }}>{`volatile`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://en.cppreference.com/w/c/language/restrict\"\n            }}>{`restrict`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/language/compound_literal\"\n        }}>{`Compound literals`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/program\"\n        }}>{`Program support utilities`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/error\"\n        }}>{`Error handling`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`errno`}</li>\n          <li parentName=\"ul\">{`assert`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/memory\"\n        }}>{`Dynamic memory management`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/io\"\n        }}>{`Input/Output`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/algorithm\"\n        }}>{`Algorithms`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/numeric/random\"\n        }}>{`Pseudo random number generation`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/numeric/complex\"\n        }}>{`Complex number arithmetic`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/thread\"\n        }}>{`Concurrency`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://en.cppreference.com/w/c/language/generic\"\n        }}>{`Generic selection`}</a></li>\n    </ul>\n    <hr></hr>\n    <h1 {...{\n      \"id\": \"utbot-examples\"\n    }}>{`UTBot examples`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note`}</strong>{`: all of the following examples can be found `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib\"\n        }}>{`here`}</a>{`.`}</p>\n      <h2 parentName=\"blockquote\" {...{\n        \"id\": \"basic-types\"\n      }}>{`Basic types`}</h2>\n      <h3 parentName=\"blockquote\" {...{\n        \"id\": \"char\"\n      }}>{`Char`}</h3>\n      <pre parentName=\"blockquote\"><code parentName=\"pre\" {...{\n          \"className\": \"language-cpp\"\n        }}>{`char a_or_b(char a, char b) {\n    if (a == 'a') {\n        return a;\n    }\n    if (b == 'b') {\n        return b;\n    }\n`}</code></pre>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{}}>{`if (a > b) {\n    return a;\n}\nreturn b;\n`}</code></pre>\n    <p>{`}`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\n###### Generated tests\n\n\\`\\`\\`cpp\nTEST(regression, a_or_b_test_1)\n{\n    char actual = a_or_b('b', 'b');\n    EXPECT_EQ('b', actual);\n}\n\nTEST(regression, a_or_b_test_2)\n{\n    char actual = a_or_b('p', 'j');\n    EXPECT_EQ('p', actual);\n}\n\nTEST(regression, a_or_b_test_3)\n{\n    char actual = a_or_b('i', 'n');\n    EXPECT_EQ('n', actual);\n}\n\nTEST(regression, a_or_b_test_4)\n{\n    char actual = a_or_b('a', 'c');\n    EXPECT_EQ('a', actual);\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"integral-types\"\n    }}>{`Integral types`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`short, unsigned short, int, unsigned int, long, unsigned long, long long, unsigned long long, signed char, unsigned char`}</inlineCode></p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`signed long long int max_long(long long a, signed long long b) {\n    if (a > b) {\n        return a;\n    }\n    return b;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"generated-tests\"\n    }}>{`Generated tests`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, max_long_test_1)\n{\n    long long actual = max_long(0LL, -1LL);\n    EXPECT_EQ(0LL, actual);\n}\n\nTEST(regression, max_long_test_2)\n{\n    long long actual = max_long(0LL, 0LL);\n    EXPECT_EQ(0LL, actual);\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"_bool-type\"\n    }}>{`_Bool type`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`There is also a type alias bool for _Bool, defined in `}<inlineCode parentName=\"p\">{`<stdbool.h>`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`int fun_that_accept_bools(_Bool a, bool b) {\n    if (a && b) return 1;\n    if (a) return 2;\n    if (b) return 3;\n    return 4;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"generated-tests-1\"\n    }}>{`Generated tests`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, fun_that_accept_bools_test_1)\n{\n    int actual = fun_that_accept_bools(true, false);\n    EXPECT_EQ(2, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_2)\n{\n    int actual = fun_that_accept_bools(false, true);\n    EXPECT_EQ(3, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_3)\n{\n    int actual = fun_that_accept_bools(false, false);\n    EXPECT_EQ(4, actual);\n}\n\nTEST(regression, fun_that_accept_bools_test_4)\n{\n    int actual = fun_that_accept_bools(true, true);\n    EXPECT_EQ(1, actual);\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"floating-point-types\"\n    }}>{`Floating-point types`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`double, float, long double`}</inlineCode></p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`float long_double_arith(long double x) {\n    x *= 2;\n    x -= 3.21;\n    x *= fabsl(x);\n    if (x == 1.0) {\n        return 1.0;\n    } else {\n        return 3.5;\n    }\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"generated-tests-2\"\n    }}>{`Generated tests`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, long_double_arith_test_1)\n{\n    float actual = long_double_arith(2.105000e+00);\n    EXPECT_NEAR(1.000000e+00, actual, utbot_abs_error);\n}\n\nTEST(regression, long_double_arith_test_2)\n{\n    float actual = long_double_arith(0.000000e+00);\n    EXPECT_NEAR(3.500000e+00, actual, utbot_abs_error);\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`int plain_isnan(float x) {\n    if (x != x) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"generated-tests-3\"\n    }}>{`Generated tests`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, plain_isnan_test_1)\n{\n    int actual = plain_isnan(NAN);\n    EXPECT_EQ(1, actual);\n}\n\nTEST(regression, plain_isnan_test_2)\n{\n    int actual = plain_isnan(0.000000e+00);\n    EXPECT_EQ(0, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enums\"\n    }}>{`Enums`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`enum Sign {\n    NEGATIVE,\n    ZERO,\n    POSITIVE\n};\n\nint getSignValue(enum Sign s) {\n    switch (s) {\n        case NEGATIVE:\n            return 0;\n        case ZERO:\n            return 1;\n        case POSITIVE:\n            return 2;\n        default:\n            return -1;\n    }\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"generated-tests-4\"\n    }}>{`Generated tests`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, getSignValue_test_1)\n{\n    int actual = getSignValue(NEGATIVE);\n    EXPECT_EQ(0, actual);\n}\n\nTEST(regression, getSignValue_test_2)\n{\n    int actual = getSignValue(ZERO);\n    EXPECT_EQ(1, actual);\n}\n\nTEST(regression, getSignValue_test_3)\n{\n    int actual = getSignValue(POSITIVE);\n    EXPECT_EQ(2, actual);\n}\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"example-template\"\n    }}>{`Example template`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`// Enter the source code\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"generated-tests-5\"\n    }}>{`Generated tests`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`// Enter generated tests\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}