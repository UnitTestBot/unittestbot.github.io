{"version":3,"file":"component---src-docs-advanced-utbot-logging-md-cb1e98133c25d9690be5.js","mappings":"8RAQaA,EAAe,Q,0OAC5B,IAAMC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,cACE,GAAM,4BADR,6BAGA,cACE,GAAM,cADR,eAGA,0IACG,sBAAYC,WAAW,KAAvB,QADH,+GAEM,sBAAYA,WAAW,KAAvB,kBAFN,yFAGM,sBAAYA,WAAW,KAAvB,0BAHN,MAIA,gFAAkE,sBAAYA,WAAW,KAAvB,OAAlE,4EACc,sBAAYA,WAAW,KAAvB,kBADd,aAEA,yBAAW,sBAAYA,WAAW,KAAvB,QAAX,2DACA,mBACE,cAAIA,WAAW,MAAf,QACE,cAAIA,WAAW,OACb,cAAIA,WAAW,MAAf,WACE,cAAIA,WAAW,OACb,cAAIA,WAAW,MAAf,mBACA,cAAIA,WAAW,MAAf,wBACA,cAAIA,WAAW,MAAf,YACE,cAAIA,WAAW,OACb,cAAIA,WAAW,MAAf,UACE,cAAIA,WAAW,OACb,cAAIA,WAAW,MAAf,oBAGJ,cAAIA,WAAW,MAAf,UACE,cAAIA,WAAW,OACb,cAAIA,WAAW,MAAf,sBAKR,cAAIA,WAAW,MAAf,eAGJ,cAAIA,WAAW,MAAf,YACA,cAAIA,WAAW,MAAf,mBACA,cAAIA,WAAW,MAAf,2BAIN,mPACsG,kBAAQA,WAAW,KAAnB,QADtG,kDAEoC,kBAAQA,WAAW,KAAnB,SAFpC,MAEmF,kBAAQA,WAAW,KAAnB,WAFnF,MAEoI,kBAAQA,WAAW,KAAnB,QAFpI,SAEqL,kBAAQA,WAAW,KAAnB,SAFrL,qBAGA,6KAC4B,kBAAQA,WAAW,KAAnB,qBAD5B,MAEA,kBAAG,eAAKC,IAAI,oBAAoBC,IAAI,0GACpC,4DAA8C,kBAAQF,WAAW,KAAnB,uBAA9C,gBACA,kBAAG,eAAKC,IAAI,cAAcC,IAAI,kGAC9B,cACE,GAAM,eADR,gBAGA,sGAAwF,kBAAQF,WAAW,KAAnB,qBAAxF,UACA,kBAAG,eAAKC,IAAI,oBAAoBC,IAAI,0G,iOAKxCN,EAAWO,gBAAiB","sources":["webpack://unittestbot-web/./src/docs/advanced/utbot-logging.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/unittestbot.github.io/unittestbot.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"utbot-logging-principles\"\n    }}>{`UTBot logging principles`}</h1>\n    <h2 {...{\n      \"id\": \"server-log\"\n    }}>{`Server log`}</h2>\n    <p>{`The server generates two types of data: logs and temporary files needed to generate tests. Log data is written\ninto `}<inlineCode parentName=\"p\">{`logs`}</inlineCode>{` folder placed inside the docker container. The path in which folder is created can be managed by\npassing `}<inlineCode parentName=\"p\">{`--log /my/path`}</inlineCode>{` option to UnitTestBot binary. The default path for this option is the home\nfolder: `}<inlineCode parentName=\"p\">{`/home/{$USERNAME}/logs`}</inlineCode>{`.`}</p>\n    <p>{`The same principles are applied to the temporary directory `}<inlineCode parentName=\"p\">{`tmp`}</inlineCode>{`, in which the artifacts are placed and which path you\ncan control via `}<inlineCode parentName=\"p\">{`--tmp /my/path`}</inlineCode>{` option.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`logs`}</inlineCode>{` folder structure is represented in the following way:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`logs`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`client1`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`everything.log`}</li>\n              <li parentName=\"ul\">{`latest_readable.log`}</li>\n              <li parentName=\"ul\">{`project1`}\n                <ul parentName=\"li\">\n                  <li parentName=\"ul\">{`stage1`}\n                    <ul parentName=\"li\">\n                      <li parentName=\"ul\">{`timestamp.log`}</li>\n                    </ul>\n                  </li>\n                  <li parentName=\"ul\">{`stage2`}\n                    <ul parentName=\"li\">\n                      <li parentName=\"ul\">{`timestamp.log`}</li>\n                    </ul>\n                  </li>\n                </ul>\n              </li>\n              <li parentName=\"ul\">{`project2`}</li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">{`client2`}</li>\n          <li parentName=\"ul\">{`everything.log`}</li>\n          <li parentName=\"ul\">{`latest_readable.log`}</li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`As you can see, the server creates a subdirectory for each client. There are two files inside it: one of them stores\nevery log message written during the execution of the requests from this client, while the other stores `}<strong parentName=\"p\">{`INFO`}</strong>{` level\nlogs from the last session. There are `}<strong parentName=\"p\">{`ERROR`}</strong>{`, `}<strong parentName=\"p\">{`WARNING`}</strong>{`, `}<strong parentName=\"p\">{`INFO`}</strong>{` and `}<strong parentName=\"p\">{`DEBUG`}</strong>{` logging levels.`}</p>\n    <p>{`Besides writing server log to files, UTBot sends the same logs to clients so they can be viewed in VS Code directly. You\ncan find them in a tab called `}<strong parentName=\"p\">{`UTBot: Server Log`}</strong>{`.`}</p>\n    <p><img alt=\"utbotServerLogImg\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/utbotServerLog.png\" /></p>\n    <p>{`Logging level can be changed using the `}<strong parentName=\"p\">{`UTBot: Log Settings`}</strong>{` menu item.`}</p>\n    <p><img alt=\"logLevelGif\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/gifs/logLevel.gif\" /></p>\n    <h2 {...{\n      \"id\": \"client-logs\"\n    }}>{`Client logs`}</h2>\n    <p>{`Client logs monitors sent requests and received responses. They can be viewed in `}<strong parentName=\"p\">{`UTBot: Client Log`}</strong>{` tab.`}</p>\n    <p><img alt=\"utbotClientLogImg\" src=\"https://github.com/UnitTestBot/unittestbot.github.io/raw/source/resources/images/utbotClientLog.png\" /></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","isMDXComponent"],"sourceRoot":""}