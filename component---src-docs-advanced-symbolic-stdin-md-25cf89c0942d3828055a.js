"use strict";(self.webpackChunkunittestbot_web=self.webpackChunkunittestbot_web||[]).push([[2056],{81109:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return c},default:function(){return p}});var r=n(87462),s=n(63366),a=(n(15007),n(64983)),o=n(23017),i=(n(8156),["components"]),c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!Object.prototype.hasOwnProperty.call(c,"__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/advanced/symbolic-stdin.md"}});var d={_frontmatter:c},l=o.Z;function p(e){var t=e.components,n=(0,s.Z)(e,i);return(0,a.kt)(l,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"symbolic-stdin"},"Symbolic stdin"),(0,a.kt)("p",null,"UTBot is able to generate tests for C code that reads values from ",(0,a.kt)("strong",{parentName:"p"},"stdin"),", ",(0,a.kt)("strong",{parentName:"p"},"file descriptor")," or ",(0,a.kt)("strong",{parentName:"p"},"STDIN_FILENO"),". UTBot marks read values as symbolic, generates tests, puts the needed data into a C-string buffer and redirects ",(0,a.kt)("strong",{parentName:"p"},"stdin")," to the buffer so tests can be executed properly."),(0,a.kt)("p",null,"Here is an example of a function that reads values from stdin:"),(0,a.kt)("h6",{id:"source-code-example"},(0,a.kt)("a",{parentName:"h6",href:"https://github.com/UnitTestBot/UTBotCpp/blob/main/integration-tests/c-example/lib/symbolic_stdin.c"},"Source code example")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"int check_password(int fd) {\n  char buf[5];\n  if (read(fd, buf, 5) != -1) {\n    if (buf[0] == 'h' && buf[1] == 'e' &&\n    buf[2] == 'l' && buf[3] == 'l' &&\n    buf[4] == 'o')\n      return 1;\n  }\n  return 0;\n}\n")),(0,a.kt)("h6",{id:"redirecting-stdin"},"Redirecting stdin"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void utbot_redirect_stdin(const char* buf, int &res) {\n    int fds[2];\n    if (pipe(fds) == -1) {\n        res = -1;\n        return;\n    }\n    close(STDIN_FILENO);\n    dup2(fds[0], STDIN_FILENO);\n    write(fds[1], buf, 64);\n    close(fds[1]);\n}\n")),(0,a.kt)("h6",{id:"tests-code-example"},"Tests code example"))}p&&p===Object(p)&&Object.isExtensible(p)&&!Object.prototype.hasOwnProperty.call(p,"__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/advanced/symbolic-stdin.md"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-advanced-symbolic-stdin-md-25cf89c0942d3828055a.js.map