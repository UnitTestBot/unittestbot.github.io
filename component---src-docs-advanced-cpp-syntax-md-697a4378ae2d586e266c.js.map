{"version":3,"file":"component---src-docs-advanced-cpp-syntax-md-697a4378ae2d586e266c.js","mappings":"8RAQaA,EAAe,Q,uOAC5B,IAAMC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,cACE,GAAM,sBADR,yBAGA,uJACsC,aAAGC,WAAW,IAChD,KAAQ,oFAD0B,kBADtC,MAOA,mBACE,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,yBADQ,0BAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,wBADQ,yBAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,2BADQ,4BAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,kBADQ,mBAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,cADQ,eAGpB,cAAIA,WAAW,OAAK,aAAGA,WAAW,KAC9B,KAAQ,YADQ,cAOtB,cACE,GAAM,wBADR,yBASA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,0OAgBL,cACE,GAAM,cADR,eAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,81CAsEL,cACE,GAAM,uBADR,wBAGA,2BACE,aAAGA,WAAW,cAAd,yHAEF,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,kRAqBL,cACE,GAAM,gBADR,eAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,42DAkFL,cACE,GAAM,0BADR,2BAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,4PAgBL,cACE,GAAM,gBADR,eAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,yhCAkDL,cACE,GAAM,iBADR,kBAGA,2BACE,aAAGA,WAAW,cAAd,2EAEF,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,qKAeL,cACE,GAAM,gBADR,eAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,mQAgBL,cACE,GAAM,aADR,cAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,ybAwBL,cACE,GAAM,gBADR,eAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,4xBAoCL,cACE,GAAM,WADR,YAGA,2BACE,aAAGA,WAAW,cAAd,+BAA0D,aAAGA,WAAW,IACpE,KAAQ,iDAD8C,iCAI5D,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,0PAkBL,cACE,GAAM,gBADR,eAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,iqB,8NAoCTJ,EAAWK,gBAAiB","sources":["webpack://unittestbot-web/./src/docs/advanced/cpp-syntax.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/user/Github/utbot-new-wiki/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"supported-c-syntax\"\n    }}>{`Supported C++ Syntax`}</h1>\n    <p>{`Support of C++ language features is very limited. Here you can find test cases examples.\nAll code snippets below were taken from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/cpp-example/\"\n      }}>{`this directory`}</a>{`.`}</p>\n    {\n      /* toc */\n    }\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#reference-parameters\"\n        }}>{`Reference parameters`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#class-as-parameters\"\n        }}>{`Class as parameters`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#class-as-return-values\"\n        }}>{`Class as return values`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#class-methods\"\n        }}>{`Class methods`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#operators\"\n        }}>{`Operators`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#private\"\n        }}>{`Private`}</a></li>\n    </ul>\n    {\n      /* tocstop */\n    }\n    <h2 {...{\n      \"id\": \"reference-parameters\"\n    }}>{`Reference parameters`}</h2>\n    {\n      /*-\n      > `additional info`\n      [Source code example](https://github.com/UnitTestBot/UTBotCpp/tree/main/integration-tests/c-example/lib/types/types.c#L23)\n      -*/\n    }\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`int double_abs_lvalue_reference(int& a) {\n    if (a < 0) {\n        a *= -2;\n    }\n    return a;\n}\n\nint double_abs_const_lvalue_reference(const int& a) {\n    if (a < 0) {\n        return -2 * a;\n    }\n    return a;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, double_abs_lvalue_reference_test_1)\n{\n    // Construct input\n    int a = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = double_abs_lvalue_reference(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n\n    // Check function parameters\n    int expected_a = 0;\n    EXPECT_EQ(expected_a, a);\n}\n\nTEST(regression, double_abs_lvalue_reference_test_2)\n{\n    // Construct input\n    int a = -1;\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = double_abs_lvalue_reference(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n\n    // Check function parameters\n    int expected_a = 2;\n    EXPECT_EQ(expected_a, a);\n}\n\nTEST(regression, double_abs_const_lvalue_reference_test_1)\n{\n    // Construct input\n    int a = 0;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = double_abs_const_lvalue_reference(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n\nTEST(regression, double_abs_const_lvalue_reference_test_2)\n{\n    // Construct input\n    int a = -1;\n\n    // Expected output\n    int expected = 2;\n\n    // Trigger the function\n    int actual = double_abs_const_lvalue_reference(a);\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"class-as-parameters\"\n    }}>{`Class as parameters`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`For class as parameter class should be construct from initializer list of class members and has default constructor`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`class Point_2d {\npublic:\n  int x;\n  int y;\n\n  Point_2d();\n  Point_2d(const int& x, const int& y);\n}\n\n\nvoid set_abs_by_ref(Point_2d& point) {\n   if (point.x < 0) {\n       point.x = -1 * point.x;\n   }\n   if (point.y < 0) {\n       point.y *= -1;\n   }\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-1\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, set_abs_by_ref_test_1)\n{\n    // Construct input\n    class Point_2d point = {-1, -1};\n\n    // Expected output\n    // No output variable for void function\n\n    // Trigger the function\n    set_abs_by_ref(point);\n\n    // Check results\n    // No check results for void function\n\n    // Check function parameters\n    class Point_2d expected_point = {1, 1};\n    EXPECT_EQ(expected_point.x, point.x);\n    EXPECT_EQ(expected_point.y, point.y);\n}\n\nTEST(regression, set_abs_by_ref_test_2)\n{\n    // Construct input\n    class Point_2d point = {0, -1};\n\n    // Expected output\n    // No output variable for void function\n\n    // Trigger the function\n    set_abs_by_ref(point);\n\n    // Check results\n    // No check results for void function\n\n    // Check function parameters\n    class Point_2d expected_point = {0, 1};\n    EXPECT_EQ(expected_point.x, point.x);\n    EXPECT_EQ(expected_point.y, point.y);\n}\n\nTEST(regression, set_abs_by_ref_test_3)\n{\n    // Construct input\n    class Point_2d point = {-1, 0};\n\n    // Expected output\n    // No output variable for void function\n\n    // Trigger the function\n    set_abs_by_ref(point);\n\n    // Check results\n    // No check results for void function\n\n    // Check function parameters\n    class Point_2d expected_point = {1, 0};\n    EXPECT_EQ(expected_point.x, point.x);\n    EXPECT_EQ(expected_point.y, point.y);\n}\n\nTEST(regression, set_abs_by_ref_test_4)\n{\n    // Construct input\n    class Point_2d point = {0, 0};\n\n    // Expected output\n    // No output variable for void function\n\n    // Trigger the function\n    set_abs_by_ref(point);\n\n    // Check results\n    // No check results for void function\n\n    // Check function parameters\n    class Point_2d expected_point = {0, 0};\n    EXPECT_EQ(expected_point.x, point.x);\n    EXPECT_EQ(expected_point.y, point.y);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"class-as-return-values\"\n    }}>{`Class as return values`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`void set_abs_by_ref(Point_2d& point) {\n   if (point.x < 0) {\n       point.x = -1 * point.x;\n   }\n   if (point.y < 0) {\n       point.y *= -1;\n   }\n}\n\nPoint_2d abs_point(Point_2d point) {\n    set_abs_by_ref(point);\n    return point;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-2\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, abs_point_test_1)\n{\n    // Construct input\n    class Point_2d point = {-1, 0};\n\n    // Expected output\n    class Point_2d expected = {1, 0};\n\n    // Trigger the function\n    class Point_2d actual = abs_point(point);\n\n    // Check results\n    EXPECT_EQ(expected.x, actual.x);\n    EXPECT_EQ(expected.y, actual.y);\n}\n\nTEST(regression, abs_point_test_2)\n{\n    // Construct input\n    class Point_2d point = {-1, -1};\n\n    // Expected output\n    class Point_2d expected = {1, 1};\n\n    // Trigger the function\n    class Point_2d actual = abs_point(point);\n\n    // Check results\n    EXPECT_EQ(expected.x, actual.x);\n    EXPECT_EQ(expected.y, actual.y);\n}\n\nTEST(regression, abs_point_test_3)\n{\n    // Construct input\n    class Point_2d point = {0, -1};\n\n    // Expected output\n    class Point_2d expected = {0, 1};\n\n    // Trigger the function\n    class Point_2d actual = abs_point(point);\n\n    // Check results\n    EXPECT_EQ(expected.x, actual.x);\n    EXPECT_EQ(expected.y, actual.y);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"class-methods\"\n    }}>{`Class methods`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`For genetating method tests UTBot need default constructor of class  `}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`class Point_2d {\npublic:\n  int x;\n  int y;\n\n  Point_2d();\n  Point_2d(const int& x, const int& y);\n}\n\nint Point_2d::get_x() const {\n    return x;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-3\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, Point_2d_get_x_test_1)\n{\n    Point_2d Point_2d_obj;\n\n    // Expected output\n    int expected = 0;\n\n    // Trigger the function\n    int actual = Point_2d_obj.get_x();\n\n    // Check results\n    EXPECT_EQ(expected, actual);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"operators\"\n    }}>{`Operators`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`class Point_2d {\npublic:\n  int x;\n  int y;\n\n  Point_2d();\n  Point_2d(const int& x, const int& y);\n  Point_2d operator-=(const Point_2d& rhs);\n  friend Point_2d operator-(Point_2d lhs, const Point_2d& rhs);\n}\n\nPoint_2d Point_2d::operator-=(const Point_2d& rhs) {\n   this->x -= rhs.x;\n   this->y -= rhs.y;\n   return *this;\n}\n\nPoint_2d operator-(Point_2d lhs, const Point_2d& rhs) {\n    lhs -= rhs;\n    return lhs;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-4\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, Point_2d_operator_minus_equal_test_1)\n{\n    // Construct input\n    Point_2d Point_2d_obj;\n    class Point_2d rhs = {0, 0};\n\n    // Expected output\n    class Point_2d expected = {0, 0};\n\n    // Trigger the function\n    class Point_2d actual = Point_2d_obj.operator-=(rhs);\n\n    // Check results\n    EXPECT_EQ(expected.x, actual.x);\n    EXPECT_EQ(expected.y, actual.y);\n}\n\nTEST(regression, operator_minus_test_1)\n{\n    // Construct input\n    class Point_2d lhs = {0, 0};\n    class Point_2d rhs = {0, 0};\n\n    // Expected output\n    class Point_2d expected = {0, 0};\n\n    // Trigger the function\n    class Point_2d actual = operator-(lhs, rhs);\n\n    // Check results\n    EXPECT_EQ(expected.x, actual.x);\n    EXPECT_EQ(expected.y, actual.y);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"private\"\n    }}>{`Private`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`For test private UTBot use `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/martong/access_private.git\"\n        }}>{`martong/access_private.git`}</a></p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`class Private {\nprivate:\n    int x;\npublic:\n    Private();\n    Private(int x);\n    friend Private get_abs_value(Private p);\n};\n\nPrivate get_abs_value(Private p) {\n    if (p.x < 0) {\n        return -1 * p.x;\n    }\n    return p;\n}\n`}</code></pre>\n    <h6 {...{\n      \"id\": \"tests-code-5\"\n    }}>{`Tests code`}</h6>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cpp\"\n      }}>{`TEST(regression, get_abs_value_test_1)\n{\n    // Construct input\n    class Private p = {-1};\n\n    // Expected output\n    class Private expected = {1};\n\n    // Trigger the function\n    class Private actual = get_abs_value(p);\n\n    // Check results\n    EXPECT_EQ(access_private::x(expected), access_private::x(actual));\n}\n\nTEST(regression, get_abs_value_test_2)\n{\n    // Construct input\n    class Private p = {0};\n\n    // Expected output\n    class Private expected = {0};\n\n    // Trigger the function\n    class Private actual = get_abs_value(p);\n\n    // Check results\n    EXPECT_EQ(access_private::x(expected), access_private::x(actual));\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}